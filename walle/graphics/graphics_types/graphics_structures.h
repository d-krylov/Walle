
#ifndef WALLE_GRAPHICS_STRUCTURES_H
#define WALLE_GRAPHICS_STRUCTURES_H

#include "graphics_enums.h"
#include <array>
#include <bit>
#include <span>

namespace Walle {

struct PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT;

  PhysicalDeviceShaderReplicatedCompositesFeaturesEXT(bool32 shader_replicated_composites = {}, void *next = {})
    : shader_replicated_composites_(shader_replicated_composites), next_(next) {}

  PhysicalDeviceShaderReplicatedCompositesFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderReplicatedCompositesFeaturesEXT(std::bit_cast<PhysicalDeviceShaderReplicatedCompositesFeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderReplicatedCompositesFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderReplicatedCompositesFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderReplicatedCompositesFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT;
  void *next_;
  bool32 shader_replicated_composites_;
};

struct PhysicalDeviceImageAlignmentControlFeaturesMESA {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA;

  using native_type = VkPhysicalDeviceImageAlignmentControlFeaturesMESA;

  PhysicalDeviceImageAlignmentControlFeaturesMESA(bool32 image_alignment_control = {}, void *next = {})
    : image_alignment_control_(image_alignment_control), next_(next) {}

  PhysicalDeviceImageAlignmentControlFeaturesMESA(const native_type &rhs)
    : PhysicalDeviceImageAlignmentControlFeaturesMESA(std::bit_cast<PhysicalDeviceImageAlignmentControlFeaturesMESA>(rhs)) {}

  PhysicalDeviceImageAlignmentControlFeaturesMESA &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageAlignmentControlFeaturesMESA>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageAlignmentControlFeaturesMESA &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA;
  void *next_;
  bool32 image_alignment_control_;
};

struct MemoryMapPlacedInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_MAP_PLACED_INFO_EXT;

  using native_type = VkMemoryMapPlacedInfoEXT;

  MemoryMapPlacedInfoEXT(void *p_placed_address = {}, const void *next = {}) : p_placed_address_(p_placed_address), next_(next) {}

  MemoryMapPlacedInfoEXT(const native_type &rhs) : MemoryMapPlacedInfoEXT(std::bit_cast<MemoryMapPlacedInfoEXT>(rhs)) {}

  MemoryMapPlacedInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryMapPlacedInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryMapPlacedInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_MAP_PLACED_INFO_EXT;
  const void *next_;
  void *p_placed_address_;
};

struct PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR;

  using native_type = VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;

  PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(bool32 dynamic_rendering_local_read = {}, void *next = {})
    : dynamic_rendering_local_read_(dynamic_rendering_local_read), next_(next) {}

  PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(std::bit_cast<PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR>(rhs)) {}

  PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR;
  void *next_;
  bool32 dynamic_rendering_local_read_;
};

struct SemaphoreSubmitInfo {

  static constexpr StructureType structure_type = StructureType::E_SEMAPHORE_SUBMIT_INFO;

  using native_type = VkSemaphoreSubmitInfo;

  SemaphoreSubmitInfo(
    VkSemaphore semaphore = {}, uint64_t value = {}, PipelineStageMask2 stage_mask = {}, uint32_t device_index = {}, const void *next = {})
    : semaphore_(semaphore), value_(value), stage_mask_(stage_mask), device_index_(device_index), next_(next) {}

  SemaphoreSubmitInfo(const native_type &rhs) : SemaphoreSubmitInfo(std::bit_cast<SemaphoreSubmitInfo>(rhs)) {}

  SemaphoreSubmitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SemaphoreSubmitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SemaphoreSubmitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SEMAPHORE_SUBMIT_INFO;
  const void *next_;
  VkSemaphore semaphore_;
  uint64_t value_;
  PipelineStageMask2 stage_mask_;
  uint32_t device_index_;
};

struct RenderPassStripeSubmitInfoARM {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM;

  using native_type = VkRenderPassStripeSubmitInfoARM;

  RenderPassStripeSubmitInfoARM(uint32_t stripe_semaphore_info_count = {},
                                const SemaphoreSubmitInfo *p_stripe_semaphore_infos = {},
                                const void *next = {})
    : stripe_semaphore_info_count_(stripe_semaphore_info_count), p_stripe_semaphore_infos_(p_stripe_semaphore_infos), next_(next) {}

  RenderPassStripeSubmitInfoARM(const native_type &rhs)
    : RenderPassStripeSubmitInfoARM(std::bit_cast<RenderPassStripeSubmitInfoARM>(rhs)) {}

  RenderPassStripeSubmitInfoARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassStripeSubmitInfoARM>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassStripeSubmitInfoARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM;
  const void *next_;
  uint32_t stripe_semaphore_info_count_;
  const SemaphoreSubmitInfo *p_stripe_semaphore_infos_;
};

struct Offset2D {

  using native_type = VkOffset2D;

  Offset2D(int32_t x = {}, int32_t y = {}) : x_(x), y_(y) {}

  Offset2D(const native_type &rhs) : Offset2D(std::bit_cast<Offset2D>(rhs)) {}

  Offset2D &operator=(const native_type &rhs) {
    *this = std::bit_cast<Offset2D>(rhs);
    return *this;
  }

  auto operator<=>(const Offset2D &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  int32_t x_;
  int32_t y_;
};

struct Extent2D {

  using native_type = VkExtent2D;

  Extent2D(uint32_t width = {}, uint32_t height = {}) : width_(width), height_(height) {}

  Extent2D(const native_type &rhs) : Extent2D(std::bit_cast<Extent2D>(rhs)) {}

  Extent2D &operator=(const native_type &rhs) {
    *this = std::bit_cast<Extent2D>(rhs);
    return *this;
  }

  auto operator<=>(const Extent2D &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t width_;
  uint32_t height_;
};

struct Rect2D {

  using native_type = VkRect2D;

  Rect2D(Offset2D offset = {}, Extent2D extent = {}) : offset_(offset), extent_(extent) {}

  Rect2D(const native_type &rhs) : Rect2D(std::bit_cast<Rect2D>(rhs)) {}

  Rect2D &operator=(const native_type &rhs) {
    *this = std::bit_cast<Rect2D>(rhs);
    return *this;
  }

  auto operator<=>(const Rect2D &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  Offset2D offset_;
  Extent2D extent_;
};

struct RenderPassStripeInfoARM {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_STRIPE_INFO_ARM;

  using native_type = VkRenderPassStripeInfoARM;

  RenderPassStripeInfoARM(Rect2D stripe_area = {}, const void *next = {}) : stripe_area_(stripe_area), next_(next) {}

  RenderPassStripeInfoARM(const native_type &rhs) : RenderPassStripeInfoARM(std::bit_cast<RenderPassStripeInfoARM>(rhs)) {}

  RenderPassStripeInfoARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassStripeInfoARM>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassStripeInfoARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_STRIPE_INFO_ARM;
  const void *next_;
  Rect2D stripe_area_;
};

struct RenderPassStripeBeginInfoARM {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_STRIPE_BEGIN_INFO_ARM;

  using native_type = VkRenderPassStripeBeginInfoARM;

  RenderPassStripeBeginInfoARM(uint32_t stripe_info_count = {}, const RenderPassStripeInfoARM *p_stripe_infos = {}, const void *next = {})
    : stripe_info_count_(stripe_info_count), p_stripe_infos_(p_stripe_infos), next_(next) {}

  RenderPassStripeBeginInfoARM(const native_type &rhs) : RenderPassStripeBeginInfoARM(std::bit_cast<RenderPassStripeBeginInfoARM>(rhs)) {}

  RenderPassStripeBeginInfoARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassStripeBeginInfoARM>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassStripeBeginInfoARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_STRIPE_BEGIN_INFO_ARM;
  const void *next_;
  uint32_t stripe_info_count_;
  const RenderPassStripeInfoARM *p_stripe_infos_;
};

struct PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG;

  using native_type = VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG;

  PhysicalDeviceRelaxedLineRasterizationFeaturesIMG(bool32 relaxed_line_rasterization = {}, void *next = {})
    : relaxed_line_rasterization_(relaxed_line_rasterization), next_(next) {}

  PhysicalDeviceRelaxedLineRasterizationFeaturesIMG(const native_type &rhs)
    : PhysicalDeviceRelaxedLineRasterizationFeaturesIMG(std::bit_cast<PhysicalDeviceRelaxedLineRasterizationFeaturesIMG>(rhs)) {}

  PhysicalDeviceRelaxedLineRasterizationFeaturesIMG &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRelaxedLineRasterizationFeaturesIMG>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRelaxedLineRasterizationFeaturesIMG &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG;
  void *next_;
  bool32 relaxed_line_rasterization_;
};

struct PhysicalDeviceSchedulingControlsPropertiesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM;

  using native_type = VkPhysicalDeviceSchedulingControlsPropertiesARM;

  PhysicalDeviceSchedulingControlsPropertiesARM(PhysicalDeviceSchedulingControlsMask scheduling_controls_flags = {}, void *next = {})
    : scheduling_controls_flags_(scheduling_controls_flags), next_(next) {}

  PhysicalDeviceSchedulingControlsPropertiesARM(const native_type &rhs)
    : PhysicalDeviceSchedulingControlsPropertiesARM(std::bit_cast<PhysicalDeviceSchedulingControlsPropertiesARM>(rhs)) {}

  PhysicalDeviceSchedulingControlsPropertiesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSchedulingControlsPropertiesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSchedulingControlsPropertiesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM;
  void *next_;
  PhysicalDeviceSchedulingControlsMask scheduling_controls_flags_;
};

struct PhysicalDeviceSchedulingControlsFeaturesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM;

  using native_type = VkPhysicalDeviceSchedulingControlsFeaturesARM;

  PhysicalDeviceSchedulingControlsFeaturesARM(bool32 scheduling_controls = {}, void *next = {})
    : scheduling_controls_(scheduling_controls), next_(next) {}

  PhysicalDeviceSchedulingControlsFeaturesARM(const native_type &rhs)
    : PhysicalDeviceSchedulingControlsFeaturesARM(std::bit_cast<PhysicalDeviceSchedulingControlsFeaturesARM>(rhs)) {}

  PhysicalDeviceSchedulingControlsFeaturesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSchedulingControlsFeaturesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSchedulingControlsFeaturesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM;
  void *next_;
  bool32 scheduling_controls_;
};

struct PhysicalDeviceCudaKernelLaunchPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceCudaKernelLaunchPropertiesNV;

  PhysicalDeviceCudaKernelLaunchPropertiesNV() = default;

  PhysicalDeviceCudaKernelLaunchPropertiesNV(const native_type &rhs)
    : PhysicalDeviceCudaKernelLaunchPropertiesNV(std::bit_cast<PhysicalDeviceCudaKernelLaunchPropertiesNV>(rhs)) {}

  PhysicalDeviceCudaKernelLaunchPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCudaKernelLaunchPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCudaKernelLaunchPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV;
  void *next_ = {};
  uint32_t compute_capability_minor_ = {};
  uint32_t compute_capability_major_ = {};
};

struct PhysicalDeviceCudaKernelLaunchFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV;

  using native_type = VkPhysicalDeviceCudaKernelLaunchFeaturesNV;

  PhysicalDeviceCudaKernelLaunchFeaturesNV(bool32 cuda_kernel_launch_features = {}, void *next = {})
    : cuda_kernel_launch_features_(cuda_kernel_launch_features), next_(next) {}

  PhysicalDeviceCudaKernelLaunchFeaturesNV(const native_type &rhs)
    : PhysicalDeviceCudaKernelLaunchFeaturesNV(std::bit_cast<PhysicalDeviceCudaKernelLaunchFeaturesNV>(rhs)) {}

  PhysicalDeviceCudaKernelLaunchFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCudaKernelLaunchFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCudaKernelLaunchFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV;
  void *next_;
  bool32 cuda_kernel_launch_features_;
};

struct LatencySurfaceCapabilitiesNV {

  static constexpr StructureType structure_type = StructureType::E_LATENCY_SURFACE_CAPABILITIES_NV;

  using native_type = VkLatencySurfaceCapabilitiesNV;

  LatencySurfaceCapabilitiesNV(uint32_t present_mode_count = {}, PresentMode *p_present_modes = {}, const void *next = {})
    : present_mode_count_(present_mode_count), p_present_modes_(p_present_modes), next_(next) {}

  LatencySurfaceCapabilitiesNV(const native_type &rhs) : LatencySurfaceCapabilitiesNV(std::bit_cast<LatencySurfaceCapabilitiesNV>(rhs)) {}

  LatencySurfaceCapabilitiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<LatencySurfaceCapabilitiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const LatencySurfaceCapabilitiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_LATENCY_SURFACE_CAPABILITIES_NV;
  const void *next_;
  uint32_t present_mode_count_;
  PresentMode *p_present_modes_;
};

struct SwapchainLatencyCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_LATENCY_CREATE_INFO_NV;

  using native_type = VkSwapchainLatencyCreateInfoNV;

  SwapchainLatencyCreateInfoNV(bool32 latency_mode_enable = {}, const void *next = {})
    : latency_mode_enable_(latency_mode_enable), next_(next) {}

  SwapchainLatencyCreateInfoNV(const native_type &rhs) : SwapchainLatencyCreateInfoNV(std::bit_cast<SwapchainLatencyCreateInfoNV>(rhs)) {}

  SwapchainLatencyCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainLatencyCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainLatencyCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_LATENCY_CREATE_INFO_NV;
  const void *next_;
  bool32 latency_mode_enable_;
};

struct LatencyTimingsFrameReportNV {

  static constexpr StructureType structure_type = StructureType::E_LATENCY_TIMINGS_FRAME_REPORT_NV;

  using native_type = VkLatencyTimingsFrameReportNV;

  LatencyTimingsFrameReportNV() = default;

  LatencyTimingsFrameReportNV(const native_type &rhs) : LatencyTimingsFrameReportNV(std::bit_cast<LatencyTimingsFrameReportNV>(rhs)) {}

  LatencyTimingsFrameReportNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<LatencyTimingsFrameReportNV>(rhs);
    return *this;
  }

  auto operator<=>(const LatencyTimingsFrameReportNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_LATENCY_TIMINGS_FRAME_REPORT_NV;
  const void *next_ = {};
  uint64_t present_id_ = {};
  uint64_t input_sample_time_us_ = {};
  uint64_t sim_start_time_us_ = {};
  uint64_t sim_end_time_us_ = {};
  uint64_t render_submit_start_time_us_ = {};
  uint64_t render_submit_end_time_us_ = {};
  uint64_t present_start_time_us_ = {};
  uint64_t present_end_time_us_ = {};
  uint64_t driver_start_time_us_ = {};
  uint64_t driver_end_time_us_ = {};
  uint64_t os_render_queue_start_time_us_ = {};
  uint64_t os_render_queue_end_time_us_ = {};
  uint64_t gpu_render_start_time_us_ = {};
  uint64_t gpu_render_end_time_us_ = {};
};

struct LatencySleepInfoNV {

  static constexpr StructureType structure_type = StructureType::E_LATENCY_SLEEP_INFO_NV;

  using native_type = VkLatencySleepInfoNV;

  LatencySleepInfoNV(VkSemaphore signal_semaphore = {}, uint64_t value = {}, const void *next = {})
    : signal_semaphore_(signal_semaphore), value_(value), next_(next) {}

  LatencySleepInfoNV(const native_type &rhs) : LatencySleepInfoNV(std::bit_cast<LatencySleepInfoNV>(rhs)) {}

  LatencySleepInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<LatencySleepInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const LatencySleepInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_LATENCY_SLEEP_INFO_NV;
  const void *next_;
  VkSemaphore signal_semaphore_;
  uint64_t value_;
};

struct LatencySleepModeInfoNV {

  static constexpr StructureType structure_type = StructureType::E_LATENCY_SLEEP_MODE_INFO_NV;

  using native_type = VkLatencySleepModeInfoNV;

  LatencySleepModeInfoNV(bool32 low_latency_mode = {},
                         bool32 low_latency_boost = {},
                         uint32_t minimum_interval_us = {},
                         const void *next = {})
    : low_latency_mode_(low_latency_mode), low_latency_boost_(low_latency_boost), minimum_interval_us_(minimum_interval_us), next_(next) {}

  LatencySleepModeInfoNV(const native_type &rhs) : LatencySleepModeInfoNV(std::bit_cast<LatencySleepModeInfoNV>(rhs)) {}

  LatencySleepModeInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<LatencySleepModeInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const LatencySleepModeInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_LATENCY_SLEEP_MODE_INFO_NV;
  const void *next_;
  bool32 low_latency_mode_;
  bool32 low_latency_boost_;
  uint32_t minimum_interval_us_;
};

struct PhysicalDeviceCubicWeightsFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceCubicWeightsFeaturesQCOM;

  PhysicalDeviceCubicWeightsFeaturesQCOM(bool32 selectable_cubic_weights = {}, void *next = {})
    : selectable_cubic_weights_(selectable_cubic_weights), next_(next) {}

  PhysicalDeviceCubicWeightsFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceCubicWeightsFeaturesQCOM(std::bit_cast<PhysicalDeviceCubicWeightsFeaturesQCOM>(rhs)) {}

  PhysicalDeviceCubicWeightsFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCubicWeightsFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCubicWeightsFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM;
  void *next_;
  bool32 selectable_cubic_weights_;
};

struct SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM;

  using native_type = VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;

  SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(bool32 enable_ydegamma = {}, bool32 enable_cb_cr_degamma = {}, void *next = {})
    : enable_ydegamma_(enable_ydegamma), enable_cb_cr_degamma_(enable_cb_cr_degamma), next_(next) {}

  SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(const native_type &rhs)
    : SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(std::bit_cast<SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM>(rhs)) {}

  SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM;
  void *next_;
  bool32 enable_ydegamma_;
  bool32 enable_cb_cr_degamma_;
};

struct BindDescriptorBufferEmbeddedSamplersInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT;

  using native_type = VkBindDescriptorBufferEmbeddedSamplersInfoEXT;

  BindDescriptorBufferEmbeddedSamplersInfoEXT(ShaderStageMask stage_flags = {},
                                              VkPipelineLayout layout = {},
                                              uint32_t set = {},
                                              const void *next = {})
    : stage_flags_(stage_flags), layout_(layout), set_(set), next_(next) {}

  BindDescriptorBufferEmbeddedSamplersInfoEXT(const native_type &rhs)
    : BindDescriptorBufferEmbeddedSamplersInfoEXT(std::bit_cast<BindDescriptorBufferEmbeddedSamplersInfoEXT>(rhs)) {}

  BindDescriptorBufferEmbeddedSamplersInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindDescriptorBufferEmbeddedSamplersInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const BindDescriptorBufferEmbeddedSamplersInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT;
  const void *next_;
  ShaderStageMask stage_flags_;
  VkPipelineLayout layout_;
  uint32_t set_;
};

struct PushConstantsInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PUSH_CONSTANTS_INFO_KHR;

  using native_type = VkPushConstantsInfoKHR;

  PushConstantsInfoKHR(VkPipelineLayout layout = {},
                       ShaderStageMask stage_flags = {},
                       uint32_t offset = {},
                       uint32_t size = {},
                       const void *p_values = {},
                       const void *next = {})
    : layout_(layout), stage_flags_(stage_flags), offset_(offset), size_(size), p_values_(p_values), next_(next) {}

  PushConstantsInfoKHR(const native_type &rhs) : PushConstantsInfoKHR(std::bit_cast<PushConstantsInfoKHR>(rhs)) {}

  PushConstantsInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PushConstantsInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PushConstantsInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PUSH_CONSTANTS_INFO_KHR;
  const void *next_;
  VkPipelineLayout layout_;
  ShaderStageMask stage_flags_;
  uint32_t offset_;
  uint32_t size_;
  const void *p_values_;
};

struct BindMemoryStatusKHR {

  static constexpr StructureType structure_type = StructureType::E_BIND_MEMORY_STATUS_KHR;

  using native_type = VkBindMemoryStatusKHR;

  BindMemoryStatusKHR(Result *p_result = {}, const void *next = {}) : p_result_(p_result), next_(next) {}

  BindMemoryStatusKHR(const native_type &rhs) : BindMemoryStatusKHR(std::bit_cast<BindMemoryStatusKHR>(rhs)) {}

  BindMemoryStatusKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindMemoryStatusKHR>(rhs);
    return *this;
  }

  auto operator<=>(const BindMemoryStatusKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_MEMORY_STATUS_KHR;
  const void *next_;
  Result *p_result_;
};

struct SpecializationMapEntry {

  using native_type = VkSpecializationMapEntry;

  SpecializationMapEntry(uint32_t constant_id = {}, uint32_t offset = {}, size_t size = {})
    : constant_id_(constant_id), offset_(offset), size_(size) {}

  SpecializationMapEntry(const native_type &rhs) : SpecializationMapEntry(std::bit_cast<SpecializationMapEntry>(rhs)) {}

  SpecializationMapEntry &operator=(const native_type &rhs) {
    *this = std::bit_cast<SpecializationMapEntry>(rhs);
    return *this;
  }

  auto operator<=>(const SpecializationMapEntry &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t constant_id_;
  uint32_t offset_;
  size_t size_;
};

struct SpecializationInfo {

  using native_type = VkSpecializationInfo;

  SpecializationInfo(uint32_t map_entry_count = {},
                     const SpecializationMapEntry *p_map_entries = {},
                     size_t data_size = {},
                     const void *p_data = {})
    : map_entry_count_(map_entry_count), p_map_entries_(p_map_entries), data_size_(data_size), p_data_(p_data) {}

  SpecializationInfo(const native_type &rhs) : SpecializationInfo(std::bit_cast<SpecializationInfo>(rhs)) {}

  SpecializationInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SpecializationInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SpecializationInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t map_entry_count_;
  const SpecializationMapEntry *p_map_entries_;
  size_t data_size_;
  const void *p_data_;
};

struct PipelineShaderStageCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_SHADER_STAGE_CREATE_INFO;

  using native_type = VkPipelineShaderStageCreateInfo;

  PipelineShaderStageCreateInfo(PipelineShaderStageCreateMask flags = {},
                                ShaderStageMaskBit stage = {},
                                VkShaderModule module = {},
                                const char *p_name = {},
                                const SpecializationInfo *p_specialization_info = {},
                                const void *next = {})
    : flags_(flags), stage_(stage), module_(module), p_name_(p_name), p_specialization_info_(p_specialization_info), next_(next) {}

  PipelineShaderStageCreateInfo(const native_type &rhs)
    : PipelineShaderStageCreateInfo(std::bit_cast<PipelineShaderStageCreateInfo>(rhs)) {}

  PipelineShaderStageCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineShaderStageCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineShaderStageCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_SHADER_STAGE_CREATE_INFO;
  const void *next_;
  PipelineShaderStageCreateMask flags_;
  ShaderStageMaskBit stage_;
  VkShaderModule module_;
  const char *p_name_;
  const SpecializationInfo *p_specialization_info_;
};

struct PipelineLibraryCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_LIBRARY_CREATE_INFO_KHR;

  using native_type = VkPipelineLibraryCreateInfoKHR;

  PipelineLibraryCreateInfoKHR(uint32_t library_count = {}, const VkPipeline *p_libraries = {}, const void *next = {})
    : library_count_(library_count), p_libraries_(p_libraries), next_(next) {}

  PipelineLibraryCreateInfoKHR(const native_type &rhs) : PipelineLibraryCreateInfoKHR(std::bit_cast<PipelineLibraryCreateInfoKHR>(rhs)) {}

  PipelineLibraryCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineLibraryCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineLibraryCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_LIBRARY_CREATE_INFO_KHR;
  const void *next_;
  uint32_t library_count_;
  const VkPipeline *p_libraries_;
};

struct BindDescriptorSetsInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_BIND_DESCRIPTOR_SETS_INFO_KHR;

  using native_type = VkBindDescriptorSetsInfoKHR;

  BindDescriptorSetsInfoKHR(ShaderStageMask stage_flags = {},
                            VkPipelineLayout layout = {},
                            uint32_t first_set = {},
                            uint32_t descriptor_set_count = {},
                            const VkDescriptorSet *p_descriptor_sets = {},
                            uint32_t dynamic_offset_count = {},
                            const uint32_t *p_dynamic_offsets = {},
                            const void *next = {})
    : stage_flags_(stage_flags), layout_(layout), first_set_(first_set), descriptor_set_count_(descriptor_set_count),
      p_descriptor_sets_(p_descriptor_sets), dynamic_offset_count_(dynamic_offset_count), p_dynamic_offsets_(p_dynamic_offsets),
      next_(next) {}

  BindDescriptorSetsInfoKHR(const native_type &rhs) : BindDescriptorSetsInfoKHR(std::bit_cast<BindDescriptorSetsInfoKHR>(rhs)) {}

  BindDescriptorSetsInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindDescriptorSetsInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const BindDescriptorSetsInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_DESCRIPTOR_SETS_INFO_KHR;
  const void *next_;
  ShaderStageMask stage_flags_;
  VkPipelineLayout layout_;
  uint32_t first_set_;
  uint32_t descriptor_set_count_;
  const VkDescriptorSet *p_descriptor_sets_;
  uint32_t dynamic_offset_count_;
  const uint32_t *p_dynamic_offsets_;
};

struct PhysicalDeviceShaderTileImageFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderTileImageFeaturesEXT;

  PhysicalDeviceShaderTileImageFeaturesEXT(bool32 shader_tile_image_color_read_access = {},
                                           bool32 shader_tile_image_depth_read_access = {},
                                           bool32 shader_tile_image_stencil_read_access = {},
                                           void *next = {})
    : shader_tile_image_color_read_access_(shader_tile_image_color_read_access),
      shader_tile_image_depth_read_access_(shader_tile_image_depth_read_access),
      shader_tile_image_stencil_read_access_(shader_tile_image_stencil_read_access), next_(next) {}

  PhysicalDeviceShaderTileImageFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderTileImageFeaturesEXT(std::bit_cast<PhysicalDeviceShaderTileImageFeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderTileImageFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderTileImageFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderTileImageFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT;
  void *next_;
  bool32 shader_tile_image_color_read_access_;
  bool32 shader_tile_image_depth_read_access_;
  bool32 shader_tile_image_stencil_read_access_;
};

struct PushConstantRange {

  using native_type = VkPushConstantRange;

  PushConstantRange(ShaderStageMask stage_flags = {}, uint32_t offset = {}, uint32_t size = {})
    : stage_flags_(stage_flags), offset_(offset), size_(size) {}

  PushConstantRange(const native_type &rhs) : PushConstantRange(std::bit_cast<PushConstantRange>(rhs)) {}

  PushConstantRange &operator=(const native_type &rhs) {
    *this = std::bit_cast<PushConstantRange>(rhs);
    return *this;
  }

  auto operator<=>(const PushConstantRange &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ShaderStageMask stage_flags_;
  uint32_t offset_;
  uint32_t size_;
};

struct ShaderCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SHADER_CREATE_INFO_EXT;

  using native_type = VkShaderCreateInfoEXT;

  ShaderCreateInfoEXT(ShaderCreateMask flags = {},
                      ShaderStageMaskBit stage = {},
                      ShaderStageMask next_stage = {},
                      ShaderCodeType code_type = ShaderCodeType::E_BINARY_EXT,
                      size_t code_size = {},
                      const void *p_code = {},
                      const char *p_name = {},
                      uint32_t set_layout_count = {},
                      const VkDescriptorSetLayout *p_set_layouts = {},
                      uint32_t push_constant_range_count = {},
                      const PushConstantRange *p_push_constant_ranges = {},
                      const SpecializationInfo *p_specialization_info = {},
                      const void *next = {})
    : flags_(flags), stage_(stage), next_stage_(next_stage), code_type_(code_type), code_size_(code_size), p_code_(p_code), p_name_(p_name),
      set_layout_count_(set_layout_count), p_set_layouts_(p_set_layouts), push_constant_range_count_(push_constant_range_count),
      p_push_constant_ranges_(p_push_constant_ranges), p_specialization_info_(p_specialization_info), next_(next) {}

  ShaderCreateInfoEXT(const native_type &rhs) : ShaderCreateInfoEXT(std::bit_cast<ShaderCreateInfoEXT>(rhs)) {}

  ShaderCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShaderCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ShaderCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SHADER_CREATE_INFO_EXT;
  const void *next_;
  ShaderCreateMask flags_;
  ShaderStageMaskBit stage_;
  ShaderStageMask next_stage_;
  ShaderCodeType code_type_;
  size_t code_size_;
  const void *p_code_;
  const char *p_name_;
  uint32_t set_layout_count_;
  const VkDescriptorSetLayout *p_set_layouts_;
  uint32_t push_constant_range_count_;
  const PushConstantRange *p_push_constant_ranges_;
  const SpecializationInfo *p_specialization_info_;
};

struct PhysicalDeviceShaderObjectFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderObjectFeaturesEXT;

  PhysicalDeviceShaderObjectFeaturesEXT(bool32 shader_object = {}, void *next = {}) : shader_object_(shader_object), next_(next) {}

  PhysicalDeviceShaderObjectFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderObjectFeaturesEXT(std::bit_cast<PhysicalDeviceShaderObjectFeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderObjectFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderObjectFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderObjectFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT;
  void *next_;
  bool32 shader_object_;
};

struct MemoryMapInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_MAP_INFO_KHR;

  using native_type = VkMemoryMapInfoKHR;

  MemoryMapInfoKHR(
    MemoryMapMask flags = {}, VkDeviceMemory memory = {}, DeviceSize offset = {}, DeviceSize size = {}, const void *next = {})
    : flags_(flags), memory_(memory), offset_(offset), size_(size), next_(next) {}

  MemoryMapInfoKHR(const native_type &rhs) : MemoryMapInfoKHR(std::bit_cast<MemoryMapInfoKHR>(rhs)) {}

  MemoryMapInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryMapInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryMapInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_MAP_INFO_KHR;
  const void *next_;
  MemoryMapMask flags_;
  VkDeviceMemory memory_;
  DeviceSize offset_;
  DeviceSize size_;
};

struct QueryLowLatencySupportNV {

  static constexpr StructureType structure_type = StructureType::E_QUERY_LOW_LATENCY_SUPPORT_NV;

  using native_type = VkQueryLowLatencySupportNV;

  QueryLowLatencySupportNV(void *p_queried_low_latency_data = {}, const void *next = {})
    : p_queried_low_latency_data_(p_queried_low_latency_data), next_(next) {}

  QueryLowLatencySupportNV(const native_type &rhs) : QueryLowLatencySupportNV(std::bit_cast<QueryLowLatencySupportNV>(rhs)) {}

  QueryLowLatencySupportNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueryLowLatencySupportNV>(rhs);
    return *this;
  }

  auto operator<=>(const QueryLowLatencySupportNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUERY_LOW_LATENCY_SUPPORT_NV;
  const void *next_;
  void *p_queried_low_latency_data_;
};

struct PhysicalDeviceShaderCorePropertiesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM;

  using native_type = VkPhysicalDeviceShaderCorePropertiesARM;

  PhysicalDeviceShaderCorePropertiesARM() = default;

  PhysicalDeviceShaderCorePropertiesARM(const native_type &rhs)
    : PhysicalDeviceShaderCorePropertiesARM(std::bit_cast<PhysicalDeviceShaderCorePropertiesARM>(rhs)) {}

  PhysicalDeviceShaderCorePropertiesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderCorePropertiesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderCorePropertiesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM;
  void *next_ = {};
  uint32_t pixel_rate_ = {};
  uint32_t texel_rate_ = {};
  uint32_t fma_rate_ = {};
};

struct PhysicalDeviceRayTracingPositionFetchFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR;

  using native_type = VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;

  PhysicalDeviceRayTracingPositionFetchFeaturesKHR(bool32 ray_tracing_position_fetch = {}, void *next = {})
    : ray_tracing_position_fetch_(ray_tracing_position_fetch), next_(next) {}

  PhysicalDeviceRayTracingPositionFetchFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceRayTracingPositionFetchFeaturesKHR(std::bit_cast<PhysicalDeviceRayTracingPositionFetchFeaturesKHR>(rhs)) {}

  PhysicalDeviceRayTracingPositionFetchFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingPositionFetchFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingPositionFetchFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR;
  void *next_;
  bool32 ray_tracing_position_fetch_;
};

struct DirectDriverLoadingInfoLUNARG {

  static constexpr StructureType structure_type = StructureType::E_DIRECT_DRIVER_LOADING_INFO_LUNARG;

  using native_type = VkDirectDriverLoadingInfoLUNARG;

  DirectDriverLoadingInfoLUNARG(DirectDriverLoadingMask flags = {},
                                PFN_vkGetInstanceProcAddrLUNARG pfn_get_instance_proc_addr = {},
                                void *next = {})
    : flags_(flags), pfn_get_instance_proc_addr_(pfn_get_instance_proc_addr), next_(next) {}

  DirectDriverLoadingInfoLUNARG(const native_type &rhs)
    : DirectDriverLoadingInfoLUNARG(std::bit_cast<DirectDriverLoadingInfoLUNARG>(rhs)) {}

  DirectDriverLoadingInfoLUNARG &operator=(const native_type &rhs) {
    *this = std::bit_cast<DirectDriverLoadingInfoLUNARG>(rhs);
    return *this;
  }

  auto operator<=>(const DirectDriverLoadingInfoLUNARG &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DIRECT_DRIVER_LOADING_INFO_LUNARG;
  void *next_;
  DirectDriverLoadingMask flags_;
  PFN_vkGetInstanceProcAddrLUNARG pfn_get_instance_proc_addr_;
};

struct DirectDriverLoadingListLUNARG {

  static constexpr StructureType structure_type = StructureType::E_DIRECT_DRIVER_LOADING_LIST_LUNARG;

  using native_type = VkDirectDriverLoadingListLUNARG;

  DirectDriverLoadingListLUNARG(DirectDriverLoadingMode mode = DirectDriverLoadingMode::E_EXCLUSIVE_LUNARG,
                                uint32_t driver_count = {},
                                const DirectDriverLoadingInfoLUNARG *p_drivers = {},
                                const void *next = {})
    : mode_(mode), driver_count_(driver_count), p_drivers_(p_drivers), next_(next) {}

  DirectDriverLoadingListLUNARG(const native_type &rhs)
    : DirectDriverLoadingListLUNARG(std::bit_cast<DirectDriverLoadingListLUNARG>(rhs)) {}

  DirectDriverLoadingListLUNARG &operator=(const native_type &rhs) {
    *this = std::bit_cast<DirectDriverLoadingListLUNARG>(rhs);
    return *this;
  }

  auto operator<=>(const DirectDriverLoadingListLUNARG &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DIRECT_DRIVER_LOADING_LIST_LUNARG;
  const void *next_;
  DirectDriverLoadingMode mode_;
  uint32_t driver_count_;
  const DirectDriverLoadingInfoLUNARG *p_drivers_;
};

struct PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV;

  using native_type = VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;

  PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(bool32 extended_sparse_address_space = {}, void *next = {})
    : extended_sparse_address_space_(extended_sparse_address_space), next_(next) {}

  PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(const native_type &rhs)
    : PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(std::bit_cast<PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>(rhs)) {}

  PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV;
  void *next_;
  bool32 extended_sparse_address_space_;
};

struct SwapchainPresentScalingCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT;

  using native_type = VkSwapchainPresentScalingCreateInfoEXT;

  SwapchainPresentScalingCreateInfoEXT(PresentScalingMask scaling_behavior = {},
                                       PresentGravityMask present_gravity_x = {},
                                       PresentGravityMask present_gravity_y = {},
                                       const void *next = {})
    : scaling_behavior_(scaling_behavior), present_gravity_x_(present_gravity_x), present_gravity_y_(present_gravity_y), next_(next) {}

  SwapchainPresentScalingCreateInfoEXT(const native_type &rhs)
    : SwapchainPresentScalingCreateInfoEXT(std::bit_cast<SwapchainPresentScalingCreateInfoEXT>(rhs)) {}

  SwapchainPresentScalingCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainPresentScalingCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainPresentScalingCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT;
  const void *next_;
  PresentScalingMask scaling_behavior_;
  PresentGravityMask present_gravity_x_;
  PresentGravityMask present_gravity_y_;
};

struct SwapchainPresentModeInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_PRESENT_MODE_INFO_EXT;

  using native_type = VkSwapchainPresentModeInfoEXT;

  SwapchainPresentModeInfoEXT(uint32_t swapchain_count = {}, const PresentMode *p_present_modes = {}, const void *next = {})
    : swapchain_count_(swapchain_count), p_present_modes_(p_present_modes), next_(next) {}

  SwapchainPresentModeInfoEXT(const native_type &rhs) : SwapchainPresentModeInfoEXT(std::bit_cast<SwapchainPresentModeInfoEXT>(rhs)) {}

  SwapchainPresentModeInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainPresentModeInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainPresentModeInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_PRESENT_MODE_INFO_EXT;
  const void *next_;
  uint32_t swapchain_count_;
  const PresentMode *p_present_modes_;
};

struct PhysicalDeviceLayeredDriverPropertiesMSFT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT;

  using native_type = VkPhysicalDeviceLayeredDriverPropertiesMSFT;

  PhysicalDeviceLayeredDriverPropertiesMSFT() = default;

  PhysicalDeviceLayeredDriverPropertiesMSFT(const native_type &rhs)
    : PhysicalDeviceLayeredDriverPropertiesMSFT(std::bit_cast<PhysicalDeviceLayeredDriverPropertiesMSFT>(rhs)) {}

  PhysicalDeviceLayeredDriverPropertiesMSFT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLayeredDriverPropertiesMSFT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLayeredDriverPropertiesMSFT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT;
  void *next_ = {};
  LayeredDriverUnderlyingApi underlying_api_ = {};
};

struct SurfacePresentModeCompatibilityEXT {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT;

  using native_type = VkSurfacePresentModeCompatibilityEXT;

  SurfacePresentModeCompatibilityEXT(uint32_t present_mode_count = {}, PresentMode *p_present_modes = {}, void *next = {})
    : present_mode_count_(present_mode_count), p_present_modes_(p_present_modes), next_(next) {}

  SurfacePresentModeCompatibilityEXT(const native_type &rhs)
    : SurfacePresentModeCompatibilityEXT(std::bit_cast<SurfacePresentModeCompatibilityEXT>(rhs)) {}

  SurfacePresentModeCompatibilityEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfacePresentModeCompatibilityEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SurfacePresentModeCompatibilityEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT;
  void *next_;
  uint32_t present_mode_count_;
  PresentMode *p_present_modes_;
};

struct SurfacePresentScalingCapabilitiesEXT {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT;

  using native_type = VkSurfacePresentScalingCapabilitiesEXT;

  SurfacePresentScalingCapabilitiesEXT() = default;

  SurfacePresentScalingCapabilitiesEXT(const native_type &rhs)
    : SurfacePresentScalingCapabilitiesEXT(std::bit_cast<SurfacePresentScalingCapabilitiesEXT>(rhs)) {}

  SurfacePresentScalingCapabilitiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfacePresentScalingCapabilitiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SurfacePresentScalingCapabilitiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT;
  void *next_ = {};
  PresentScalingMask supported_present_scaling_ = {};
  PresentGravityMask supported_present_gravity_x_ = {};
  PresentGravityMask supported_present_gravity_y_ = {};
  Extent2D min_scaled_image_extent_ = {};
  Extent2D max_scaled_image_extent_ = {};
};

struct SurfacePresentModeEXT {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_PRESENT_MODE_EXT;

  using native_type = VkSurfacePresentModeEXT;

  SurfacePresentModeEXT(PresentMode present_mode = PresentMode::E_IMMEDIATE_KHR, void *next = {})
    : present_mode_(present_mode), next_(next) {}

  SurfacePresentModeEXT(const native_type &rhs) : SurfacePresentModeEXT(std::bit_cast<SurfacePresentModeEXT>(rhs)) {}

  SurfacePresentModeEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfacePresentModeEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SurfacePresentModeEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_PRESENT_MODE_EXT;
  void *next_;
  PresentMode present_mode_;
};

struct PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;

  PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(bool32 dynamic_rendering_unused_attachments = {}, void *next = {})
    : dynamic_rendering_unused_attachments_(dynamic_rendering_unused_attachments), next_(next) {}

  PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
        std::bit_cast<PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT>(rhs)) {}

  PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT;
  void *next_;
  bool32 dynamic_rendering_unused_attachments_;
};

struct PhysicalDeviceFrameBoundaryFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT;

  using native_type = VkPhysicalDeviceFrameBoundaryFeaturesEXT;

  PhysicalDeviceFrameBoundaryFeaturesEXT(bool32 frame_boundary = {}, void *next = {}) : frame_boundary_(frame_boundary), next_(next) {}

  PhysicalDeviceFrameBoundaryFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceFrameBoundaryFeaturesEXT(std::bit_cast<PhysicalDeviceFrameBoundaryFeaturesEXT>(rhs)) {}

  PhysicalDeviceFrameBoundaryFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFrameBoundaryFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFrameBoundaryFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT;
  void *next_;
  bool32 frame_boundary_;
};

struct PhysicalDeviceShaderCoreBuiltinsFeaturesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM;

  using native_type = VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;

  PhysicalDeviceShaderCoreBuiltinsFeaturesARM(bool32 shader_core_builtins = {}, void *next = {})
    : shader_core_builtins_(shader_core_builtins), next_(next) {}

  PhysicalDeviceShaderCoreBuiltinsFeaturesARM(const native_type &rhs)
    : PhysicalDeviceShaderCoreBuiltinsFeaturesARM(std::bit_cast<PhysicalDeviceShaderCoreBuiltinsFeaturesARM>(rhs)) {}

  PhysicalDeviceShaderCoreBuiltinsFeaturesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderCoreBuiltinsFeaturesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderCoreBuiltinsFeaturesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM;
  void *next_;
  bool32 shader_core_builtins_;
};

struct PhysicalDeviceShaderCoreBuiltinsPropertiesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM;

  using native_type = VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;

  PhysicalDeviceShaderCoreBuiltinsPropertiesARM() = default;

  PhysicalDeviceShaderCoreBuiltinsPropertiesARM(const native_type &rhs)
    : PhysicalDeviceShaderCoreBuiltinsPropertiesARM(std::bit_cast<PhysicalDeviceShaderCoreBuiltinsPropertiesARM>(rhs)) {}

  PhysicalDeviceShaderCoreBuiltinsPropertiesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderCoreBuiltinsPropertiesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderCoreBuiltinsPropertiesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM;
  void *next_ = {};
  uint64_t shader_core_mask_ = {};
  uint32_t shader_core_count_ = {};
  uint32_t shader_warps_per_core_ = {};
};

struct DecompressMemoryRegionNV {

  using native_type = VkDecompressMemoryRegionNV;

  DecompressMemoryRegionNV(DeviceAddress src_address = {},
                           DeviceAddress dst_address = {},
                           DeviceSize compressed_size = {},
                           DeviceSize decompressed_size = {},
                           MemoryDecompressionMethodMask decompression_method = {})
    : src_address_(src_address), dst_address_(dst_address), compressed_size_(compressed_size), decompressed_size_(decompressed_size),
      decompression_method_(decompression_method) {}

  DecompressMemoryRegionNV(const native_type &rhs) : DecompressMemoryRegionNV(std::bit_cast<DecompressMemoryRegionNV>(rhs)) {}

  DecompressMemoryRegionNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<DecompressMemoryRegionNV>(rhs);
    return *this;
  }

  auto operator<=>(const DecompressMemoryRegionNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress src_address_;
  DeviceAddress dst_address_;
  DeviceSize compressed_size_;
  DeviceSize decompressed_size_;
  MemoryDecompressionMethodMask decompression_method_;
};

struct PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT;

  using native_type = VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;

  PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(bool32 pipeline_library_group_handles = {}, void *next = {})
    : pipeline_library_group_handles_(pipeline_library_group_handles), next_(next) {}

  PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(std::bit_cast<PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>(rhs)) {}

  PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT;
  void *next_;
  bool32 pipeline_library_group_handles_;
};

struct DeviceFaultVendorBinaryHeaderVersionOneEXT {

  using native_type = VkDeviceFaultVendorBinaryHeaderVersionOneEXT;

  DeviceFaultVendorBinaryHeaderVersionOneEXT(uint32_t header_size = {},
                                             DeviceFaultVendorBinaryHeaderVersion header_version = {},
                                             uint32_t vendor_id = {},
                                             uint32_t device_id = {},
                                             uint32_t driver_version = {},
                                             const std::array<uint8_t, VK_UUID_SIZE> &pipeline_cache_uuid = {},
                                             uint32_t application_name_offset = {},
                                             uint32_t application_version = {},
                                             uint32_t engine_name_offset = {},
                                             uint32_t engine_version = {},
                                             uint32_t api_version = {})
    : header_size_(header_size), header_version_(header_version), vendor_id_(vendor_id), device_id_(device_id),
      driver_version_(driver_version), pipeline_cache_uuid_(pipeline_cache_uuid), application_name_offset_(application_name_offset),
      application_version_(application_version), engine_name_offset_(engine_name_offset), engine_version_(engine_version),
      api_version_(api_version) {}

  DeviceFaultVendorBinaryHeaderVersionOneEXT(const native_type &rhs)
    : DeviceFaultVendorBinaryHeaderVersionOneEXT(std::bit_cast<DeviceFaultVendorBinaryHeaderVersionOneEXT>(rhs)) {}

  DeviceFaultVendorBinaryHeaderVersionOneEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceFaultVendorBinaryHeaderVersionOneEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceFaultVendorBinaryHeaderVersionOneEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t header_size_;
  DeviceFaultVendorBinaryHeaderVersion header_version_;
  uint32_t vendor_id_;
  uint32_t device_id_;
  uint32_t driver_version_;
  std::array<uint8_t, VK_UUID_SIZE> pipeline_cache_uuid_;
  uint32_t application_name_offset_;
  uint32_t application_version_;
  uint32_t engine_name_offset_;
  uint32_t engine_version_;
  uint32_t api_version_;
};

struct DeviceFaultVendorInfoEXT {

  using native_type = VkDeviceFaultVendorInfoEXT;

  DeviceFaultVendorInfoEXT(const std::array<char, VK_MAX_DESCRIPTION_SIZE> &description = {},
                           uint64_t vendor_fault_code = {},
                           uint64_t vendor_fault_data = {})
    : description_(description), vendor_fault_code_(vendor_fault_code), vendor_fault_data_(vendor_fault_data) {}

  DeviceFaultVendorInfoEXT(const native_type &rhs) : DeviceFaultVendorInfoEXT(std::bit_cast<DeviceFaultVendorInfoEXT>(rhs)) {}

  DeviceFaultVendorInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceFaultVendorInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceFaultVendorInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_;
  uint64_t vendor_fault_code_;
  uint64_t vendor_fault_data_;
};

struct DeviceFaultAddressInfoEXT {

  using native_type = VkDeviceFaultAddressInfoEXT;

  DeviceFaultAddressInfoEXT(DeviceFaultAddressType address_type = DeviceFaultAddressType::E_NONE_EXT,
                            DeviceAddress reported_address = {},
                            DeviceSize address_precision = {})
    : address_type_(address_type), reported_address_(reported_address), address_precision_(address_precision) {}

  DeviceFaultAddressInfoEXT(const native_type &rhs) : DeviceFaultAddressInfoEXT(std::bit_cast<DeviceFaultAddressInfoEXT>(rhs)) {}

  DeviceFaultAddressInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceFaultAddressInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceFaultAddressInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceFaultAddressType address_type_;
  DeviceAddress reported_address_;
  DeviceSize address_precision_;
};

struct OpticalFlowSessionCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_OPTICAL_FLOW_SESSION_CREATE_INFO_NV;

  using native_type = VkOpticalFlowSessionCreateInfoNV;

  OpticalFlowSessionCreateInfoNV(uint32_t width = {},
                                 uint32_t height = {},
                                 Format image_format = Format::E_UNDEFINED,
                                 Format flow_vector_format = Format::E_UNDEFINED,
                                 Format cost_format = Format::E_UNDEFINED,
                                 OpticalFlowGridSizeMask output_grid_size = {},
                                 OpticalFlowGridSizeMask hint_grid_size = {},
                                 OpticalFlowPerformanceLevel performance_level = OpticalFlowPerformanceLevel::E_UNKNOWN_NV,
                                 OpticalFlowSessionCreateMask flags = {},
                                 void *next = {})
    : width_(width), height_(height), image_format_(image_format), flow_vector_format_(flow_vector_format), cost_format_(cost_format),
      output_grid_size_(output_grid_size), hint_grid_size_(hint_grid_size), performance_level_(performance_level), flags_(flags),
      next_(next) {}

  OpticalFlowSessionCreateInfoNV(const native_type &rhs)
    : OpticalFlowSessionCreateInfoNV(std::bit_cast<OpticalFlowSessionCreateInfoNV>(rhs)) {}

  OpticalFlowSessionCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<OpticalFlowSessionCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const OpticalFlowSessionCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OPTICAL_FLOW_SESSION_CREATE_INFO_NV;
  void *next_;
  uint32_t width_;
  uint32_t height_;
  Format image_format_;
  Format flow_vector_format_;
  Format cost_format_;
  OpticalFlowGridSizeMask output_grid_size_;
  OpticalFlowGridSizeMask hint_grid_size_;
  OpticalFlowPerformanceLevel performance_level_;
  OpticalFlowSessionCreateMask flags_;
};

struct OpticalFlowImageFormatPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV;

  using native_type = VkOpticalFlowImageFormatPropertiesNV;

  OpticalFlowImageFormatPropertiesNV() = default;

  OpticalFlowImageFormatPropertiesNV(const native_type &rhs)
    : OpticalFlowImageFormatPropertiesNV(std::bit_cast<OpticalFlowImageFormatPropertiesNV>(rhs)) {}

  OpticalFlowImageFormatPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<OpticalFlowImageFormatPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const OpticalFlowImageFormatPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV;
  const void *next_ = {};
  Format format_ = {};
};

struct OpticalFlowImageFormatInfoNV {

  static constexpr StructureType structure_type = StructureType::E_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV;

  using native_type = VkOpticalFlowImageFormatInfoNV;

  OpticalFlowImageFormatInfoNV(OpticalFlowUsageMask usage = {}, const void *next = {}) : usage_(usage), next_(next) {}

  OpticalFlowImageFormatInfoNV(const native_type &rhs) : OpticalFlowImageFormatInfoNV(std::bit_cast<OpticalFlowImageFormatInfoNV>(rhs)) {}

  OpticalFlowImageFormatInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<OpticalFlowImageFormatInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const OpticalFlowImageFormatInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV;
  const void *next_;
  OpticalFlowUsageMask usage_;
};

struct PhysicalDeviceAddressBindingReportFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceAddressBindingReportFeaturesEXT;

  PhysicalDeviceAddressBindingReportFeaturesEXT(bool32 report_address_binding = {}, void *next = {})
    : report_address_binding_(report_address_binding), next_(next) {}

  PhysicalDeviceAddressBindingReportFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceAddressBindingReportFeaturesEXT(std::bit_cast<PhysicalDeviceAddressBindingReportFeaturesEXT>(rhs)) {}

  PhysicalDeviceAddressBindingReportFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceAddressBindingReportFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceAddressBindingReportFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT;
  void *next_;
  bool32 report_address_binding_;
};

struct PhysicalDeviceDepthClampZeroOneFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;

  PhysicalDeviceDepthClampZeroOneFeaturesEXT(bool32 depth_clamp_zero_one = {}, void *next = {})
    : depth_clamp_zero_one_(depth_clamp_zero_one), next_(next) {}

  PhysicalDeviceDepthClampZeroOneFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDepthClampZeroOneFeaturesEXT(std::bit_cast<PhysicalDeviceDepthClampZeroOneFeaturesEXT>(rhs)) {}

  PhysicalDeviceDepthClampZeroOneFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDepthClampZeroOneFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDepthClampZeroOneFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT;
  void *next_;
  bool32 depth_clamp_zero_one_;
};

struct PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

  PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(bool32 attachment_feedback_loop_layout = {}, void *next = {})
    : attachment_feedback_loop_layout_(attachment_feedback_loop_layout), next_(next) {}

  PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(std::bit_cast<PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT>(rhs)) {}

  PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT;
  void *next_;
  bool32 attachment_feedback_loop_layout_;
};

struct PhysicalDeviceAmigoProfilingFeaturesSEC {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC;

  using native_type = VkPhysicalDeviceAmigoProfilingFeaturesSEC;

  PhysicalDeviceAmigoProfilingFeaturesSEC(bool32 amigo_profiling = {}, void *next = {}) : amigo_profiling_(amigo_profiling), next_(next) {}

  PhysicalDeviceAmigoProfilingFeaturesSEC(const native_type &rhs)
    : PhysicalDeviceAmigoProfilingFeaturesSEC(std::bit_cast<PhysicalDeviceAmigoProfilingFeaturesSEC>(rhs)) {}

  PhysicalDeviceAmigoProfilingFeaturesSEC &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceAmigoProfilingFeaturesSEC>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceAmigoProfilingFeaturesSEC &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC;
  void *next_;
  bool32 amigo_profiling_;
};

struct DescriptorImageInfo {

  using native_type = VkDescriptorImageInfo;

  DescriptorImageInfo(VkSampler sampler = {}, VkImageView image_view = {}, ImageLayout image_layout = ImageLayout::E_UNDEFINED)
    : sampler_(sampler), image_view_(image_view), image_layout_(image_layout) {}

  DescriptorImageInfo(const native_type &rhs) : DescriptorImageInfo(std::bit_cast<DescriptorImageInfo>(rhs)) {}

  DescriptorImageInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorImageInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorImageInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkSampler sampler_;
  VkImageView image_view_;
  ImageLayout image_layout_;
};

struct DescriptorBufferInfo {

  using native_type = VkDescriptorBufferInfo;

  DescriptorBufferInfo(VkBuffer buffer = {}, DeviceSize offset = {}, DeviceSize range = {})
    : buffer_(buffer), offset_(offset), range_(range) {}

  DescriptorBufferInfo(const native_type &rhs) : DescriptorBufferInfo(std::bit_cast<DescriptorBufferInfo>(rhs)) {}

  DescriptorBufferInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorBufferInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorBufferInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkBuffer buffer_;
  DeviceSize offset_;
  DeviceSize range_;
};

struct WriteDescriptorSet {

  static constexpr StructureType structure_type = StructureType::E_WRITE_DESCRIPTOR_SET;

  using native_type = VkWriteDescriptorSet;

  WriteDescriptorSet(VkDescriptorSet dst_set = {},
                     uint32_t dst_binding = {},
                     uint32_t dst_array_element = {},
                     uint32_t descriptor_count = {},
                     DescriptorType descriptor_type = DescriptorType::E_SAMPLER,
                     const DescriptorImageInfo *p_image_info = {},
                     const DescriptorBufferInfo *p_buffer_info = {},
                     const VkBufferView *p_texel_buffer_view = {},
                     const void *next = {})
    : dst_set_(dst_set), dst_binding_(dst_binding), dst_array_element_(dst_array_element), descriptor_count_(descriptor_count),
      descriptor_type_(descriptor_type), p_image_info_(p_image_info), p_buffer_info_(p_buffer_info),
      p_texel_buffer_view_(p_texel_buffer_view), next_(next) {}

  WriteDescriptorSet(const native_type &rhs) : WriteDescriptorSet(std::bit_cast<WriteDescriptorSet>(rhs)) {}

  WriteDescriptorSet &operator=(const native_type &rhs) {
    *this = std::bit_cast<WriteDescriptorSet>(rhs);
    return *this;
  }

  auto operator<=>(const WriteDescriptorSet &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_WRITE_DESCRIPTOR_SET;
  const void *next_;
  VkDescriptorSet dst_set_;
  uint32_t dst_binding_;
  uint32_t dst_array_element_;
  uint32_t descriptor_count_;
  DescriptorType descriptor_type_;
  const DescriptorImageInfo *p_image_info_;
  const DescriptorBufferInfo *p_buffer_info_;
  const VkBufferView *p_texel_buffer_view_;
};

struct PushDescriptorSetInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PUSH_DESCRIPTOR_SET_INFO_KHR;

  using native_type = VkPushDescriptorSetInfoKHR;

  PushDescriptorSetInfoKHR(ShaderStageMask stage_flags = {},
                           VkPipelineLayout layout = {},
                           uint32_t set = {},
                           uint32_t descriptor_write_count = {},
                           const WriteDescriptorSet *p_descriptor_writes = {},
                           const void *next = {})
    : stage_flags_(stage_flags), layout_(layout), set_(set), descriptor_write_count_(descriptor_write_count),
      p_descriptor_writes_(p_descriptor_writes), next_(next) {}

  PushDescriptorSetInfoKHR(const native_type &rhs) : PushDescriptorSetInfoKHR(std::bit_cast<PushDescriptorSetInfoKHR>(rhs)) {}

  PushDescriptorSetInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PushDescriptorSetInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PushDescriptorSetInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PUSH_DESCRIPTOR_SET_INFO_KHR;
  const void *next_;
  ShaderStageMask stage_flags_;
  VkPipelineLayout layout_;
  uint32_t set_;
  uint32_t descriptor_write_count_;
  const WriteDescriptorSet *p_descriptor_writes_;
};

struct Extent3D {

  using native_type = VkExtent3D;

  Extent3D(uint32_t width = {}, uint32_t height = {}, uint32_t depth = {}) : width_(width), height_(height), depth_(depth) {}

  Extent3D(const native_type &rhs) : Extent3D(std::bit_cast<Extent3D>(rhs)) {}

  Extent3D &operator=(const native_type &rhs) {
    *this = std::bit_cast<Extent3D>(rhs);
    return *this;
  }

  auto operator<=>(const Extent3D &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t width_;
  uint32_t height_;
  uint32_t depth_;
};

struct TilePropertiesQCOM {

  static constexpr StructureType structure_type = StructureType::E_TILE_PROPERTIES_QCOM;

  using native_type = VkTilePropertiesQCOM;

  TilePropertiesQCOM(Extent3D tile_size = {}, Extent2D apron_size = {}, Offset2D origin = {}, void *next = {})
    : tile_size_(tile_size), apron_size_(apron_size), origin_(origin), next_(next) {}

  TilePropertiesQCOM(const native_type &rhs) : TilePropertiesQCOM(std::bit_cast<TilePropertiesQCOM>(rhs)) {}

  TilePropertiesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<TilePropertiesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const TilePropertiesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_TILE_PROPERTIES_QCOM;
  void *next_;
  Extent3D tile_size_;
  Extent2D apron_size_;
  Offset2D origin_;
};

struct PhysicalDeviceImageProcessingFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceImageProcessingFeaturesQCOM;

  PhysicalDeviceImageProcessingFeaturesQCOM(bool32 texture_sample_weighted = {},
                                            bool32 texture_box_filter = {},
                                            bool32 texture_block_match = {},
                                            void *next = {})
    : texture_sample_weighted_(texture_sample_weighted), texture_box_filter_(texture_box_filter), texture_block_match_(texture_block_match),
      next_(next) {}

  PhysicalDeviceImageProcessingFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceImageProcessingFeaturesQCOM(std::bit_cast<PhysicalDeviceImageProcessingFeaturesQCOM>(rhs)) {}

  PhysicalDeviceImageProcessingFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageProcessingFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageProcessingFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM;
  void *next_;
  bool32 texture_sample_weighted_;
  bool32 texture_box_filter_;
  bool32 texture_block_match_;
};

struct ImageViewSampleWeightCreateInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM;

  using native_type = VkImageViewSampleWeightCreateInfoQCOM;

  ImageViewSampleWeightCreateInfoQCOM(Offset2D filter_center = {},
                                      Extent2D filter_size = {},
                                      uint32_t num_phases = {},
                                      const void *next = {})
    : filter_center_(filter_center), filter_size_(filter_size), num_phases_(num_phases), next_(next) {}

  ImageViewSampleWeightCreateInfoQCOM(const native_type &rhs)
    : ImageViewSampleWeightCreateInfoQCOM(std::bit_cast<ImageViewSampleWeightCreateInfoQCOM>(rhs)) {}

  ImageViewSampleWeightCreateInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewSampleWeightCreateInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewSampleWeightCreateInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM;
  const void *next_;
  Offset2D filter_center_;
  Extent2D filter_size_;
  uint32_t num_phases_;
};

struct PhysicalDevicePipelineRobustnessPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT;

  using native_type = VkPhysicalDevicePipelineRobustnessPropertiesEXT;

  PhysicalDevicePipelineRobustnessPropertiesEXT() = default;

  PhysicalDevicePipelineRobustnessPropertiesEXT(const native_type &rhs)
    : PhysicalDevicePipelineRobustnessPropertiesEXT(std::bit_cast<PhysicalDevicePipelineRobustnessPropertiesEXT>(rhs)) {}

  PhysicalDevicePipelineRobustnessPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelineRobustnessPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelineRobustnessPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT;
  void *next_ = {};
  PipelineRobustnessBufferBehavior default_robustness_storage_buffers_ = {};
  PipelineRobustnessBufferBehavior default_robustness_uniform_buffers_ = {};
  PipelineRobustnessBufferBehavior default_robustness_vertex_inputs_ = {};
  PipelineRobustnessImageBehavior default_robustness_images_ = {};
};

struct PipelineRobustnessCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT;

  using native_type = VkPipelineRobustnessCreateInfoEXT;

  PipelineRobustnessCreateInfoEXT(PipelineRobustnessBufferBehavior storage_buffers = PipelineRobustnessBufferBehavior::E_DEVICE_DEFAULT_EXT,
                                  PipelineRobustnessBufferBehavior uniform_buffers = PipelineRobustnessBufferBehavior::E_DEVICE_DEFAULT_EXT,
                                  PipelineRobustnessBufferBehavior vertex_inputs = PipelineRobustnessBufferBehavior::E_DEVICE_DEFAULT_EXT,
                                  PipelineRobustnessImageBehavior images = PipelineRobustnessImageBehavior::E_DEVICE_DEFAULT_EXT,
                                  const void *next = {})
    : storage_buffers_(storage_buffers), uniform_buffers_(uniform_buffers), vertex_inputs_(vertex_inputs), images_(images), next_(next) {}

  PipelineRobustnessCreateInfoEXT(const native_type &rhs)
    : PipelineRobustnessCreateInfoEXT(std::bit_cast<PipelineRobustnessCreateInfoEXT>(rhs)) {}

  PipelineRobustnessCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRobustnessCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRobustnessCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT;
  const void *next_;
  PipelineRobustnessBufferBehavior storage_buffers_;
  PipelineRobustnessBufferBehavior uniform_buffers_;
  PipelineRobustnessBufferBehavior vertex_inputs_;
  PipelineRobustnessImageBehavior images_;
};

struct PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;

  PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(bool32 multiview_per_view_render_areas = {}, void *next = {})
    : multiview_per_view_render_areas_(multiview_per_view_render_areas), next_(next) {}

  PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(std::bit_cast<PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM>(rhs)) {}

  PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM;
  void *next_;
  bool32 multiview_per_view_render_areas_;
};

struct PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD;

  using native_type = VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;

  PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(bool32 shader_early_and_late_fragment_tests = {}, void *next = {})
    : shader_early_and_late_fragment_tests_(shader_early_and_late_fragment_tests), next_(next) {}

  PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(const native_type &rhs)
    : PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
        std::bit_cast<PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>(rhs)) {}

  PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD;
  void *next_;
  bool32 shader_early_and_late_fragment_tests_;
};

struct PhysicalDevicePipelinePropertiesFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT;

  using native_type = VkPhysicalDevicePipelinePropertiesFeaturesEXT;

  PhysicalDevicePipelinePropertiesFeaturesEXT(bool32 pipeline_properties_identifier = {}, void *next = {})
    : pipeline_properties_identifier_(pipeline_properties_identifier), next_(next) {}

  PhysicalDevicePipelinePropertiesFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePipelinePropertiesFeaturesEXT(std::bit_cast<PhysicalDevicePipelinePropertiesFeaturesEXT>(rhs)) {}

  PhysicalDevicePipelinePropertiesFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelinePropertiesFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelinePropertiesFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT;
  void *next_;
  bool32 pipeline_properties_identifier_;
};

struct PipelinePropertiesIdentifierEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_PROPERTIES_IDENTIFIER_EXT;

  using native_type = VkPipelinePropertiesIdentifierEXT;

  PipelinePropertiesIdentifierEXT() = default;

  PipelinePropertiesIdentifierEXT(const native_type &rhs)
    : PipelinePropertiesIdentifierEXT(std::bit_cast<PipelinePropertiesIdentifierEXT>(rhs)) {}

  PipelinePropertiesIdentifierEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelinePropertiesIdentifierEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelinePropertiesIdentifierEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_PROPERTIES_IDENTIFIER_EXT;
  void *next_ = {};
  std::array<uint8_t, VK_UUID_SIZE> pipeline_identifier_ = {};
};

struct PhysicalDeviceShaderTileImagePropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceShaderTileImagePropertiesEXT;

  PhysicalDeviceShaderTileImagePropertiesEXT() = default;

  PhysicalDeviceShaderTileImagePropertiesEXT(const native_type &rhs)
    : PhysicalDeviceShaderTileImagePropertiesEXT(std::bit_cast<PhysicalDeviceShaderTileImagePropertiesEXT>(rhs)) {}

  PhysicalDeviceShaderTileImagePropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderTileImagePropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderTileImagePropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT;
  void *next_ = {};
  bool32 shader_tile_image_coherent_read_accelerated_ = {};
  bool32 shader_tile_image_read_sample_from_pixel_rate_invocation_ = {};
  bool32 shader_tile_image_read_from_helper_invocation_ = {};
};

struct MicromapUsageEXT {

  using native_type = VkMicromapUsageEXT;

  MicromapUsageEXT(uint32_t count = {}, uint32_t subdivision_level = {}, uint32_t format = {})
    : count_(count), subdivision_level_(subdivision_level), format_(format) {}

  MicromapUsageEXT(const native_type &rhs) : MicromapUsageEXT(std::bit_cast<MicromapUsageEXT>(rhs)) {}

  MicromapUsageEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MicromapUsageEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MicromapUsageEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t count_;
  uint32_t subdivision_level_;
  uint32_t format_;
};

struct AccelerationStructureTrianglesOpacityMicromapEXT {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT;

  using native_type = VkAccelerationStructureTrianglesOpacityMicromapEXT;

  AccelerationStructureTrianglesOpacityMicromapEXT(IndexType index_type = IndexType::E_UINT16,
                                                   VkDeviceOrHostAddressConstKHR index_buffer = {},
                                                   DeviceSize index_stride = {},
                                                   uint32_t base_triangle = {},
                                                   uint32_t usage_counts_count = {},
                                                   const MicromapUsageEXT *p_usage_counts = {},
                                                   const MicromapUsageEXT *const *pp_usage_counts = {},
                                                   VkMicromapEXT micromap = {},
                                                   void *next = {})
    : index_type_(index_type), index_buffer_(index_buffer), index_stride_(index_stride), base_triangle_(base_triangle),
      usage_counts_count_(usage_counts_count), p_usage_counts_(p_usage_counts), pp_usage_counts_(pp_usage_counts), micromap_(micromap),
      next_(next) {}

  AccelerationStructureTrianglesOpacityMicromapEXT(const native_type &rhs)
    : AccelerationStructureTrianglesOpacityMicromapEXT(std::bit_cast<AccelerationStructureTrianglesOpacityMicromapEXT>(rhs)) {}

  AccelerationStructureTrianglesOpacityMicromapEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureTrianglesOpacityMicromapEXT>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureTrianglesOpacityMicromapEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT;
  void *next_;
  IndexType index_type_;
  VkDeviceOrHostAddressConstKHR index_buffer_;
  DeviceSize index_stride_;
  uint32_t base_triangle_;
  uint32_t usage_counts_count_;
  const MicromapUsageEXT *p_usage_counts_;
  const MicromapUsageEXT *const *pp_usage_counts_;
  VkMicromapEXT micromap_;
};

struct PhysicalDeviceOpacityMicromapPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceOpacityMicromapPropertiesEXT;

  PhysicalDeviceOpacityMicromapPropertiesEXT() = default;

  PhysicalDeviceOpacityMicromapPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceOpacityMicromapPropertiesEXT(std::bit_cast<PhysicalDeviceOpacityMicromapPropertiesEXT>(rhs)) {}

  PhysicalDeviceOpacityMicromapPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceOpacityMicromapPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceOpacityMicromapPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_opacity2state_subdivision_level_ = {};
  uint32_t max_opacity4state_subdivision_level_ = {};
};

struct MicromapTriangleEXT {

  using native_type = VkMicromapTriangleEXT;

  MicromapTriangleEXT(uint32_t data_offset = {}, uint16_t subdivision_level = {}, uint16_t format = {})
    : data_offset_(data_offset), subdivision_level_(subdivision_level), format_(format) {}

  MicromapTriangleEXT(const native_type &rhs) : MicromapTriangleEXT(std::bit_cast<MicromapTriangleEXT>(rhs)) {}

  MicromapTriangleEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MicromapTriangleEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MicromapTriangleEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t data_offset_;
  uint16_t subdivision_level_;
  uint16_t format_;
};

struct MicromapBuildSizesInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MICROMAP_BUILD_SIZES_INFO_EXT;

  using native_type = VkMicromapBuildSizesInfoEXT;

  MicromapBuildSizesInfoEXT(DeviceSize micromap_size = {},
                            DeviceSize build_scratch_size = {},
                            bool32 discardable = {},
                            const void *next = {})
    : micromap_size_(micromap_size), build_scratch_size_(build_scratch_size), discardable_(discardable), next_(next) {}

  MicromapBuildSizesInfoEXT(const native_type &rhs) : MicromapBuildSizesInfoEXT(std::bit_cast<MicromapBuildSizesInfoEXT>(rhs)) {}

  MicromapBuildSizesInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MicromapBuildSizesInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MicromapBuildSizesInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MICROMAP_BUILD_SIZES_INFO_EXT;
  const void *next_;
  DeviceSize micromap_size_;
  DeviceSize build_scratch_size_;
  bool32 discardable_;
};

struct MicromapVersionInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MICROMAP_VERSION_INFO_EXT;

  using native_type = VkMicromapVersionInfoEXT;

  MicromapVersionInfoEXT(const uint8_t *p_version_data = {}, const void *next = {}) : p_version_data_(p_version_data), next_(next) {}

  MicromapVersionInfoEXT(const native_type &rhs) : MicromapVersionInfoEXT(std::bit_cast<MicromapVersionInfoEXT>(rhs)) {}

  MicromapVersionInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MicromapVersionInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MicromapVersionInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MICROMAP_VERSION_INFO_EXT;
  const void *next_;
  const uint8_t *p_version_data_;
};

struct MicromapBuildInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MICROMAP_BUILD_INFO_EXT;

  using native_type = VkMicromapBuildInfoEXT;

  MicromapBuildInfoEXT(MicromapType type = MicromapType::E_OPACITY_MICROMAP_EXT,
                       BuildMicromapMask flags = {},
                       BuildMicromapMode mode = BuildMicromapMode::E_BUILD_EXT,
                       VkMicromapEXT dst_micromap = {},
                       uint32_t usage_counts_count = {},
                       const MicromapUsageEXT *p_usage_counts = {},
                       const MicromapUsageEXT *const *pp_usage_counts = {},
                       VkDeviceOrHostAddressConstKHR data = {},
                       VkDeviceOrHostAddressKHR scratch_data = {},
                       VkDeviceOrHostAddressConstKHR triangle_array = {},
                       DeviceSize triangle_array_stride = {},
                       const void *next = {})
    : type_(type), flags_(flags), mode_(mode), dst_micromap_(dst_micromap), usage_counts_count_(usage_counts_count),
      p_usage_counts_(p_usage_counts), pp_usage_counts_(pp_usage_counts), data_(data), scratch_data_(scratch_data),
      triangle_array_(triangle_array), triangle_array_stride_(triangle_array_stride), next_(next) {}

  MicromapBuildInfoEXT(const native_type &rhs) : MicromapBuildInfoEXT(std::bit_cast<MicromapBuildInfoEXT>(rhs)) {}

  MicromapBuildInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MicromapBuildInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MicromapBuildInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MICROMAP_BUILD_INFO_EXT;
  const void *next_;
  MicromapType type_;
  BuildMicromapMask flags_;
  BuildMicromapMode mode_;
  VkMicromapEXT dst_micromap_;
  uint32_t usage_counts_count_;
  const MicromapUsageEXT *p_usage_counts_;
  const MicromapUsageEXT *const *pp_usage_counts_;
  VkDeviceOrHostAddressConstKHR data_;
  VkDeviceOrHostAddressKHR scratch_data_;
  VkDeviceOrHostAddressConstKHR triangle_array_;
  DeviceSize triangle_array_stride_;
};

struct PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT;

  using native_type = VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;

  PhysicalDeviceSubpassMergeFeedbackFeaturesEXT(bool32 subpass_merge_feedback = {}, void *next = {})
    : subpass_merge_feedback_(subpass_merge_feedback), next_(next) {}

  PhysicalDeviceSubpassMergeFeedbackFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceSubpassMergeFeedbackFeaturesEXT(std::bit_cast<PhysicalDeviceSubpassMergeFeedbackFeaturesEXT>(rhs)) {}

  PhysicalDeviceSubpassMergeFeedbackFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSubpassMergeFeedbackFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSubpassMergeFeedbackFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT;
  void *next_;
  bool32 subpass_merge_feedback_;
};

struct RenderPassCreationFeedbackInfoEXT {

  using native_type = VkRenderPassCreationFeedbackInfoEXT;

  RenderPassCreationFeedbackInfoEXT() = default;

  RenderPassCreationFeedbackInfoEXT(const native_type &rhs)
    : RenderPassCreationFeedbackInfoEXT(std::bit_cast<RenderPassCreationFeedbackInfoEXT>(rhs)) {}

  RenderPassCreationFeedbackInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassCreationFeedbackInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassCreationFeedbackInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t post_merge_subpass_count_ = {};
};

struct RenderPassCreationFeedbackCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT;

  using native_type = VkRenderPassCreationFeedbackCreateInfoEXT;

  RenderPassCreationFeedbackCreateInfoEXT(RenderPassCreationFeedbackInfoEXT *p_render_pass_feedback = {}, const void *next = {})
    : p_render_pass_feedback_(p_render_pass_feedback), next_(next) {}

  RenderPassCreationFeedbackCreateInfoEXT(const native_type &rhs)
    : RenderPassCreationFeedbackCreateInfoEXT(std::bit_cast<RenderPassCreationFeedbackCreateInfoEXT>(rhs)) {}

  RenderPassCreationFeedbackCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassCreationFeedbackCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassCreationFeedbackCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT;
  const void *next_;
  RenderPassCreationFeedbackInfoEXT *p_render_pass_feedback_;
};

struct SubresourceLayout {

  using native_type = VkSubresourceLayout;

  SubresourceLayout(
    DeviceSize offset = {}, DeviceSize size = {}, DeviceSize row_pitch = {}, DeviceSize array_pitch = {}, DeviceSize depth_pitch = {})
    : offset_(offset), size_(size), row_pitch_(row_pitch), array_pitch_(array_pitch), depth_pitch_(depth_pitch) {}

  SubresourceLayout(const native_type &rhs) : SubresourceLayout(std::bit_cast<SubresourceLayout>(rhs)) {}

  SubresourceLayout &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubresourceLayout>(rhs);
    return *this;
  }

  auto operator<=>(const SubresourceLayout &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceSize offset_;
  DeviceSize size_;
  DeviceSize row_pitch_;
  DeviceSize array_pitch_;
  DeviceSize depth_pitch_;
};

struct SubresourceLayout2KHR {

  static constexpr StructureType structure_type = StructureType::E_SUBRESOURCE_LAYOUT_2_KHR;

  using native_type = VkSubresourceLayout2KHR;

  SubresourceLayout2KHR() = default;

  SubresourceLayout2KHR(const native_type &rhs) : SubresourceLayout2KHR(std::bit_cast<SubresourceLayout2KHR>(rhs)) {}

  SubresourceLayout2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubresourceLayout2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const SubresourceLayout2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBRESOURCE_LAYOUT_2_KHR;
  void *next_ = {};
  SubresourceLayout subresource_layout_ = {};
};

struct ImageSubresource {

  using native_type = VkImageSubresource;

  ImageSubresource(ImageAspectMask aspect_mask = {}, uint32_t mip_level = {}, uint32_t array_layer = {})
    : aspect_mask_(aspect_mask), mip_level_(mip_level), array_layer_(array_layer) {}

  ImageSubresource(const native_type &rhs) : ImageSubresource(std::bit_cast<ImageSubresource>(rhs)) {}

  ImageSubresource &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageSubresource>(rhs);
    return *this;
  }

  auto operator<=>(const ImageSubresource &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageAspectMask aspect_mask_;
  uint32_t mip_level_;
  uint32_t array_layer_;
};

struct ImageSubresource2KHR {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_SUBRESOURCE_2_KHR;

  using native_type = VkImageSubresource2KHR;

  ImageSubresource2KHR(ImageSubresource image_subresource = {}, void *next = {}) : image_subresource_(image_subresource), next_(next) {}

  ImageSubresource2KHR(const native_type &rhs) : ImageSubresource2KHR(std::bit_cast<ImageSubresource2KHR>(rhs)) {}

  ImageSubresource2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageSubresource2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const ImageSubresource2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_SUBRESOURCE_2_KHR;
  void *next_;
  ImageSubresource image_subresource_;
};

struct PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT;

  using native_type = VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;

  PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(bool32 image_compression_control_swapchain = {}, void *next = {})
    : image_compression_control_swapchain_(image_compression_control_swapchain), next_(next) {}

  PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
        std::bit_cast<PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>(rhs)) {}

  PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT;
  void *next_;
  bool32 image_compression_control_swapchain_;
};

struct ImageCompressionPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_COMPRESSION_PROPERTIES_EXT;

  using native_type = VkImageCompressionPropertiesEXT;

  ImageCompressionPropertiesEXT() = default;

  ImageCompressionPropertiesEXT(const native_type &rhs)
    : ImageCompressionPropertiesEXT(std::bit_cast<ImageCompressionPropertiesEXT>(rhs)) {}

  ImageCompressionPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageCompressionPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageCompressionPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_COMPRESSION_PROPERTIES_EXT;
  void *next_ = {};
  ImageCompressionMask image_compression_flags_ = {};
  ImageCompressionFixedRateMask image_compression_fixed_rate_flags_ = {};
};

struct PhysicalDeviceOpticalFlowPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceOpticalFlowPropertiesNV;

  PhysicalDeviceOpticalFlowPropertiesNV() = default;

  PhysicalDeviceOpticalFlowPropertiesNV(const native_type &rhs)
    : PhysicalDeviceOpticalFlowPropertiesNV(std::bit_cast<PhysicalDeviceOpticalFlowPropertiesNV>(rhs)) {}

  PhysicalDeviceOpticalFlowPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceOpticalFlowPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceOpticalFlowPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV;
  void *next_ = {};
  OpticalFlowGridSizeMask supported_output_grid_sizes_ = {};
  OpticalFlowGridSizeMask supported_hint_grid_sizes_ = {};
  bool32 hint_supported_ = {};
  bool32 cost_supported_ = {};
  bool32 bidirectional_flow_supported_ = {};
  bool32 global_flow_supported_ = {};
  uint32_t min_width_ = {};
  uint32_t min_height_ = {};
  uint32_t max_width_ = {};
  uint32_t max_height_ = {};
  uint32_t max_num_regions_of_interest_ = {};
};

struct ImageCompressionControlEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_COMPRESSION_CONTROL_EXT;

  using native_type = VkImageCompressionControlEXT;

  ImageCompressionControlEXT(ImageCompressionMask flags = {},
                             uint32_t compression_control_plane_count = {},
                             ImageCompressionFixedRateMask *p_fixed_rate_flags = {},
                             const void *next = {})
    : flags_(flags), compression_control_plane_count_(compression_control_plane_count), p_fixed_rate_flags_(p_fixed_rate_flags),
      next_(next) {}

  ImageCompressionControlEXT(const native_type &rhs) : ImageCompressionControlEXT(std::bit_cast<ImageCompressionControlEXT>(rhs)) {}

  ImageCompressionControlEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageCompressionControlEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageCompressionControlEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_COMPRESSION_CONTROL_EXT;
  const void *next_;
  ImageCompressionMask flags_;
  uint32_t compression_control_plane_count_;
  ImageCompressionFixedRateMask *p_fixed_rate_flags_;
};

struct ImageAlignmentControlCreateInfoMESA {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA;

  using native_type = VkImageAlignmentControlCreateInfoMESA;

  ImageAlignmentControlCreateInfoMESA(uint32_t maximum_requested_alignment = {}, const void *next = {})
    : maximum_requested_alignment_(maximum_requested_alignment), next_(next) {}

  ImageAlignmentControlCreateInfoMESA(const native_type &rhs)
    : ImageAlignmentControlCreateInfoMESA(std::bit_cast<ImageAlignmentControlCreateInfoMESA>(rhs)) {}

  ImageAlignmentControlCreateInfoMESA &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageAlignmentControlCreateInfoMESA>(rhs);
    return *this;
  }

  auto operator<=>(const ImageAlignmentControlCreateInfoMESA &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA;
  const void *next_;
  uint32_t maximum_requested_alignment_;
};

struct PipelineShaderStageModuleIdentifierCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT;

  using native_type = VkPipelineShaderStageModuleIdentifierCreateInfoEXT;

  PipelineShaderStageModuleIdentifierCreateInfoEXT(uint32_t identifier_size = {}, const uint8_t *p_identifier = {}, const void *next = {})
    : identifier_size_(identifier_size), p_identifier_(p_identifier), next_(next) {}

  PipelineShaderStageModuleIdentifierCreateInfoEXT(const native_type &rhs)
    : PipelineShaderStageModuleIdentifierCreateInfoEXT(std::bit_cast<PipelineShaderStageModuleIdentifierCreateInfoEXT>(rhs)) {}

  PipelineShaderStageModuleIdentifierCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineShaderStageModuleIdentifierCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineShaderStageModuleIdentifierCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT;
  const void *next_;
  uint32_t identifier_size_;
  const uint8_t *p_identifier_;
};

struct PhysicalDeviceShaderModuleIdentifierPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;

  PhysicalDeviceShaderModuleIdentifierPropertiesEXT() = default;

  PhysicalDeviceShaderModuleIdentifierPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceShaderModuleIdentifierPropertiesEXT(std::bit_cast<PhysicalDeviceShaderModuleIdentifierPropertiesEXT>(rhs)) {}

  PhysicalDeviceShaderModuleIdentifierPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderModuleIdentifierPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderModuleIdentifierPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT;
  void *next_ = {};
  std::array<uint8_t, VK_UUID_SIZE> shader_module_identifier_algorithm_uuid_ = {};
};

struct PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;

  PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(bool32 graphics_pipeline_library_fast_linking = {},
                                                     bool32 graphics_pipeline_library_independent_interpolation_decoration = {},
                                                     void *next = {})
    : graphics_pipeline_library_fast_linking_(graphics_pipeline_library_fast_linking),
      graphics_pipeline_library_independent_interpolation_decoration_(graphics_pipeline_library_independent_interpolation_decoration),
      next_(next) {}

  PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(std::bit_cast<PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>(rhs)) {}

  PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT;
  void *next_;
  bool32 graphics_pipeline_library_fast_linking_;
  bool32 graphics_pipeline_library_independent_interpolation_decoration_;
};

struct PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT;

  using native_type = VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;

  PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(bool32 graphics_pipeline_library = {}, void *next = {})
    : graphics_pipeline_library_(graphics_pipeline_library), next_(next) {}

  PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(std::bit_cast<PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>(rhs)) {}

  PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT;
  void *next_;
  bool32 graphics_pipeline_library_;
};

struct ImageViewMinLodCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT;

  using native_type = VkImageViewMinLodCreateInfoEXT;

  ImageViewMinLodCreateInfoEXT(float min_lod = {}, const void *next = {}) : min_lod_(min_lod), next_(next) {}

  ImageViewMinLodCreateInfoEXT(const native_type &rhs) : ImageViewMinLodCreateInfoEXT(std::bit_cast<ImageViewMinLodCreateInfoEXT>(rhs)) {}

  ImageViewMinLodCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewMinLodCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewMinLodCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT;
  const void *next_;
  float min_lod_;
};

struct AttachmentSampleCountInfoAMD {

  static constexpr StructureType structure_type = StructureType::E_ATTACHMENT_SAMPLE_COUNT_INFO_AMD;

  using native_type = VkAttachmentSampleCountInfoAMD;

  AttachmentSampleCountInfoAMD(uint32_t color_attachment_count = {},
                               const SampleCountMaskBit *p_color_attachment_samples = {},
                               SampleCountMaskBit depth_stencil_attachment_samples = {},
                               const void *next = {})
    : color_attachment_count_(color_attachment_count), p_color_attachment_samples_(p_color_attachment_samples),
      depth_stencil_attachment_samples_(depth_stencil_attachment_samples), next_(next) {}

  AttachmentSampleCountInfoAMD(const native_type &rhs) : AttachmentSampleCountInfoAMD(std::bit_cast<AttachmentSampleCountInfoAMD>(rhs)) {}

  AttachmentSampleCountInfoAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentSampleCountInfoAMD>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentSampleCountInfoAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
  const void *next_;
  uint32_t color_attachment_count_;
  const SampleCountMaskBit *p_color_attachment_samples_;
  SampleCountMaskBit depth_stencil_attachment_samples_;
};

struct RenderingFragmentDensityMapAttachmentInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;

  using native_type = VkRenderingFragmentDensityMapAttachmentInfoEXT;

  RenderingFragmentDensityMapAttachmentInfoEXT(VkImageView image_view = {},
                                               ImageLayout image_layout = ImageLayout::E_UNDEFINED,
                                               const void *next = {})
    : image_view_(image_view), image_layout_(image_layout), next_(next) {}

  RenderingFragmentDensityMapAttachmentInfoEXT(const native_type &rhs)
    : RenderingFragmentDensityMapAttachmentInfoEXT(std::bit_cast<RenderingFragmentDensityMapAttachmentInfoEXT>(rhs)) {}

  RenderingFragmentDensityMapAttachmentInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingFragmentDensityMapAttachmentInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingFragmentDensityMapAttachmentInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;
  const void *next_;
  VkImageView image_view_;
  ImageLayout image_layout_;
};

struct PipelineRenderingCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RENDERING_CREATE_INFO;

  using native_type = VkPipelineRenderingCreateInfo;

  PipelineRenderingCreateInfo(uint32_t view_mask = {},
                              uint32_t color_attachment_count = {},
                              const Format *p_color_attachment_formats = {},
                              Format depth_attachment_format = Format::E_UNDEFINED,
                              Format stencil_attachment_format = Format::E_UNDEFINED,
                              const void *next = {})
    : view_mask_(view_mask), color_attachment_count_(color_attachment_count), p_color_attachment_formats_(p_color_attachment_formats),
      depth_attachment_format_(depth_attachment_format), stencil_attachment_format_(stencil_attachment_format), next_(next) {}

  PipelineRenderingCreateInfo(const native_type &rhs) : PipelineRenderingCreateInfo(std::bit_cast<PipelineRenderingCreateInfo>(rhs)) {}

  PipelineRenderingCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRenderingCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRenderingCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RENDERING_CREATE_INFO;
  const void *next_;
  uint32_t view_mask_;
  uint32_t color_attachment_count_;
  const Format *p_color_attachment_formats_;
  Format depth_attachment_format_;
  Format stencil_attachment_format_;
};

struct DrmFormatModifierProperties2EXT {

  using native_type = VkDrmFormatModifierProperties2EXT;

  DrmFormatModifierProperties2EXT() = default;

  DrmFormatModifierProperties2EXT(const native_type &rhs)
    : DrmFormatModifierProperties2EXT(std::bit_cast<DrmFormatModifierProperties2EXT>(rhs)) {}

  DrmFormatModifierProperties2EXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrmFormatModifierProperties2EXT>(rhs);
    return *this;
  }

  auto operator<=>(const DrmFormatModifierProperties2EXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint64_t drm_format_modifier_ = {};
  uint32_t drm_format_modifier_plane_count_ = {};
  FormatFeatureMask2 drm_format_modifier_tiling_features_ = {};
};

struct DrmFormatModifierPropertiesList2EXT {

  static constexpr StructureType structure_type = StructureType::E_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;

  using native_type = VkDrmFormatModifierPropertiesList2EXT;

  DrmFormatModifierPropertiesList2EXT() = default;

  DrmFormatModifierPropertiesList2EXT(const native_type &rhs)
    : DrmFormatModifierPropertiesList2EXT(std::bit_cast<DrmFormatModifierPropertiesList2EXT>(rhs)) {}

  DrmFormatModifierPropertiesList2EXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrmFormatModifierPropertiesList2EXT>(rhs);
    return *this;
  }

  auto operator<=>(const DrmFormatModifierPropertiesList2EXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;
  void *next_ = {};
  uint32_t drm_format_modifier_count_ = {};
  DrmFormatModifierProperties2EXT *p_drm_format_modifier_properties_ = {};
};

struct PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT;

  using native_type = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

  PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(bool32 rasterization_order_color_attachment_access = {},
                                                              bool32 rasterization_order_depth_attachment_access = {},
                                                              bool32 rasterization_order_stencil_attachment_access = {},
                                                              void *next = {})
    : rasterization_order_color_attachment_access_(rasterization_order_color_attachment_access),
      rasterization_order_depth_attachment_access_(rasterization_order_depth_attachment_access),
      rasterization_order_stencil_attachment_access_(rasterization_order_stencil_attachment_access), next_(next) {}

  PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
        std::bit_cast<PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>(rhs)) {}

  PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT;
  void *next_;
  bool32 rasterization_order_color_attachment_access_;
  bool32 rasterization_order_depth_attachment_access_;
  bool32 rasterization_order_stencil_attachment_access_;
};

struct FormatProperties3 {

  static constexpr StructureType structure_type = StructureType::E_FORMAT_PROPERTIES_3;

  using native_type = VkFormatProperties3;

  FormatProperties3() = default;

  FormatProperties3(const native_type &rhs) : FormatProperties3(std::bit_cast<FormatProperties3>(rhs)) {}

  FormatProperties3 &operator=(const native_type &rhs) {
    *this = std::bit_cast<FormatProperties3>(rhs);
    return *this;
  }

  auto operator<=>(const FormatProperties3 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FORMAT_PROPERTIES_3;
  void *next_ = {};
  FormatFeatureMask2 linear_tiling_features_ = {};
  FormatFeatureMask2 optimal_tiling_features_ = {};
  FormatFeatureMask2 buffer_features_ = {};
};

struct PhysicalDeviceRGBA10X6FormatsFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT;

  using native_type = VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;

  PhysicalDeviceRGBA10X6FormatsFeaturesEXT(bool32 format_rgba10x6without_ycb_cr_sampler = {}, void *next = {})
    : format_rgba10x6without_ycb_cr_sampler_(format_rgba10x6without_ycb_cr_sampler), next_(next) {}

  PhysicalDeviceRGBA10X6FormatsFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceRGBA10X6FormatsFeaturesEXT(std::bit_cast<PhysicalDeviceRGBA10X6FormatsFeaturesEXT>(rhs)) {}

  PhysicalDeviceRGBA10X6FormatsFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRGBA10X6FormatsFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRGBA10X6FormatsFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT;
  void *next_;
  bool32 format_rgba10x6without_ycb_cr_sampler_;
};

struct CudaModuleCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_CUDA_MODULE_CREATE_INFO_NV;

  using native_type = VkCudaModuleCreateInfoNV;

  CudaModuleCreateInfoNV(size_t data_size = {}, const void *p_data = {}, const void *next = {})
    : data_size_(data_size), p_data_(p_data), next_(next) {}

  CudaModuleCreateInfoNV(const native_type &rhs) : CudaModuleCreateInfoNV(std::bit_cast<CudaModuleCreateInfoNV>(rhs)) {}

  CudaModuleCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CudaModuleCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const CudaModuleCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CUDA_MODULE_CREATE_INFO_NV;
  const void *next_;
  size_t data_size_;
  const void *p_data_;
};

struct ImageCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_CREATE_INFO;

  using native_type = VkImageCreateInfo;

  ImageCreateInfo(ImageCreateMask flags = {},
                  ImageType image_type = ImageType::E_1D,
                  Format format = Format::E_UNDEFINED,
                  Extent3D extent = {},
                  uint32_t mip_levels = {},
                  uint32_t array_layers = {},
                  SampleCountMaskBit samples = {},
                  ImageTiling tiling = ImageTiling::E_OPTIMAL,
                  ImageUsageMask usage = {},
                  SharingMode sharing_mode = SharingMode::E_EXCLUSIVE,
                  uint32_t queue_family_index_count = {},
                  const uint32_t *p_queue_family_indices = {},
                  ImageLayout initial_layout = ImageLayout::E_UNDEFINED,
                  const void *next = {})
    : flags_(flags), image_type_(image_type), format_(format), extent_(extent), mip_levels_(mip_levels), array_layers_(array_layers),
      samples_(samples), tiling_(tiling), usage_(usage), sharing_mode_(sharing_mode), queue_family_index_count_(queue_family_index_count),
      p_queue_family_indices_(p_queue_family_indices), initial_layout_(initial_layout), next_(next) {}

  ImageCreateInfo(const native_type &rhs) : ImageCreateInfo(std::bit_cast<ImageCreateInfo>(rhs)) {}

  ImageCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ImageCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_CREATE_INFO;
  const void *next_;
  ImageCreateMask flags_;
  ImageType image_type_;
  Format format_;
  Extent3D extent_;
  uint32_t mip_levels_;
  uint32_t array_layers_;
  SampleCountMaskBit samples_;
  ImageTiling tiling_;
  ImageUsageMask usage_;
  SharingMode sharing_mode_;
  uint32_t queue_family_index_count_;
  const uint32_t *p_queue_family_indices_;
  ImageLayout initial_layout_;
};

struct BufferCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_CREATE_INFO;

  using native_type = VkBufferCreateInfo;

  BufferCreateInfo(BufferCreateMask flags = {},
                   DeviceSize size = {},
                   BufferUsageMask usage = {},
                   SharingMode sharing_mode = SharingMode::E_EXCLUSIVE,
                   uint32_t queue_family_index_count = {},
                   const uint32_t *p_queue_family_indices = {},
                   const void *next = {})
    : flags_(flags), size_(size), usage_(usage), sharing_mode_(sharing_mode), queue_family_index_count_(queue_family_index_count),
      p_queue_family_indices_(p_queue_family_indices), next_(next) {}

  BufferCreateInfo(const native_type &rhs) : BufferCreateInfo(std::bit_cast<BufferCreateInfo>(rhs)) {}

  BufferCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BufferCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_CREATE_INFO;
  const void *next_;
  BufferCreateMask flags_;
  DeviceSize size_;
  BufferUsageMask usage_;
  SharingMode sharing_mode_;
  uint32_t queue_family_index_count_;
  const uint32_t *p_queue_family_indices_;
};

struct SRTDataNV {

  using native_type = VkSRTDataNV;

  SRTDataNV(float sx = {},
            float a = {},
            float b = {},
            float pvx = {},
            float sy = {},
            float c = {},
            float pvy = {},
            float sz = {},
            float pvz = {},
            float qx = {},
            float qy = {},
            float qz = {},
            float qw = {},
            float tx = {},
            float ty = {},
            float tz = {})
    : sx_(sx), a_(a), b_(b), pvx_(pvx), sy_(sy), c_(c), pvy_(pvy), sz_(sz), pvz_(pvz), qx_(qx), qy_(qy), qz_(qz), qw_(qw), tx_(tx), ty_(ty),
      tz_(tz) {}

  SRTDataNV(const native_type &rhs) : SRTDataNV(std::bit_cast<SRTDataNV>(rhs)) {}

  SRTDataNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<SRTDataNV>(rhs);
    return *this;
  }

  auto operator<=>(const SRTDataNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float sx_;
  float a_;
  float b_;
  float pvx_;
  float sy_;
  float c_;
  float pvy_;
  float sz_;
  float pvz_;
  float qx_;
  float qy_;
  float qz_;
  float qw_;
  float tx_;
  float ty_;
  float tz_;
};

struct AccelerationStructureMotionInfoNV {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_MOTION_INFO_NV;

  using native_type = VkAccelerationStructureMotionInfoNV;

  AccelerationStructureMotionInfoNV(uint32_t max_instances = {}, AccelerationStructureMotionInfoMask flags = {}, const void *next = {})
    : max_instances_(max_instances), flags_(flags), next_(next) {}

  AccelerationStructureMotionInfoNV(const native_type &rhs)
    : AccelerationStructureMotionInfoNV(std::bit_cast<AccelerationStructureMotionInfoNV>(rhs)) {}

  AccelerationStructureMotionInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureMotionInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureMotionInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_MOTION_INFO_NV;
  const void *next_;
  uint32_t max_instances_;
  AccelerationStructureMotionInfoMask flags_;
};

struct PhysicalDeviceImageProcessingPropertiesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM;

  using native_type = VkPhysicalDeviceImageProcessingPropertiesQCOM;

  PhysicalDeviceImageProcessingPropertiesQCOM() = default;

  PhysicalDeviceImageProcessingPropertiesQCOM(const native_type &rhs)
    : PhysicalDeviceImageProcessingPropertiesQCOM(std::bit_cast<PhysicalDeviceImageProcessingPropertiesQCOM>(rhs)) {}

  PhysicalDeviceImageProcessingPropertiesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageProcessingPropertiesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageProcessingPropertiesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM;
  void *next_ = {};
  uint32_t max_weight_filter_phases_ = {};
  Extent2D max_weight_filter_dimension_ = {};
  Extent2D max_block_match_region_ = {};
  Extent2D max_box_filter_block_size_ = {};
};

struct PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;

  PhysicalDeviceFragmentShaderBarycentricPropertiesKHR() = default;

  PhysicalDeviceFragmentShaderBarycentricPropertiesKHR(const native_type &rhs)
    : PhysicalDeviceFragmentShaderBarycentricPropertiesKHR(std::bit_cast<PhysicalDeviceFragmentShaderBarycentricPropertiesKHR>(rhs)) {}

  PhysicalDeviceFragmentShaderBarycentricPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShaderBarycentricPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShaderBarycentricPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR;
  void *next_ = {};
  bool32 tri_strip_vertex_order_independent_of_provoking_vertex_ = {};
};

struct PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;

  using native_type = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

  PhysicalDeviceFragmentShaderBarycentricFeaturesKHR(bool32 fragment_shader_barycentric = {}, void *next = {})
    : fragment_shader_barycentric_(fragment_shader_barycentric), next_(next) {}

  PhysicalDeviceFragmentShaderBarycentricFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceFragmentShaderBarycentricFeaturesKHR(std::bit_cast<PhysicalDeviceFragmentShaderBarycentricFeaturesKHR>(rhs)) {}

  PhysicalDeviceFragmentShaderBarycentricFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShaderBarycentricFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShaderBarycentricFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;
  void *next_;
  bool32 fragment_shader_barycentric_;
};

struct PhysicalDeviceShaderIntegerDotProductFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;

  using native_type = VkPhysicalDeviceShaderIntegerDotProductFeatures;

  PhysicalDeviceShaderIntegerDotProductFeatures(bool32 shader_integer_dot_product = {}, void *next = {})
    : shader_integer_dot_product_(shader_integer_dot_product), next_(next) {}

  PhysicalDeviceShaderIntegerDotProductFeatures(const native_type &rhs)
    : PhysicalDeviceShaderIntegerDotProductFeatures(std::bit_cast<PhysicalDeviceShaderIntegerDotProductFeatures>(rhs)) {}

  PhysicalDeviceShaderIntegerDotProductFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderIntegerDotProductFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderIntegerDotProductFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
  void *next_;
  bool32 shader_integer_dot_product_;
};

struct AccelerationStructureCaptureDescriptorDataInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;

  using native_type = VkAccelerationStructureCaptureDescriptorDataInfoEXT;

  AccelerationStructureCaptureDescriptorDataInfoEXT(VkAccelerationStructureKHR acceleration_structure = {},
                                                    VkAccelerationStructureNV acceleration_structure_nv = {},
                                                    const void *next = {})
    : acceleration_structure_(acceleration_structure), acceleration_structure_nv_(acceleration_structure_nv), next_(next) {}

  AccelerationStructureCaptureDescriptorDataInfoEXT(const native_type &rhs)
    : AccelerationStructureCaptureDescriptorDataInfoEXT(std::bit_cast<AccelerationStructureCaptureDescriptorDataInfoEXT>(rhs)) {}

  AccelerationStructureCaptureDescriptorDataInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureCaptureDescriptorDataInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureCaptureDescriptorDataInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
  const void *next_;
  VkAccelerationStructureKHR acceleration_structure_;
  VkAccelerationStructureNV acceleration_structure_nv_;
};

struct ImageCaptureDescriptorDataInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;

  using native_type = VkImageCaptureDescriptorDataInfoEXT;

  ImageCaptureDescriptorDataInfoEXT(VkImage image = {}, const void *next = {}) : image_(image), next_(next) {}

  ImageCaptureDescriptorDataInfoEXT(const native_type &rhs)
    : ImageCaptureDescriptorDataInfoEXT(std::bit_cast<ImageCaptureDescriptorDataInfoEXT>(rhs)) {}

  ImageCaptureDescriptorDataInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageCaptureDescriptorDataInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageCaptureDescriptorDataInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
  const void *next_;
  VkImage image_;
};

struct BufferCaptureDescriptorDataInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;

  using native_type = VkBufferCaptureDescriptorDataInfoEXT;

  BufferCaptureDescriptorDataInfoEXT(VkBuffer buffer = {}, const void *next = {}) : buffer_(buffer), next_(next) {}

  BufferCaptureDescriptorDataInfoEXT(const native_type &rhs)
    : BufferCaptureDescriptorDataInfoEXT(std::bit_cast<BufferCaptureDescriptorDataInfoEXT>(rhs)) {}

  BufferCaptureDescriptorDataInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferCaptureDescriptorDataInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const BufferCaptureDescriptorDataInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
  const void *next_;
  VkBuffer buffer_;
};

struct DescriptorAddressInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_ADDRESS_INFO_EXT;

  using native_type = VkDescriptorAddressInfoEXT;

  DescriptorAddressInfoEXT(DeviceAddress address = {}, DeviceSize range = {}, Format format = Format::E_UNDEFINED, void *next = {})
    : address_(address), range_(range), format_(format), next_(next) {}

  DescriptorAddressInfoEXT(const native_type &rhs) : DescriptorAddressInfoEXT(std::bit_cast<DescriptorAddressInfoEXT>(rhs)) {}

  DescriptorAddressInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorAddressInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorAddressInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_ADDRESS_INFO_EXT;
  void *next_;
  DeviceAddress address_;
  DeviceSize range_;
  Format format_;
};

struct PhysicalDeviceDescriptorBufferPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceDescriptorBufferPropertiesEXT;

  PhysicalDeviceDescriptorBufferPropertiesEXT() = default;

  PhysicalDeviceDescriptorBufferPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceDescriptorBufferPropertiesEXT(std::bit_cast<PhysicalDeviceDescriptorBufferPropertiesEXT>(rhs)) {}

  PhysicalDeviceDescriptorBufferPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorBufferPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorBufferPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT;
  void *next_ = {};
  bool32 combined_image_sampler_descriptor_single_array_ = {};
  bool32 bufferless_push_descriptors_ = {};
  bool32 allow_sampler_image_view_post_submit_creation_ = {};
  DeviceSize descriptor_buffer_offset_alignment_ = {};
  uint32_t max_descriptor_buffer_bindings_ = {};
  uint32_t max_resource_descriptor_buffer_bindings_ = {};
  uint32_t max_sampler_descriptor_buffer_bindings_ = {};
  uint32_t max_embedded_immutable_sampler_bindings_ = {};
  uint32_t max_embedded_immutable_samplers_ = {};
  size_t buffer_capture_replay_descriptor_data_size_ = {};
  size_t image_capture_replay_descriptor_data_size_ = {};
  size_t image_view_capture_replay_descriptor_data_size_ = {};
  size_t sampler_capture_replay_descriptor_data_size_ = {};
  size_t acceleration_structure_capture_replay_descriptor_data_size_ = {};
  size_t sampler_descriptor_size_ = {};
  size_t combined_image_sampler_descriptor_size_ = {};
  size_t sampled_image_descriptor_size_ = {};
  size_t storage_image_descriptor_size_ = {};
  size_t uniform_texel_buffer_descriptor_size_ = {};
  size_t robust_uniform_texel_buffer_descriptor_size_ = {};
  size_t storage_texel_buffer_descriptor_size_ = {};
  size_t robust_storage_texel_buffer_descriptor_size_ = {};
  size_t uniform_buffer_descriptor_size_ = {};
  size_t robust_uniform_buffer_descriptor_size_ = {};
  size_t storage_buffer_descriptor_size_ = {};
  size_t robust_storage_buffer_descriptor_size_ = {};
  size_t input_attachment_descriptor_size_ = {};
  size_t acceleration_structure_descriptor_size_ = {};
  DeviceSize max_sampler_descriptor_buffer_range_ = {};
  DeviceSize max_resource_descriptor_buffer_range_ = {};
  DeviceSize sampler_descriptor_buffer_address_space_size_ = {};
  DeviceSize resource_descriptor_buffer_address_space_size_ = {};
  DeviceSize descriptor_buffer_address_space_size_ = {};
};

struct CuLaunchInfoNVX {

  static constexpr StructureType structure_type = StructureType::E_CU_LAUNCH_INFO_NVX;

  using native_type = VkCuLaunchInfoNVX;

  CuLaunchInfoNVX(VkCuFunctionNVX function = {},
                  uint32_t grid_dim_x = {},
                  uint32_t grid_dim_y = {},
                  uint32_t grid_dim_z = {},
                  uint32_t block_dim_x = {},
                  uint32_t block_dim_y = {},
                  uint32_t block_dim_z = {},
                  uint32_t shared_mem_bytes = {},
                  size_t param_count = {},
                  const void *const *p_params = {},
                  size_t extra_count = {},
                  const void *const *p_extras = {},
                  const void *next = {})
    : function_(function), grid_dim_x_(grid_dim_x), grid_dim_y_(grid_dim_y), grid_dim_z_(grid_dim_z), block_dim_x_(block_dim_x),
      block_dim_y_(block_dim_y), block_dim_z_(block_dim_z), shared_mem_bytes_(shared_mem_bytes), param_count_(param_count),
      p_params_(p_params), extra_count_(extra_count), p_extras_(p_extras), next_(next) {}

  CuLaunchInfoNVX(const native_type &rhs) : CuLaunchInfoNVX(std::bit_cast<CuLaunchInfoNVX>(rhs)) {}

  CuLaunchInfoNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<CuLaunchInfoNVX>(rhs);
    return *this;
  }

  auto operator<=>(const CuLaunchInfoNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CU_LAUNCH_INFO_NVX;
  const void *next_;
  VkCuFunctionNVX function_;
  uint32_t grid_dim_x_;
  uint32_t grid_dim_y_;
  uint32_t grid_dim_z_;
  uint32_t block_dim_x_;
  uint32_t block_dim_y_;
  uint32_t block_dim_z_;
  uint32_t shared_mem_bytes_;
  size_t param_count_;
  const void *const *p_params_;
  size_t extra_count_;
  const void *const *p_extras_;
};

struct PhysicalDeviceExtendedSparseAddressSpacePropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV;

  PhysicalDeviceExtendedSparseAddressSpacePropertiesNV() = default;

  PhysicalDeviceExtendedSparseAddressSpacePropertiesNV(const native_type &rhs)
    : PhysicalDeviceExtendedSparseAddressSpacePropertiesNV(std::bit_cast<PhysicalDeviceExtendedSparseAddressSpacePropertiesNV>(rhs)) {}

  PhysicalDeviceExtendedSparseAddressSpacePropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExtendedSparseAddressSpacePropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExtendedSparseAddressSpacePropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV;
  void *next_ = {};
  DeviceSize extended_sparse_address_space_size_ = {};
  ImageUsageMask extended_sparse_image_usage_flags_ = {};
  BufferUsageMask extended_sparse_buffer_usage_flags_ = {};
};

struct PipelineRasterizationProvokingVertexStateCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;

  using native_type = VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;

  PipelineRasterizationProvokingVertexStateCreateInfoEXT(
    ProvokingVertexMode provoking_vertex_mode = ProvokingVertexMode::E_FIRST_VERTEX_EXT, const void *next = {})
    : provoking_vertex_mode_(provoking_vertex_mode), next_(next) {}

  PipelineRasterizationProvokingVertexStateCreateInfoEXT(const native_type &rhs)
    : PipelineRasterizationProvokingVertexStateCreateInfoEXT(std::bit_cast<PipelineRasterizationProvokingVertexStateCreateInfoEXT>(rhs)) {}

  PipelineRasterizationProvokingVertexStateCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationProvokingVertexStateCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationProvokingVertexStateCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;
  const void *next_;
  ProvokingVertexMode provoking_vertex_mode_;
};

struct PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;

  using native_type = VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;

  PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(bool32 ycbcr2plane444formats = {}, void *next = {})
    : ycbcr2plane444formats_(ycbcr2plane444formats), next_(next) {}

  PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(std::bit_cast<PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>(rhs)) {}

  PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
  void *next_;
  bool32 ycbcr2plane444formats_;
};

struct PhysicalDeviceInheritedViewportScissorFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;

  using native_type = VkPhysicalDeviceInheritedViewportScissorFeaturesNV;

  PhysicalDeviceInheritedViewportScissorFeaturesNV(bool32 inherited_viewport_scissor2d = {}, void *next = {})
    : inherited_viewport_scissor2d_(inherited_viewport_scissor2d), next_(next) {}

  PhysicalDeviceInheritedViewportScissorFeaturesNV(const native_type &rhs)
    : PhysicalDeviceInheritedViewportScissorFeaturesNV(std::bit_cast<PhysicalDeviceInheritedViewportScissorFeaturesNV>(rhs)) {}

  PhysicalDeviceInheritedViewportScissorFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceInheritedViewportScissorFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceInheritedViewportScissorFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
  void *next_;
  bool32 inherited_viewport_scissor2d_;
};

struct VideoEncodeH265ProfileInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_PROFILE_INFO_KHR;

  using native_type = VkVideoEncodeH265ProfileInfoKHR;

  VideoEncodeH265ProfileInfoKHR(StdVideoH265ProfileIdc std_profile_idc = {}, const void *next = {})
    : std_profile_idc_(std_profile_idc), next_(next) {}

  VideoEncodeH265ProfileInfoKHR(const native_type &rhs)
    : VideoEncodeH265ProfileInfoKHR(std::bit_cast<VideoEncodeH265ProfileInfoKHR>(rhs)) {}

  VideoEncodeH265ProfileInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265ProfileInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265ProfileInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_PROFILE_INFO_KHR;
  const void *next_;
  StdVideoH265ProfileIdc std_profile_idc_;
};

struct VideoEncodeH265FrameSizeKHR {

  using native_type = VkVideoEncodeH265FrameSizeKHR;

  VideoEncodeH265FrameSizeKHR(uint32_t frame_isize = {}, uint32_t frame_psize = {}, uint32_t frame_bsize = {})
    : frame_isize_(frame_isize), frame_psize_(frame_psize), frame_bsize_(frame_bsize) {}

  VideoEncodeH265FrameSizeKHR(const native_type &rhs) : VideoEncodeH265FrameSizeKHR(std::bit_cast<VideoEncodeH265FrameSizeKHR>(rhs)) {}

  VideoEncodeH265FrameSizeKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265FrameSizeKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265FrameSizeKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t frame_isize_;
  uint32_t frame_psize_;
  uint32_t frame_bsize_;
};

struct VideoEncodeH265RateControlInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR;

  using native_type = VkVideoEncodeH265RateControlInfoKHR;

  VideoEncodeH265RateControlInfoKHR(VideoEncodeH265RateControlMask flags = {},
                                    uint32_t gop_frame_count = {},
                                    uint32_t idr_period = {},
                                    uint32_t consecutive_bframe_count = {},
                                    uint32_t sub_layer_count = {},
                                    const void *next = {})
    : flags_(flags), gop_frame_count_(gop_frame_count), idr_period_(idr_period), consecutive_bframe_count_(consecutive_bframe_count),
      sub_layer_count_(sub_layer_count), next_(next) {}

  VideoEncodeH265RateControlInfoKHR(const native_type &rhs)
    : VideoEncodeH265RateControlInfoKHR(std::bit_cast<VideoEncodeH265RateControlInfoKHR>(rhs)) {}

  VideoEncodeH265RateControlInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265RateControlInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265RateControlInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR;
  const void *next_;
  VideoEncodeH265RateControlMask flags_;
  uint32_t gop_frame_count_;
  uint32_t idr_period_;
  uint32_t consecutive_bframe_count_;
  uint32_t sub_layer_count_;
};

struct VideoEncodeH265SessionParametersFeedbackInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;

  using native_type = VkVideoEncodeH265SessionParametersFeedbackInfoKHR;

  VideoEncodeH265SessionParametersFeedbackInfoKHR() = default;

  VideoEncodeH265SessionParametersFeedbackInfoKHR(const native_type &rhs)
    : VideoEncodeH265SessionParametersFeedbackInfoKHR(std::bit_cast<VideoEncodeH265SessionParametersFeedbackInfoKHR>(rhs)) {}

  VideoEncodeH265SessionParametersFeedbackInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265SessionParametersFeedbackInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265SessionParametersFeedbackInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;
  void *next_ = {};
  bool32 has_std_vpsoverrides_ = {};
  bool32 has_std_spsoverrides_ = {};
  bool32 has_std_ppsoverrides_ = {};
};

struct VideoEncodeH265SessionParametersGetInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR;

  using native_type = VkVideoEncodeH265SessionParametersGetInfoKHR;

  VideoEncodeH265SessionParametersGetInfoKHR(bool32 write_std_vps = {},
                                             bool32 write_std_sps = {},
                                             bool32 write_std_pps = {},
                                             uint32_t std_vpsid = {},
                                             uint32_t std_spsid = {},
                                             uint32_t std_ppsid = {},
                                             const void *next = {})
    : write_std_vps_(write_std_vps), write_std_sps_(write_std_sps), write_std_pps_(write_std_pps), std_vpsid_(std_vpsid),
      std_spsid_(std_spsid), std_ppsid_(std_ppsid), next_(next) {}

  VideoEncodeH265SessionParametersGetInfoKHR(const native_type &rhs)
    : VideoEncodeH265SessionParametersGetInfoKHR(std::bit_cast<VideoEncodeH265SessionParametersGetInfoKHR>(rhs)) {}

  VideoEncodeH265SessionParametersGetInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265SessionParametersGetInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265SessionParametersGetInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR;
  const void *next_;
  bool32 write_std_vps_;
  bool32 write_std_sps_;
  bool32 write_std_pps_;
  uint32_t std_vpsid_;
  uint32_t std_spsid_;
  uint32_t std_ppsid_;
};

struct PhysicalDeviceImageProcessing2FeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceImageProcessing2FeaturesQCOM;

  PhysicalDeviceImageProcessing2FeaturesQCOM(bool32 texture_block_match2 = {}, void *next = {})
    : texture_block_match2_(texture_block_match2), next_(next) {}

  PhysicalDeviceImageProcessing2FeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceImageProcessing2FeaturesQCOM(std::bit_cast<PhysicalDeviceImageProcessing2FeaturesQCOM>(rhs)) {}

  PhysicalDeviceImageProcessing2FeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageProcessing2FeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageProcessing2FeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM;
  void *next_;
  bool32 texture_block_match2_;
};

struct VideoEncodeH265DpbSlotInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR;

  using native_type = VkVideoEncodeH265DpbSlotInfoKHR;

  VideoEncodeH265DpbSlotInfoKHR(const StdVideoEncodeH265ReferenceInfo *p_std_reference_info = {}, const void *next = {})
    : p_std_reference_info_(p_std_reference_info), next_(next) {}

  VideoEncodeH265DpbSlotInfoKHR(const native_type &rhs)
    : VideoEncodeH265DpbSlotInfoKHR(std::bit_cast<VideoEncodeH265DpbSlotInfoKHR>(rhs)) {}

  VideoEncodeH265DpbSlotInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265DpbSlotInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265DpbSlotInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR;
  const void *next_;
  const StdVideoEncodeH265ReferenceInfo *p_std_reference_info_;
};

struct VideoEncodeH265SessionParametersAddInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;

  using native_type = VkVideoEncodeH265SessionParametersAddInfoKHR;

  VideoEncodeH265SessionParametersAddInfoKHR(uint32_t std_vpscount = {},
                                             const StdVideoH265VideoParameterSet *p_std_vpss = {},
                                             uint32_t std_spscount = {},
                                             const StdVideoH265SequenceParameterSet *p_std_spss = {},
                                             uint32_t std_ppscount = {},
                                             const StdVideoH265PictureParameterSet *p_std_ppss = {},
                                             const void *next = {})
    : std_vpscount_(std_vpscount), p_std_vpss_(p_std_vpss), std_spscount_(std_spscount), p_std_spss_(p_std_spss),
      std_ppscount_(std_ppscount), p_std_ppss_(p_std_ppss), next_(next) {}

  VideoEncodeH265SessionParametersAddInfoKHR(const native_type &rhs)
    : VideoEncodeH265SessionParametersAddInfoKHR(std::bit_cast<VideoEncodeH265SessionParametersAddInfoKHR>(rhs)) {}

  VideoEncodeH265SessionParametersAddInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265SessionParametersAddInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265SessionParametersAddInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;
  const void *next_;
  uint32_t std_vpscount_;
  const StdVideoH265VideoParameterSet *p_std_vpss_;
  uint32_t std_spscount_;
  const StdVideoH265SequenceParameterSet *p_std_spss_;
  uint32_t std_ppscount_;
  const StdVideoH265PictureParameterSet *p_std_ppss_;
};

struct VideoEncodeH265SessionParametersCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;

  using native_type = VkVideoEncodeH265SessionParametersCreateInfoKHR;

  VideoEncodeH265SessionParametersCreateInfoKHR(uint32_t max_std_vpscount = {},
                                                uint32_t max_std_spscount = {},
                                                uint32_t max_std_ppscount = {},
                                                const VideoEncodeH265SessionParametersAddInfoKHR *p_parameters_add_info = {},
                                                const void *next = {})
    : max_std_vpscount_(max_std_vpscount), max_std_spscount_(max_std_spscount), max_std_ppscount_(max_std_ppscount),
      p_parameters_add_info_(p_parameters_add_info), next_(next) {}

  VideoEncodeH265SessionParametersCreateInfoKHR(const native_type &rhs)
    : VideoEncodeH265SessionParametersCreateInfoKHR(std::bit_cast<VideoEncodeH265SessionParametersCreateInfoKHR>(rhs)) {}

  VideoEncodeH265SessionParametersCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265SessionParametersCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265SessionParametersCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;
  const void *next_;
  uint32_t max_std_vpscount_;
  uint32_t max_std_spscount_;
  uint32_t max_std_ppscount_;
  const VideoEncodeH265SessionParametersAddInfoKHR *p_parameters_add_info_;
};

struct VideoEncodeH265SessionCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR;

  using native_type = VkVideoEncodeH265SessionCreateInfoKHR;

  VideoEncodeH265SessionCreateInfoKHR(bool32 use_max_level_idc = {}, StdVideoH265LevelIdc max_level_idc = {}, const void *next = {})
    : use_max_level_idc_(use_max_level_idc), max_level_idc_(max_level_idc), next_(next) {}

  VideoEncodeH265SessionCreateInfoKHR(const native_type &rhs)
    : VideoEncodeH265SessionCreateInfoKHR(std::bit_cast<VideoEncodeH265SessionCreateInfoKHR>(rhs)) {}

  VideoEncodeH265SessionCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265SessionCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265SessionCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR;
  const void *next_;
  bool32 use_max_level_idc_;
  StdVideoH265LevelIdc max_level_idc_;
};

struct VideoEncodeH265QpKHR {

  using native_type = VkVideoEncodeH265QpKHR;

  VideoEncodeH265QpKHR(int32_t qp_i = {}, int32_t qp_p = {}, int32_t qp_b = {}) : qp_i_(qp_i), qp_p_(qp_p), qp_b_(qp_b) {}

  VideoEncodeH265QpKHR(const native_type &rhs) : VideoEncodeH265QpKHR(std::bit_cast<VideoEncodeH265QpKHR>(rhs)) {}

  VideoEncodeH265QpKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265QpKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265QpKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  int32_t qp_i_;
  int32_t qp_p_;
  int32_t qp_b_;
};

struct VideoEncodeH265QualityLevelPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR;

  using native_type = VkVideoEncodeH265QualityLevelPropertiesKHR;

  VideoEncodeH265QualityLevelPropertiesKHR() = default;

  VideoEncodeH265QualityLevelPropertiesKHR(const native_type &rhs)
    : VideoEncodeH265QualityLevelPropertiesKHR(std::bit_cast<VideoEncodeH265QualityLevelPropertiesKHR>(rhs)) {}

  VideoEncodeH265QualityLevelPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265QualityLevelPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265QualityLevelPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR;
  void *next_ = {};
  VideoEncodeH265RateControlMask preferred_rate_control_flags_ = {};
  uint32_t preferred_gop_frame_count_ = {};
  uint32_t preferred_idr_period_ = {};
  uint32_t preferred_consecutive_bframe_count_ = {};
  uint32_t preferred_sub_layer_count_ = {};
  VideoEncodeH265QpKHR preferred_constant_qp_ = {};
  uint32_t preferred_max_l0reference_count_ = {};
  uint32_t preferred_max_l1reference_count_ = {};
};

struct VideoEncodeH265CapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_CAPABILITIES_KHR;

  using native_type = VkVideoEncodeH265CapabilitiesKHR;

  VideoEncodeH265CapabilitiesKHR() = default;

  VideoEncodeH265CapabilitiesKHR(const native_type &rhs)
    : VideoEncodeH265CapabilitiesKHR(std::bit_cast<VideoEncodeH265CapabilitiesKHR>(rhs)) {}

  VideoEncodeH265CapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265CapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265CapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_CAPABILITIES_KHR;
  void *next_ = {};
  VideoEncodeH265CapabilityMask flags_ = {};
  StdVideoH265LevelIdc max_level_idc_ = {};
  uint32_t max_slice_segment_count_ = {};
  Extent2D max_tiles_ = {};
  VideoEncodeH265CtbSizeMask ctb_sizes_ = {};
  VideoEncodeH265TransformBlockSizeMask transform_block_sizes_ = {};
  uint32_t max_ppicture_l0reference_count_ = {};
  uint32_t max_bpicture_l0reference_count_ = {};
  uint32_t max_l1reference_count_ = {};
  uint32_t max_sub_layer_count_ = {};
  bool32 expect_dyadic_temporal_sub_layer_pattern_ = {};
  int32_t min_qp_ = {};
  int32_t max_qp_ = {};
  bool32 prefers_gop_remaining_frames_ = {};
  bool32 requires_gop_remaining_frames_ = {};
  VideoEncodeH265StdMask std_syntax_flags_ = {};
};

struct VideoEncodeH264QpKHR {

  using native_type = VkVideoEncodeH264QpKHR;

  VideoEncodeH264QpKHR(int32_t qp_i = {}, int32_t qp_p = {}, int32_t qp_b = {}) : qp_i_(qp_i), qp_p_(qp_p), qp_b_(qp_b) {}

  VideoEncodeH264QpKHR(const native_type &rhs) : VideoEncodeH264QpKHR(std::bit_cast<VideoEncodeH264QpKHR>(rhs)) {}

  VideoEncodeH264QpKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264QpKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264QpKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  int32_t qp_i_;
  int32_t qp_p_;
  int32_t qp_b_;
};

struct VideoEncodeH264FrameSizeKHR {

  using native_type = VkVideoEncodeH264FrameSizeKHR;

  VideoEncodeH264FrameSizeKHR(uint32_t frame_isize = {}, uint32_t frame_psize = {}, uint32_t frame_bsize = {})
    : frame_isize_(frame_isize), frame_psize_(frame_psize), frame_bsize_(frame_bsize) {}

  VideoEncodeH264FrameSizeKHR(const native_type &rhs) : VideoEncodeH264FrameSizeKHR(std::bit_cast<VideoEncodeH264FrameSizeKHR>(rhs)) {}

  VideoEncodeH264FrameSizeKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264FrameSizeKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264FrameSizeKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t frame_isize_;
  uint32_t frame_psize_;
  uint32_t frame_bsize_;
};

struct VideoEncodeH264RateControlLayerInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR;

  using native_type = VkVideoEncodeH264RateControlLayerInfoKHR;

  VideoEncodeH264RateControlLayerInfoKHR(bool32 use_min_qp = {},
                                         VideoEncodeH264QpKHR min_qp = {},
                                         bool32 use_max_qp = {},
                                         VideoEncodeH264QpKHR max_qp = {},
                                         bool32 use_max_frame_size = {},
                                         VideoEncodeH264FrameSizeKHR max_frame_size = {},
                                         const void *next = {})
    : use_min_qp_(use_min_qp), min_qp_(min_qp), use_max_qp_(use_max_qp), max_qp_(max_qp), use_max_frame_size_(use_max_frame_size),
      max_frame_size_(max_frame_size), next_(next) {}

  VideoEncodeH264RateControlLayerInfoKHR(const native_type &rhs)
    : VideoEncodeH264RateControlLayerInfoKHR(std::bit_cast<VideoEncodeH264RateControlLayerInfoKHR>(rhs)) {}

  VideoEncodeH264RateControlLayerInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264RateControlLayerInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264RateControlLayerInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR;
  const void *next_;
  bool32 use_min_qp_;
  VideoEncodeH264QpKHR min_qp_;
  bool32 use_max_qp_;
  VideoEncodeH264QpKHR max_qp_;
  bool32 use_max_frame_size_;
  VideoEncodeH264FrameSizeKHR max_frame_size_;
};

struct VideoEncodeH264RateControlInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR;

  using native_type = VkVideoEncodeH264RateControlInfoKHR;

  VideoEncodeH264RateControlInfoKHR(VideoEncodeH264RateControlMask flags = {},
                                    uint32_t gop_frame_count = {},
                                    uint32_t idr_period = {},
                                    uint32_t consecutive_bframe_count = {},
                                    uint32_t temporal_layer_count = {},
                                    const void *next = {})
    : flags_(flags), gop_frame_count_(gop_frame_count), idr_period_(idr_period), consecutive_bframe_count_(consecutive_bframe_count),
      temporal_layer_count_(temporal_layer_count), next_(next) {}

  VideoEncodeH264RateControlInfoKHR(const native_type &rhs)
    : VideoEncodeH264RateControlInfoKHR(std::bit_cast<VideoEncodeH264RateControlInfoKHR>(rhs)) {}

  VideoEncodeH264RateControlInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264RateControlInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264RateControlInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR;
  const void *next_;
  VideoEncodeH264RateControlMask flags_;
  uint32_t gop_frame_count_;
  uint32_t idr_period_;
  uint32_t consecutive_bframe_count_;
  uint32_t temporal_layer_count_;
};

struct VideoEncodeH264NaluSliceInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR;

  using native_type = VkVideoEncodeH264NaluSliceInfoKHR;

  VideoEncodeH264NaluSliceInfoKHR(int32_t constant_qp = {},
                                  const StdVideoEncodeH264SliceHeader *p_std_slice_header = {},
                                  const void *next = {})
    : constant_qp_(constant_qp), p_std_slice_header_(p_std_slice_header), next_(next) {}

  VideoEncodeH264NaluSliceInfoKHR(const native_type &rhs)
    : VideoEncodeH264NaluSliceInfoKHR(std::bit_cast<VideoEncodeH264NaluSliceInfoKHR>(rhs)) {}

  VideoEncodeH264NaluSliceInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264NaluSliceInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264NaluSliceInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR;
  const void *next_;
  int32_t constant_qp_;
  const StdVideoEncodeH264SliceHeader *p_std_slice_header_;
};

struct VideoEncodeH264ProfileInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_PROFILE_INFO_KHR;

  using native_type = VkVideoEncodeH264ProfileInfoKHR;

  VideoEncodeH264ProfileInfoKHR(StdVideoH264ProfileIdc std_profile_idc = {}, const void *next = {})
    : std_profile_idc_(std_profile_idc), next_(next) {}

  VideoEncodeH264ProfileInfoKHR(const native_type &rhs)
    : VideoEncodeH264ProfileInfoKHR(std::bit_cast<VideoEncodeH264ProfileInfoKHR>(rhs)) {}

  VideoEncodeH264ProfileInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264ProfileInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264ProfileInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_PROFILE_INFO_KHR;
  const void *next_;
  StdVideoH264ProfileIdc std_profile_idc_;
};

struct VideoEncodeH264PictureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_PICTURE_INFO_KHR;

  using native_type = VkVideoEncodeH264PictureInfoKHR;

  VideoEncodeH264PictureInfoKHR(uint32_t nalu_slice_entry_count = {},
                                const VideoEncodeH264NaluSliceInfoKHR *p_nalu_slice_entries = {},
                                const StdVideoEncodeH264PictureInfo *p_std_picture_info = {},
                                bool32 generate_prefix_nalu = {},
                                const void *next = {})
    : nalu_slice_entry_count_(nalu_slice_entry_count), p_nalu_slice_entries_(p_nalu_slice_entries), p_std_picture_info_(p_std_picture_info),
      generate_prefix_nalu_(generate_prefix_nalu), next_(next) {}

  VideoEncodeH264PictureInfoKHR(const native_type &rhs)
    : VideoEncodeH264PictureInfoKHR(std::bit_cast<VideoEncodeH264PictureInfoKHR>(rhs)) {}

  VideoEncodeH264PictureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264PictureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264PictureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_PICTURE_INFO_KHR;
  const void *next_;
  uint32_t nalu_slice_entry_count_;
  const VideoEncodeH264NaluSliceInfoKHR *p_nalu_slice_entries_;
  const StdVideoEncodeH264PictureInfo *p_std_picture_info_;
  bool32 generate_prefix_nalu_;
};

struct VideoEncodeH264DpbSlotInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR;

  using native_type = VkVideoEncodeH264DpbSlotInfoKHR;

  VideoEncodeH264DpbSlotInfoKHR(const StdVideoEncodeH264ReferenceInfo *p_std_reference_info = {}, const void *next = {})
    : p_std_reference_info_(p_std_reference_info), next_(next) {}

  VideoEncodeH264DpbSlotInfoKHR(const native_type &rhs)
    : VideoEncodeH264DpbSlotInfoKHR(std::bit_cast<VideoEncodeH264DpbSlotInfoKHR>(rhs)) {}

  VideoEncodeH264DpbSlotInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264DpbSlotInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264DpbSlotInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR;
  const void *next_;
  const StdVideoEncodeH264ReferenceInfo *p_std_reference_info_;
};

struct VideoEncodeH264SessionParametersFeedbackInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;

  using native_type = VkVideoEncodeH264SessionParametersFeedbackInfoKHR;

  VideoEncodeH264SessionParametersFeedbackInfoKHR() = default;

  VideoEncodeH264SessionParametersFeedbackInfoKHR(const native_type &rhs)
    : VideoEncodeH264SessionParametersFeedbackInfoKHR(std::bit_cast<VideoEncodeH264SessionParametersFeedbackInfoKHR>(rhs)) {}

  VideoEncodeH264SessionParametersFeedbackInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264SessionParametersFeedbackInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264SessionParametersFeedbackInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;
  void *next_ = {};
  bool32 has_std_spsoverrides_ = {};
  bool32 has_std_ppsoverrides_ = {};
};

struct VideoEncodeH264SessionParametersAddInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;

  using native_type = VkVideoEncodeH264SessionParametersAddInfoKHR;

  VideoEncodeH264SessionParametersAddInfoKHR(uint32_t std_spscount = {},
                                             const StdVideoH264SequenceParameterSet *p_std_spss = {},
                                             uint32_t std_ppscount = {},
                                             const StdVideoH264PictureParameterSet *p_std_ppss = {},
                                             const void *next = {})
    : std_spscount_(std_spscount), p_std_spss_(p_std_spss), std_ppscount_(std_ppscount), p_std_ppss_(p_std_ppss), next_(next) {}

  VideoEncodeH264SessionParametersAddInfoKHR(const native_type &rhs)
    : VideoEncodeH264SessionParametersAddInfoKHR(std::bit_cast<VideoEncodeH264SessionParametersAddInfoKHR>(rhs)) {}

  VideoEncodeH264SessionParametersAddInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264SessionParametersAddInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264SessionParametersAddInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;
  const void *next_;
  uint32_t std_spscount_;
  const StdVideoH264SequenceParameterSet *p_std_spss_;
  uint32_t std_ppscount_;
  const StdVideoH264PictureParameterSet *p_std_ppss_;
};

struct VideoEncodeH264SessionCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR;

  using native_type = VkVideoEncodeH264SessionCreateInfoKHR;

  VideoEncodeH264SessionCreateInfoKHR(bool32 use_max_level_idc = {}, StdVideoH264LevelIdc max_level_idc = {}, const void *next = {})
    : use_max_level_idc_(use_max_level_idc), max_level_idc_(max_level_idc), next_(next) {}

  VideoEncodeH264SessionCreateInfoKHR(const native_type &rhs)
    : VideoEncodeH264SessionCreateInfoKHR(std::bit_cast<VideoEncodeH264SessionCreateInfoKHR>(rhs)) {}

  VideoEncodeH264SessionCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264SessionCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264SessionCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR;
  const void *next_;
  bool32 use_max_level_idc_;
  StdVideoH264LevelIdc max_level_idc_;
};

struct VideoEncodeH264CapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_CAPABILITIES_KHR;

  using native_type = VkVideoEncodeH264CapabilitiesKHR;

  VideoEncodeH264CapabilitiesKHR() = default;

  VideoEncodeH264CapabilitiesKHR(const native_type &rhs)
    : VideoEncodeH264CapabilitiesKHR(std::bit_cast<VideoEncodeH264CapabilitiesKHR>(rhs)) {}

  VideoEncodeH264CapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264CapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264CapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_CAPABILITIES_KHR;
  void *next_ = {};
  VideoEncodeH264CapabilityMask flags_ = {};
  StdVideoH264LevelIdc max_level_idc_ = {};
  uint32_t max_slice_count_ = {};
  uint32_t max_ppicture_l0reference_count_ = {};
  uint32_t max_bpicture_l0reference_count_ = {};
  uint32_t max_l1reference_count_ = {};
  uint32_t max_temporal_layer_count_ = {};
  bool32 expect_dyadic_temporal_layer_pattern_ = {};
  int32_t min_qp_ = {};
  int32_t max_qp_ = {};
  bool32 prefers_gop_remaining_frames_ = {};
  bool32 requires_gop_remaining_frames_ = {};
  VideoEncodeH264StdMask std_syntax_flags_ = {};
};

struct VideoEncodeRateControlLayerInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR;

  using native_type = VkVideoEncodeRateControlLayerInfoKHR;

  VideoEncodeRateControlLayerInfoKHR(uint64_t average_bitrate = {},
                                     uint64_t max_bitrate = {},
                                     uint32_t frame_rate_numerator = {},
                                     uint32_t frame_rate_denominator = {},
                                     const void *next = {})
    : average_bitrate_(average_bitrate), max_bitrate_(max_bitrate), frame_rate_numerator_(frame_rate_numerator),
      frame_rate_denominator_(frame_rate_denominator), next_(next) {}

  VideoEncodeRateControlLayerInfoKHR(const native_type &rhs)
    : VideoEncodeRateControlLayerInfoKHR(std::bit_cast<VideoEncodeRateControlLayerInfoKHR>(rhs)) {}

  VideoEncodeRateControlLayerInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeRateControlLayerInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeRateControlLayerInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR;
  const void *next_;
  uint64_t average_bitrate_;
  uint64_t max_bitrate_;
  uint32_t frame_rate_numerator_;
  uint32_t frame_rate_denominator_;
};

struct VideoEncodeRateControlInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR;

  using native_type = VkVideoEncodeRateControlInfoKHR;

  VideoEncodeRateControlInfoKHR(VideoEncodeRateControlMask flags = {},
                                VideoEncodeRateControlModeMaskBit rate_control_mode = VideoEncodeRateControlModeMaskBit::E_DEFAULT_KHR,
                                uint32_t layer_count = {},
                                const VideoEncodeRateControlLayerInfoKHR *p_layers = {},
                                uint32_t virtual_buffer_size_in_ms = {},
                                uint32_t initial_virtual_buffer_size_in_ms = {},
                                const void *next = {})
    : flags_(flags), rate_control_mode_(rate_control_mode), layer_count_(layer_count), p_layers_(p_layers),
      virtual_buffer_size_in_ms_(virtual_buffer_size_in_ms), initial_virtual_buffer_size_in_ms_(initial_virtual_buffer_size_in_ms),
      next_(next) {}

  VideoEncodeRateControlInfoKHR(const native_type &rhs)
    : VideoEncodeRateControlInfoKHR(std::bit_cast<VideoEncodeRateControlInfoKHR>(rhs)) {}

  VideoEncodeRateControlInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeRateControlInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeRateControlInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR;
  const void *next_;
  VideoEncodeRateControlMask flags_;
  VideoEncodeRateControlModeMaskBit rate_control_mode_;
  uint32_t layer_count_;
  const VideoEncodeRateControlLayerInfoKHR *p_layers_;
  uint32_t virtual_buffer_size_in_ms_;
  uint32_t initial_virtual_buffer_size_in_ms_;
};

struct VideoEncodeQualityLevelPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR;

  using native_type = VkVideoEncodeQualityLevelPropertiesKHR;

  VideoEncodeQualityLevelPropertiesKHR() = default;

  VideoEncodeQualityLevelPropertiesKHR(const native_type &rhs)
    : VideoEncodeQualityLevelPropertiesKHR(std::bit_cast<VideoEncodeQualityLevelPropertiesKHR>(rhs)) {}

  VideoEncodeQualityLevelPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeQualityLevelPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeQualityLevelPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR;
  void *next_ = {};
  VideoEncodeRateControlModeMaskBit preferred_rate_control_mode_ = {};
  uint32_t preferred_rate_control_layer_count_ = {};
};

struct VideoEncodeH264SessionParametersGetInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR;

  using native_type = VkVideoEncodeH264SessionParametersGetInfoKHR;

  VideoEncodeH264SessionParametersGetInfoKHR(
    bool32 write_std_sps = {}, bool32 write_std_pps = {}, uint32_t std_spsid = {}, uint32_t std_ppsid = {}, const void *next = {})
    : write_std_sps_(write_std_sps), write_std_pps_(write_std_pps), std_spsid_(std_spsid), std_ppsid_(std_ppsid), next_(next) {}

  VideoEncodeH264SessionParametersGetInfoKHR(const native_type &rhs)
    : VideoEncodeH264SessionParametersGetInfoKHR(std::bit_cast<VideoEncodeH264SessionParametersGetInfoKHR>(rhs)) {}

  VideoEncodeH264SessionParametersGetInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264SessionParametersGetInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264SessionParametersGetInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR;
  const void *next_;
  bool32 write_std_sps_;
  bool32 write_std_pps_;
  uint32_t std_spsid_;
  uint32_t std_ppsid_;
};

struct VideoProfileInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_PROFILE_INFO_KHR;

  using native_type = VkVideoProfileInfoKHR;

  VideoProfileInfoKHR(VideoCodecOperationMaskBit video_codec_operation = VideoCodecOperationMaskBit::E_NONE_KHR,
                      VideoChromaSubsamplingMask chroma_subsampling = {},
                      VideoComponentBitDepthMask luma_bit_depth = {},
                      VideoComponentBitDepthMask chroma_bit_depth = {},
                      const void *next = {})
    : video_codec_operation_(video_codec_operation), chroma_subsampling_(chroma_subsampling), luma_bit_depth_(luma_bit_depth),
      chroma_bit_depth_(chroma_bit_depth), next_(next) {}

  VideoProfileInfoKHR(const native_type &rhs) : VideoProfileInfoKHR(std::bit_cast<VideoProfileInfoKHR>(rhs)) {}

  VideoProfileInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoProfileInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoProfileInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_PROFILE_INFO_KHR;
  const void *next_;
  VideoCodecOperationMaskBit video_codec_operation_;
  VideoChromaSubsamplingMask chroma_subsampling_;
  VideoComponentBitDepthMask luma_bit_depth_;
  VideoComponentBitDepthMask chroma_bit_depth_;
};

struct PhysicalDeviceVideoEncodeQualityLevelInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR;

  using native_type = VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;

  PhysicalDeviceVideoEncodeQualityLevelInfoKHR(const VideoProfileInfoKHR *p_video_profile = {},
                                               uint32_t quality_level = {},
                                               const void *next = {})
    : p_video_profile_(p_video_profile), quality_level_(quality_level), next_(next) {}

  PhysicalDeviceVideoEncodeQualityLevelInfoKHR(const native_type &rhs)
    : PhysicalDeviceVideoEncodeQualityLevelInfoKHR(std::bit_cast<PhysicalDeviceVideoEncodeQualityLevelInfoKHR>(rhs)) {}

  PhysicalDeviceVideoEncodeQualityLevelInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVideoEncodeQualityLevelInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVideoEncodeQualityLevelInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR;
  const void *next_;
  const VideoProfileInfoKHR *p_video_profile_;
  uint32_t quality_level_;
};

struct PhysicalDeviceProvokingVertexPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceProvokingVertexPropertiesEXT;

  PhysicalDeviceProvokingVertexPropertiesEXT() = default;

  PhysicalDeviceProvokingVertexPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceProvokingVertexPropertiesEXT(std::bit_cast<PhysicalDeviceProvokingVertexPropertiesEXT>(rhs)) {}

  PhysicalDeviceProvokingVertexPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceProvokingVertexPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceProvokingVertexPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;
  void *next_ = {};
  bool32 provoking_vertex_mode_per_pipeline_ = {};
  bool32 transform_feedback_preserves_triangle_fan_provoking_vertex_ = {};
};

struct QueryPoolVideoEncodeFeedbackCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR;

  using native_type = VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;

  QueryPoolVideoEncodeFeedbackCreateInfoKHR(VideoEncodeFeedbackMask encode_feedback_flags = {}, const void *next = {})
    : encode_feedback_flags_(encode_feedback_flags), next_(next) {}

  QueryPoolVideoEncodeFeedbackCreateInfoKHR(const native_type &rhs)
    : QueryPoolVideoEncodeFeedbackCreateInfoKHR(std::bit_cast<QueryPoolVideoEncodeFeedbackCreateInfoKHR>(rhs)) {}

  QueryPoolVideoEncodeFeedbackCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueryPoolVideoEncodeFeedbackCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const QueryPoolVideoEncodeFeedbackCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR;
  const void *next_;
  VideoEncodeFeedbackMask encode_feedback_flags_;
};

struct VideoPictureResourceInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_PICTURE_RESOURCE_INFO_KHR;

  using native_type = VkVideoPictureResourceInfoKHR;

  VideoPictureResourceInfoKHR(Offset2D coded_offset = {},
                              Extent2D coded_extent = {},
                              uint32_t base_array_layer = {},
                              VkImageView image_view_binding = {},
                              const void *next = {})
    : coded_offset_(coded_offset), coded_extent_(coded_extent), base_array_layer_(base_array_layer),
      image_view_binding_(image_view_binding), next_(next) {}

  VideoPictureResourceInfoKHR(const native_type &rhs) : VideoPictureResourceInfoKHR(std::bit_cast<VideoPictureResourceInfoKHR>(rhs)) {}

  VideoPictureResourceInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoPictureResourceInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoPictureResourceInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_PICTURE_RESOURCE_INFO_KHR;
  const void *next_;
  Offset2D coded_offset_;
  Extent2D coded_extent_;
  uint32_t base_array_layer_;
  VkImageView image_view_binding_;
};

struct VideoReferenceSlotInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_REFERENCE_SLOT_INFO_KHR;

  using native_type = VkVideoReferenceSlotInfoKHR;

  VideoReferenceSlotInfoKHR(int32_t slot_index = {}, const VideoPictureResourceInfoKHR *p_picture_resource = {}, const void *next = {})
    : slot_index_(slot_index), p_picture_resource_(p_picture_resource), next_(next) {}

  VideoReferenceSlotInfoKHR(const native_type &rhs) : VideoReferenceSlotInfoKHR(std::bit_cast<VideoReferenceSlotInfoKHR>(rhs)) {}

  VideoReferenceSlotInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoReferenceSlotInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoReferenceSlotInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_REFERENCE_SLOT_INFO_KHR;
  const void *next_;
  int32_t slot_index_;
  const VideoPictureResourceInfoKHR *p_picture_resource_;
};

struct VideoEncodeInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_INFO_KHR;

  using native_type = VkVideoEncodeInfoKHR;

  VideoEncodeInfoKHR(VideoEncodeMask flags = {},
                     VkBuffer dst_buffer = {},
                     DeviceSize dst_buffer_offset = {},
                     DeviceSize dst_buffer_range = {},
                     VideoPictureResourceInfoKHR src_picture_resource = {},
                     const VideoReferenceSlotInfoKHR *p_setup_reference_slot = {},
                     uint32_t reference_slot_count = {},
                     const VideoReferenceSlotInfoKHR *p_reference_slots = {},
                     uint32_t preceding_externally_encoded_bytes = {},
                     const void *next = {})
    : flags_(flags), dst_buffer_(dst_buffer), dst_buffer_offset_(dst_buffer_offset), dst_buffer_range_(dst_buffer_range),
      src_picture_resource_(src_picture_resource), p_setup_reference_slot_(p_setup_reference_slot),
      reference_slot_count_(reference_slot_count), p_reference_slots_(p_reference_slots),
      preceding_externally_encoded_bytes_(preceding_externally_encoded_bytes), next_(next) {}

  VideoEncodeInfoKHR(const native_type &rhs) : VideoEncodeInfoKHR(std::bit_cast<VideoEncodeInfoKHR>(rhs)) {}

  VideoEncodeInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_INFO_KHR;
  const void *next_;
  VideoEncodeMask flags_;
  VkBuffer dst_buffer_;
  DeviceSize dst_buffer_offset_;
  DeviceSize dst_buffer_range_;
  VideoPictureResourceInfoKHR src_picture_resource_;
  const VideoReferenceSlotInfoKHR *p_setup_reference_slot_;
  uint32_t reference_slot_count_;
  const VideoReferenceSlotInfoKHR *p_reference_slots_;
  uint32_t preceding_externally_encoded_bytes_;
};

struct ComponentMapping {

  using native_type = VkComponentMapping;

  ComponentMapping(ComponentSwizzle r = ComponentSwizzle::E_IDENTITY,
                   ComponentSwizzle g = ComponentSwizzle::E_IDENTITY,
                   ComponentSwizzle b = ComponentSwizzle::E_IDENTITY,
                   ComponentSwizzle a = ComponentSwizzle::E_IDENTITY)
    : r_(r), g_(g), b_(b), a_(a) {}

  ComponentMapping(const native_type &rhs) : ComponentMapping(std::bit_cast<ComponentMapping>(rhs)) {}

  ComponentMapping &operator=(const native_type &rhs) {
    *this = std::bit_cast<ComponentMapping>(rhs);
    return *this;
  }

  auto operator<=>(const ComponentMapping &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ComponentSwizzle r_;
  ComponentSwizzle g_;
  ComponentSwizzle b_;
  ComponentSwizzle a_;
};

struct DeviceAddressBindingCallbackDataEXT {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT;

  using native_type = VkDeviceAddressBindingCallbackDataEXT;

  DeviceAddressBindingCallbackDataEXT(DeviceAddressBindingMask flags = {},
                                      DeviceAddress base_address = {},
                                      DeviceSize size = {},
                                      DeviceAddressBindingType binding_type = DeviceAddressBindingType::E_BIND_EXT,
                                      void *next = {})
    : flags_(flags), base_address_(base_address), size_(size), binding_type_(binding_type), next_(next) {}

  DeviceAddressBindingCallbackDataEXT(const native_type &rhs)
    : DeviceAddressBindingCallbackDataEXT(std::bit_cast<DeviceAddressBindingCallbackDataEXT>(rhs)) {}

  DeviceAddressBindingCallbackDataEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceAddressBindingCallbackDataEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceAddressBindingCallbackDataEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT;
  void *next_;
  DeviceAddressBindingMask flags_;
  DeviceAddress base_address_;
  DeviceSize size_;
  DeviceAddressBindingType binding_type_;
};

struct VideoEndCodingInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_END_CODING_INFO_KHR;

  using native_type = VkVideoEndCodingInfoKHR;

  VideoEndCodingInfoKHR(VideoEndCodingMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  VideoEndCodingInfoKHR(const native_type &rhs) : VideoEndCodingInfoKHR(std::bit_cast<VideoEndCodingInfoKHR>(rhs)) {}

  VideoEndCodingInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEndCodingInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEndCodingInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_END_CODING_INFO_KHR;
  const void *next_;
  VideoEndCodingMask flags_;
};

struct PhysicalDeviceOpacityMicromapFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT;

  using native_type = VkPhysicalDeviceOpacityMicromapFeaturesEXT;

  PhysicalDeviceOpacityMicromapFeaturesEXT(bool32 micromap = {},
                                           bool32 micromap_capture_replay = {},
                                           bool32 micromap_host_commands = {},
                                           void *next = {})
    : micromap_(micromap), micromap_capture_replay_(micromap_capture_replay), micromap_host_commands_(micromap_host_commands), next_(next) {
  }

  PhysicalDeviceOpacityMicromapFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceOpacityMicromapFeaturesEXT(std::bit_cast<PhysicalDeviceOpacityMicromapFeaturesEXT>(rhs)) {}

  PhysicalDeviceOpacityMicromapFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceOpacityMicromapFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceOpacityMicromapFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT;
  void *next_;
  bool32 micromap_;
  bool32 micromap_capture_replay_;
  bool32 micromap_host_commands_;
};

struct VideoBeginCodingInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_BEGIN_CODING_INFO_KHR;

  using native_type = VkVideoBeginCodingInfoKHR;

  VideoBeginCodingInfoKHR(VideoBeginCodingMask flags = {},
                          VkVideoSessionKHR video_session = {},
                          VkVideoSessionParametersKHR video_session_parameters = {},
                          uint32_t reference_slot_count = {},
                          const VideoReferenceSlotInfoKHR *p_reference_slots = {},
                          const void *next = {})
    : flags_(flags), video_session_(video_session), video_session_parameters_(video_session_parameters),
      reference_slot_count_(reference_slot_count), p_reference_slots_(p_reference_slots), next_(next) {}

  VideoBeginCodingInfoKHR(const native_type &rhs) : VideoBeginCodingInfoKHR(std::bit_cast<VideoBeginCodingInfoKHR>(rhs)) {}

  VideoBeginCodingInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoBeginCodingInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoBeginCodingInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_BEGIN_CODING_INFO_KHR;
  const void *next_;
  VideoBeginCodingMask flags_;
  VkVideoSessionKHR video_session_;
  VkVideoSessionParametersKHR video_session_parameters_;
  uint32_t reference_slot_count_;
  const VideoReferenceSlotInfoKHR *p_reference_slots_;
};

struct DeviceFaultCountsEXT {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_FAULT_COUNTS_EXT;

  using native_type = VkDeviceFaultCountsEXT;

  DeviceFaultCountsEXT(uint32_t address_info_count = {},
                       uint32_t vendor_info_count = {},
                       DeviceSize vendor_binary_size = {},
                       void *next = {})
    : address_info_count_(address_info_count), vendor_info_count_(vendor_info_count), vendor_binary_size_(vendor_binary_size), next_(next) {
  }

  DeviceFaultCountsEXT(const native_type &rhs) : DeviceFaultCountsEXT(std::bit_cast<DeviceFaultCountsEXT>(rhs)) {}

  DeviceFaultCountsEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceFaultCountsEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceFaultCountsEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_FAULT_COUNTS_EXT;
  void *next_;
  uint32_t address_info_count_;
  uint32_t vendor_info_count_;
  DeviceSize vendor_binary_size_;
};

struct VideoEncodeSessionParametersGetInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR;

  using native_type = VkVideoEncodeSessionParametersGetInfoKHR;

  VideoEncodeSessionParametersGetInfoKHR(VkVideoSessionParametersKHR video_session_parameters = {}, const void *next = {})
    : video_session_parameters_(video_session_parameters), next_(next) {}

  VideoEncodeSessionParametersGetInfoKHR(const native_type &rhs)
    : VideoEncodeSessionParametersGetInfoKHR(std::bit_cast<VideoEncodeSessionParametersGetInfoKHR>(rhs)) {}

  VideoEncodeSessionParametersGetInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeSessionParametersGetInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeSessionParametersGetInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR;
  const void *next_;
  VkVideoSessionParametersKHR video_session_parameters_;
};

struct VideoSessionParametersUpdateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;

  using native_type = VkVideoSessionParametersUpdateInfoKHR;

  VideoSessionParametersUpdateInfoKHR(uint32_t update_sequence_count = {}, const void *next = {})
    : update_sequence_count_(update_sequence_count), next_(next) {}

  VideoSessionParametersUpdateInfoKHR(const native_type &rhs)
    : VideoSessionParametersUpdateInfoKHR(std::bit_cast<VideoSessionParametersUpdateInfoKHR>(rhs)) {}

  VideoSessionParametersUpdateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoSessionParametersUpdateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoSessionParametersUpdateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
  const void *next_;
  uint32_t update_sequence_count_;
};

struct ExtensionProperties {

  using native_type = VkExtensionProperties;

  ExtensionProperties() = default;

  ExtensionProperties(const native_type &rhs) : ExtensionProperties(std::bit_cast<ExtensionProperties>(rhs)) {}

  ExtensionProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExtensionProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ExtensionProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  std::array<char, VK_MAX_EXTENSION_NAME_SIZE> extension_name_ = {};
  uint32_t spec_version_ = {};
};

struct VideoSessionCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_SESSION_CREATE_INFO_KHR;

  using native_type = VkVideoSessionCreateInfoKHR;

  VideoSessionCreateInfoKHR(uint32_t queue_family_index = {},
                            VideoSessionCreateMask flags = {},
                            const VideoProfileInfoKHR *p_video_profile = {},
                            Format picture_format = Format::E_UNDEFINED,
                            Extent2D max_coded_extent = {},
                            Format reference_picture_format = Format::E_UNDEFINED,
                            uint32_t max_dpb_slots = {},
                            uint32_t max_active_reference_pictures = {},
                            const ExtensionProperties *p_std_header_version = {},
                            const void *next = {})
    : queue_family_index_(queue_family_index), flags_(flags), p_video_profile_(p_video_profile), picture_format_(picture_format),
      max_coded_extent_(max_coded_extent), reference_picture_format_(reference_picture_format), max_dpb_slots_(max_dpb_slots),
      max_active_reference_pictures_(max_active_reference_pictures), p_std_header_version_(p_std_header_version), next_(next) {}

  VideoSessionCreateInfoKHR(const native_type &rhs) : VideoSessionCreateInfoKHR(std::bit_cast<VideoSessionCreateInfoKHR>(rhs)) {}

  VideoSessionCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoSessionCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoSessionCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_SESSION_CREATE_INFO_KHR;
  const void *next_;
  uint32_t queue_family_index_;
  VideoSessionCreateMask flags_;
  const VideoProfileInfoKHR *p_video_profile_;
  Format picture_format_;
  Extent2D max_coded_extent_;
  Format reference_picture_format_;
  uint32_t max_dpb_slots_;
  uint32_t max_active_reference_pictures_;
  const ExtensionProperties *p_std_header_version_;
};

struct VideoDecodeAV1PictureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_AV1_PICTURE_INFO_KHR;

  using native_type = VkVideoDecodeAV1PictureInfoKHR;

  VideoDecodeAV1PictureInfoKHR(const StdVideoDecodeAV1PictureInfo *p_std_picture_info = {},
                               const std::array<int32_t, VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR> &reference_name_slot_indices = {},
                               uint32_t frame_header_offset = {},
                               uint32_t tile_count = {},
                               const uint32_t *p_tile_offsets = {},
                               const uint32_t *p_tile_sizes = {},
                               const void *next = {})
    : p_std_picture_info_(p_std_picture_info), reference_name_slot_indices_(reference_name_slot_indices),
      frame_header_offset_(frame_header_offset), tile_count_(tile_count), p_tile_offsets_(p_tile_offsets), p_tile_sizes_(p_tile_sizes),
      next_(next) {}

  VideoDecodeAV1PictureInfoKHR(const native_type &rhs) : VideoDecodeAV1PictureInfoKHR(std::bit_cast<VideoDecodeAV1PictureInfoKHR>(rhs)) {}

  VideoDecodeAV1PictureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeAV1PictureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeAV1PictureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_AV1_PICTURE_INFO_KHR;
  const void *next_;
  const StdVideoDecodeAV1PictureInfo *p_std_picture_info_;
  std::array<int32_t, VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR> reference_name_slot_indices_;
  uint32_t frame_header_offset_;
  uint32_t tile_count_;
  const uint32_t *p_tile_offsets_;
  const uint32_t *p_tile_sizes_;
};

struct VideoDecodeAV1SessionParametersCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR;

  using native_type = VkVideoDecodeAV1SessionParametersCreateInfoKHR;

  VideoDecodeAV1SessionParametersCreateInfoKHR(const StdVideoAV1SequenceHeader *p_std_sequence_header = {}, const void *next = {})
    : p_std_sequence_header_(p_std_sequence_header), next_(next) {}

  VideoDecodeAV1SessionParametersCreateInfoKHR(const native_type &rhs)
    : VideoDecodeAV1SessionParametersCreateInfoKHR(std::bit_cast<VideoDecodeAV1SessionParametersCreateInfoKHR>(rhs)) {}

  VideoDecodeAV1SessionParametersCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeAV1SessionParametersCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeAV1SessionParametersCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR;
  const void *next_;
  const StdVideoAV1SequenceHeader *p_std_sequence_header_;
};

struct VideoDecodeAV1CapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_AV1_CAPABILITIES_KHR;

  using native_type = VkVideoDecodeAV1CapabilitiesKHR;

  VideoDecodeAV1CapabilitiesKHR() = default;

  VideoDecodeAV1CapabilitiesKHR(const native_type &rhs)
    : VideoDecodeAV1CapabilitiesKHR(std::bit_cast<VideoDecodeAV1CapabilitiesKHR>(rhs)) {}

  VideoDecodeAV1CapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeAV1CapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeAV1CapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_AV1_CAPABILITIES_KHR;
  void *next_ = {};
  StdVideoAV1Level max_level_ = {};
};

struct VideoDecodeH265DpbSlotInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR;

  using native_type = VkVideoDecodeH265DpbSlotInfoKHR;

  VideoDecodeH265DpbSlotInfoKHR(const StdVideoDecodeH265ReferenceInfo *p_std_reference_info = {}, const void *next = {})
    : p_std_reference_info_(p_std_reference_info), next_(next) {}

  VideoDecodeH265DpbSlotInfoKHR(const native_type &rhs)
    : VideoDecodeH265DpbSlotInfoKHR(std::bit_cast<VideoDecodeH265DpbSlotInfoKHR>(rhs)) {}

  VideoDecodeH265DpbSlotInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH265DpbSlotInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH265DpbSlotInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR;
  const void *next_;
  const StdVideoDecodeH265ReferenceInfo *p_std_reference_info_;
};

struct VideoDecodeH265ProfileInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H265_PROFILE_INFO_KHR;

  using native_type = VkVideoDecodeH265ProfileInfoKHR;

  VideoDecodeH265ProfileInfoKHR(StdVideoH265ProfileIdc std_profile_idc = {}, const void *next = {})
    : std_profile_idc_(std_profile_idc), next_(next) {}

  VideoDecodeH265ProfileInfoKHR(const native_type &rhs)
    : VideoDecodeH265ProfileInfoKHR(std::bit_cast<VideoDecodeH265ProfileInfoKHR>(rhs)) {}

  VideoDecodeH265ProfileInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH265ProfileInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH265ProfileInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H265_PROFILE_INFO_KHR;
  const void *next_;
  StdVideoH265ProfileIdc std_profile_idc_;
};

struct VideoDecodeH264PictureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H264_PICTURE_INFO_KHR;

  using native_type = VkVideoDecodeH264PictureInfoKHR;

  VideoDecodeH264PictureInfoKHR(const StdVideoDecodeH264PictureInfo *p_std_picture_info = {},
                                uint32_t slice_count = {},
                                const uint32_t *p_slice_offsets = {},
                                const void *next = {})
    : p_std_picture_info_(p_std_picture_info), slice_count_(slice_count), p_slice_offsets_(p_slice_offsets), next_(next) {}

  VideoDecodeH264PictureInfoKHR(const native_type &rhs)
    : VideoDecodeH264PictureInfoKHR(std::bit_cast<VideoDecodeH264PictureInfoKHR>(rhs)) {}

  VideoDecodeH264PictureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH264PictureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH264PictureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H264_PICTURE_INFO_KHR;
  const void *next_;
  const StdVideoDecodeH264PictureInfo *p_std_picture_info_;
  uint32_t slice_count_;
  const uint32_t *p_slice_offsets_;
};

struct PhysicalDeviceDescriptorBufferFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDescriptorBufferFeaturesEXT;

  PhysicalDeviceDescriptorBufferFeaturesEXT(bool32 descriptor_buffer = {},
                                            bool32 descriptor_buffer_capture_replay = {},
                                            bool32 descriptor_buffer_image_layout_ignored = {},
                                            bool32 descriptor_buffer_push_descriptors = {},
                                            void *next = {})
    : descriptor_buffer_(descriptor_buffer), descriptor_buffer_capture_replay_(descriptor_buffer_capture_replay),
      descriptor_buffer_image_layout_ignored_(descriptor_buffer_image_layout_ignored),
      descriptor_buffer_push_descriptors_(descriptor_buffer_push_descriptors), next_(next) {}

  PhysicalDeviceDescriptorBufferFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDescriptorBufferFeaturesEXT(std::bit_cast<PhysicalDeviceDescriptorBufferFeaturesEXT>(rhs)) {}

  PhysicalDeviceDescriptorBufferFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorBufferFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorBufferFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT;
  void *next_;
  bool32 descriptor_buffer_;
  bool32 descriptor_buffer_capture_replay_;
  bool32 descriptor_buffer_image_layout_ignored_;
  bool32 descriptor_buffer_push_descriptors_;
};

struct VideoDecodeH264SessionParametersAddInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;

  using native_type = VkVideoDecodeH264SessionParametersAddInfoKHR;

  VideoDecodeH264SessionParametersAddInfoKHR(uint32_t std_spscount = {},
                                             const StdVideoH264SequenceParameterSet *p_std_spss = {},
                                             uint32_t std_ppscount = {},
                                             const StdVideoH264PictureParameterSet *p_std_ppss = {},
                                             const void *next = {})
    : std_spscount_(std_spscount), p_std_spss_(p_std_spss), std_ppscount_(std_ppscount), p_std_ppss_(p_std_ppss), next_(next) {}

  VideoDecodeH264SessionParametersAddInfoKHR(const native_type &rhs)
    : VideoDecodeH264SessionParametersAddInfoKHR(std::bit_cast<VideoDecodeH264SessionParametersAddInfoKHR>(rhs)) {}

  VideoDecodeH264SessionParametersAddInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH264SessionParametersAddInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH264SessionParametersAddInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;
  const void *next_;
  uint32_t std_spscount_;
  const StdVideoH264SequenceParameterSet *p_std_spss_;
  uint32_t std_ppscount_;
  const StdVideoH264PictureParameterSet *p_std_ppss_;
};

struct VideoDecodeH264ProfileInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H264_PROFILE_INFO_KHR;

  using native_type = VkVideoDecodeH264ProfileInfoKHR;

  VideoDecodeH264ProfileInfoKHR(StdVideoH264ProfileIdc std_profile_idc = {},
                                VideoDecodeH264PictureLayoutMaskBit picture_layout = VideoDecodeH264PictureLayoutMaskBit::E_PROGRESSIVE_KHR,
                                const void *next = {})
    : std_profile_idc_(std_profile_idc), picture_layout_(picture_layout), next_(next) {}

  VideoDecodeH264ProfileInfoKHR(const native_type &rhs)
    : VideoDecodeH264ProfileInfoKHR(std::bit_cast<VideoDecodeH264ProfileInfoKHR>(rhs)) {}

  VideoDecodeH264ProfileInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH264ProfileInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH264ProfileInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H264_PROFILE_INFO_KHR;
  const void *next_;
  StdVideoH264ProfileIdc std_profile_idc_;
  VideoDecodeH264PictureLayoutMaskBit picture_layout_;
};

struct VideoDecodeUsageInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_USAGE_INFO_KHR;

  using native_type = VkVideoDecodeUsageInfoKHR;

  VideoDecodeUsageInfoKHR(VideoDecodeUsageMask video_usage_hints = {}, const void *next = {})
    : video_usage_hints_(video_usage_hints), next_(next) {}

  VideoDecodeUsageInfoKHR(const native_type &rhs) : VideoDecodeUsageInfoKHR(std::bit_cast<VideoDecodeUsageInfoKHR>(rhs)) {}

  VideoDecodeUsageInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeUsageInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeUsageInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_USAGE_INFO_KHR;
  const void *next_;
  VideoDecodeUsageMask video_usage_hints_;
};

struct VideoInlineQueryInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_INLINE_QUERY_INFO_KHR;

  using native_type = VkVideoInlineQueryInfoKHR;

  VideoInlineQueryInfoKHR(VkQueryPool query_pool = {}, uint32_t first_query = {}, uint32_t query_count = {}, const void *next = {})
    : query_pool_(query_pool), first_query_(first_query), query_count_(query_count), next_(next) {}

  VideoInlineQueryInfoKHR(const native_type &rhs) : VideoInlineQueryInfoKHR(std::bit_cast<VideoInlineQueryInfoKHR>(rhs)) {}

  VideoInlineQueryInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoInlineQueryInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoInlineQueryInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_INLINE_QUERY_INFO_KHR;
  const void *next_;
  VkQueryPool query_pool_;
  uint32_t first_query_;
  uint32_t query_count_;
};

struct VideoCapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_CAPABILITIES_KHR;

  using native_type = VkVideoCapabilitiesKHR;

  VideoCapabilitiesKHR() = default;

  VideoCapabilitiesKHR(const native_type &rhs) : VideoCapabilitiesKHR(std::bit_cast<VideoCapabilitiesKHR>(rhs)) {}

  VideoCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_CAPABILITIES_KHR;
  void *next_ = {};
  VideoCapabilityMask flags_ = {};
  DeviceSize min_bitstream_buffer_offset_alignment_ = {};
  DeviceSize min_bitstream_buffer_size_alignment_ = {};
  Extent2D picture_access_granularity_ = {};
  Extent2D min_coded_extent_ = {};
  Extent2D max_coded_extent_ = {};
  uint32_t max_dpb_slots_ = {};
  uint32_t max_active_reference_pictures_ = {};
  ExtensionProperties std_header_version_ = {};
};

struct VideoFormatPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_FORMAT_PROPERTIES_KHR;

  using native_type = VkVideoFormatPropertiesKHR;

  VideoFormatPropertiesKHR() = default;

  VideoFormatPropertiesKHR(const native_type &rhs) : VideoFormatPropertiesKHR(std::bit_cast<VideoFormatPropertiesKHR>(rhs)) {}

  VideoFormatPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoFormatPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoFormatPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_FORMAT_PROPERTIES_KHR;
  void *next_ = {};
  Format format_ = {};
  ComponentMapping component_mapping_ = {};
  ImageCreateMask image_create_flags_ = {};
  ImageType image_type_ = {};
  ImageTiling image_tiling_ = {};
  ImageUsageMask image_usage_flags_ = {};
};

struct QueueFamilyQueryResultStatusPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR;

  using native_type = VkQueueFamilyQueryResultStatusPropertiesKHR;

  QueueFamilyQueryResultStatusPropertiesKHR() = default;

  QueueFamilyQueryResultStatusPropertiesKHR(const native_type &rhs)
    : QueueFamilyQueryResultStatusPropertiesKHR(std::bit_cast<QueueFamilyQueryResultStatusPropertiesKHR>(rhs)) {}

  QueueFamilyQueryResultStatusPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyQueryResultStatusPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyQueryResultStatusPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR;
  void *next_ = {};
  bool32 query_result_status_support_ = {};
};

struct QueueFamilyVideoPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR;

  using native_type = VkQueueFamilyVideoPropertiesKHR;

  QueueFamilyVideoPropertiesKHR() = default;

  QueueFamilyVideoPropertiesKHR(const native_type &rhs)
    : QueueFamilyVideoPropertiesKHR(std::bit_cast<QueueFamilyVideoPropertiesKHR>(rhs)) {}

  QueueFamilyVideoPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyVideoPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyVideoPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR;
  void *next_ = {};
  VideoCodecOperationMask video_codec_operations_ = {};
};

struct PhysicalDevicePipelineProtectedAccessFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT;

  using native_type = VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;

  PhysicalDevicePipelineProtectedAccessFeaturesEXT(bool32 pipeline_protected_access = {}, void *next = {})
    : pipeline_protected_access_(pipeline_protected_access), next_(next) {}

  PhysicalDevicePipelineProtectedAccessFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePipelineProtectedAccessFeaturesEXT(std::bit_cast<PhysicalDevicePipelineProtectedAccessFeaturesEXT>(rhs)) {}

  PhysicalDevicePipelineProtectedAccessFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelineProtectedAccessFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelineProtectedAccessFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT;
  void *next_;
  bool32 pipeline_protected_access_;
};

struct MultisampledRenderToSingleSampledInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT;

  using native_type = VkMultisampledRenderToSingleSampledInfoEXT;

  MultisampledRenderToSingleSampledInfoEXT(bool32 multisampled_render_to_single_sampled_enable = {},
                                           SampleCountMaskBit rasterization_samples = {},
                                           const void *next = {})
    : multisampled_render_to_single_sampled_enable_(multisampled_render_to_single_sampled_enable),
      rasterization_samples_(rasterization_samples), next_(next) {}

  MultisampledRenderToSingleSampledInfoEXT(const native_type &rhs)
    : MultisampledRenderToSingleSampledInfoEXT(std::bit_cast<MultisampledRenderToSingleSampledInfoEXT>(rhs)) {}

  MultisampledRenderToSingleSampledInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MultisampledRenderToSingleSampledInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MultisampledRenderToSingleSampledInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT;
  const void *next_;
  bool32 multisampled_render_to_single_sampled_enable_;
  SampleCountMaskBit rasterization_samples_;
};

struct SubpassResolvePerformanceQueryEXT {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT;

  using native_type = VkSubpassResolvePerformanceQueryEXT;

  SubpassResolvePerformanceQueryEXT() = default;

  SubpassResolvePerformanceQueryEXT(const native_type &rhs)
    : SubpassResolvePerformanceQueryEXT(std::bit_cast<SubpassResolvePerformanceQueryEXT>(rhs)) {}

  SubpassResolvePerformanceQueryEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassResolvePerformanceQueryEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassResolvePerformanceQueryEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT;
  void *next_ = {};
  bool32 optimal_ = {};
};

struct PhysicalDeviceMapMemoryPlacedPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceMapMemoryPlacedPropertiesEXT;

  PhysicalDeviceMapMemoryPlacedPropertiesEXT() = default;

  PhysicalDeviceMapMemoryPlacedPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceMapMemoryPlacedPropertiesEXT(std::bit_cast<PhysicalDeviceMapMemoryPlacedPropertiesEXT>(rhs)) {}

  PhysicalDeviceMapMemoryPlacedPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMapMemoryPlacedPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMapMemoryPlacedPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT;
  void *next_ = {};
  DeviceSize min_placed_memory_map_alignment_ = {};
};

struct PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT;

  using native_type = VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;

  PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(bool32 multisampled_render_to_single_sampled = {}, void *next = {})
    : multisampled_render_to_single_sampled_(multisampled_render_to_single_sampled), next_(next) {}

  PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
        std::bit_cast<PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>(rhs)) {}

  PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT;
  void *next_;
  bool32 multisampled_render_to_single_sampled_;
};

struct HostImageCopyDevicePerformanceQueryEXT {

  static constexpr StructureType structure_type = StructureType::E_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT;

  using native_type = VkHostImageCopyDevicePerformanceQueryEXT;

  HostImageCopyDevicePerformanceQueryEXT() = default;

  HostImageCopyDevicePerformanceQueryEXT(const native_type &rhs)
    : HostImageCopyDevicePerformanceQueryEXT(std::bit_cast<HostImageCopyDevicePerformanceQueryEXT>(rhs)) {}

  HostImageCopyDevicePerformanceQueryEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<HostImageCopyDevicePerformanceQueryEXT>(rhs);
    return *this;
  }

  auto operator<=>(const HostImageCopyDevicePerformanceQueryEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT;
  void *next_ = {};
  bool32 optimal_device_access_ = {};
  bool32 identical_memory_layout_ = {};
};

struct ImageSubresourceLayers {

  using native_type = VkImageSubresourceLayers;

  ImageSubresourceLayers(ImageAspectMask aspect_mask = {},
                         uint32_t mip_level = {},
                         uint32_t base_array_layer = {},
                         uint32_t layer_count = {})
    : aspect_mask_(aspect_mask), mip_level_(mip_level), base_array_layer_(base_array_layer), layer_count_(layer_count) {}

  ImageSubresourceLayers(const native_type &rhs) : ImageSubresourceLayers(std::bit_cast<ImageSubresourceLayers>(rhs)) {}

  ImageSubresourceLayers &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageSubresourceLayers>(rhs);
    return *this;
  }

  auto operator<=>(const ImageSubresourceLayers &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageAspectMask aspect_mask_;
  uint32_t mip_level_;
  uint32_t base_array_layer_;
  uint32_t layer_count_;
};

struct Offset3D {

  using native_type = VkOffset3D;

  Offset3D(int32_t x = {}, int32_t y = {}, int32_t z = {}) : x_(x), y_(y), z_(z) {}

  Offset3D(const native_type &rhs) : Offset3D(std::bit_cast<Offset3D>(rhs)) {}

  Offset3D &operator=(const native_type &rhs) {
    *this = std::bit_cast<Offset3D>(rhs);
    return *this;
  }

  auto operator<=>(const Offset3D &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  int32_t x_;
  int32_t y_;
  int32_t z_;
};

struct ImageToMemoryCopyEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_TO_MEMORY_COPY_EXT;

  using native_type = VkImageToMemoryCopyEXT;

  ImageToMemoryCopyEXT(void *p_host_pointer = {},
                       uint32_t memory_row_length = {},
                       uint32_t memory_image_height = {},
                       ImageSubresourceLayers image_subresource = {},
                       Offset3D image_offset = {},
                       Extent3D image_extent = {},
                       const void *next = {})
    : p_host_pointer_(p_host_pointer), memory_row_length_(memory_row_length), memory_image_height_(memory_image_height),
      image_subresource_(image_subresource), image_offset_(image_offset), image_extent_(image_extent), next_(next) {}

  ImageToMemoryCopyEXT(const native_type &rhs) : ImageToMemoryCopyEXT(std::bit_cast<ImageToMemoryCopyEXT>(rhs)) {}

  ImageToMemoryCopyEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageToMemoryCopyEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageToMemoryCopyEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_TO_MEMORY_COPY_EXT;
  const void *next_;
  void *p_host_pointer_;
  uint32_t memory_row_length_;
  uint32_t memory_image_height_;
  ImageSubresourceLayers image_subresource_;
  Offset3D image_offset_;
  Extent3D image_extent_;
};

struct CopyImageToMemoryInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COPY_IMAGE_TO_MEMORY_INFO_EXT;

  using native_type = VkCopyImageToMemoryInfoEXT;

  CopyImageToMemoryInfoEXT(HostImageCopyMask flags = {},
                           VkImage src_image = {},
                           ImageLayout src_image_layout = ImageLayout::E_UNDEFINED,
                           uint32_t region_count = {},
                           const ImageToMemoryCopyEXT *p_regions = {},
                           const void *next = {})
    : flags_(flags), src_image_(src_image), src_image_layout_(src_image_layout), region_count_(region_count), p_regions_(p_regions),
      next_(next) {}

  CopyImageToMemoryInfoEXT(const native_type &rhs) : CopyImageToMemoryInfoEXT(std::bit_cast<CopyImageToMemoryInfoEXT>(rhs)) {}

  CopyImageToMemoryInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyImageToMemoryInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CopyImageToMemoryInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_IMAGE_TO_MEMORY_INFO_EXT;
  const void *next_;
  HostImageCopyMask flags_;
  VkImage src_image_;
  ImageLayout src_image_layout_;
  uint32_t region_count_;
  const ImageToMemoryCopyEXT *p_regions_;
};

struct PhysicalDeviceHostImageCopyPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceHostImageCopyPropertiesEXT;

  PhysicalDeviceHostImageCopyPropertiesEXT(uint32_t copy_src_layout_count = {},
                                           ImageLayout *p_copy_src_layouts = {},
                                           uint32_t copy_dst_layout_count = {},
                                           ImageLayout *p_copy_dst_layouts = {},
                                           const std::array<uint8_t, VK_UUID_SIZE> &optimal_tiling_layout_uuid = {},
                                           bool32 identical_memory_type_requirements = {},
                                           void *next = {})
    : copy_src_layout_count_(copy_src_layout_count), p_copy_src_layouts_(p_copy_src_layouts), copy_dst_layout_count_(copy_dst_layout_count),
      p_copy_dst_layouts_(p_copy_dst_layouts), optimal_tiling_layout_uuid_(optimal_tiling_layout_uuid),
      identical_memory_type_requirements_(identical_memory_type_requirements), next_(next) {}

  PhysicalDeviceHostImageCopyPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceHostImageCopyPropertiesEXT(std::bit_cast<PhysicalDeviceHostImageCopyPropertiesEXT>(rhs)) {}

  PhysicalDeviceHostImageCopyPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceHostImageCopyPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceHostImageCopyPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT;
  void *next_;
  uint32_t copy_src_layout_count_;
  ImageLayout *p_copy_src_layouts_;
  uint32_t copy_dst_layout_count_;
  ImageLayout *p_copy_dst_layouts_;
  std::array<uint8_t, VK_UUID_SIZE> optimal_tiling_layout_uuid_;
  bool32 identical_memory_type_requirements_;
};

struct VideoEncodeSessionParametersFeedbackInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;

  using native_type = VkVideoEncodeSessionParametersFeedbackInfoKHR;

  VideoEncodeSessionParametersFeedbackInfoKHR() = default;

  VideoEncodeSessionParametersFeedbackInfoKHR(const native_type &rhs)
    : VideoEncodeSessionParametersFeedbackInfoKHR(std::bit_cast<VideoEncodeSessionParametersFeedbackInfoKHR>(rhs)) {}

  VideoEncodeSessionParametersFeedbackInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeSessionParametersFeedbackInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeSessionParametersFeedbackInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;
  void *next_ = {};
  bool32 has_overrides_ = {};
};

struct PhysicalDeviceHostImageCopyFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT;

  using native_type = VkPhysicalDeviceHostImageCopyFeaturesEXT;

  PhysicalDeviceHostImageCopyFeaturesEXT(bool32 host_image_copy = {}, void *next = {}) : host_image_copy_(host_image_copy), next_(next) {}

  PhysicalDeviceHostImageCopyFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceHostImageCopyFeaturesEXT(std::bit_cast<PhysicalDeviceHostImageCopyFeaturesEXT>(rhs)) {}

  PhysicalDeviceHostImageCopyFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceHostImageCopyFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceHostImageCopyFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT;
  void *next_;
  bool32 host_image_copy_;
};

struct PhysicalDeviceSynchronization2Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;

  using native_type = VkPhysicalDeviceSynchronization2Features;

  PhysicalDeviceSynchronization2Features(bool32 synchronization2 = {}, void *next = {})
    : synchronization2_(synchronization2), next_(next) {}

  PhysicalDeviceSynchronization2Features(const native_type &rhs)
    : PhysicalDeviceSynchronization2Features(std::bit_cast<PhysicalDeviceSynchronization2Features>(rhs)) {}

  PhysicalDeviceSynchronization2Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSynchronization2Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSynchronization2Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
  void *next_;
  bool32 synchronization2_;
};

struct QueueFamilyCheckpointProperties2NV {

  static constexpr StructureType structure_type = StructureType::E_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;

  using native_type = VkQueueFamilyCheckpointProperties2NV;

  QueueFamilyCheckpointProperties2NV() = default;

  QueueFamilyCheckpointProperties2NV(const native_type &rhs)
    : QueueFamilyCheckpointProperties2NV(std::bit_cast<QueueFamilyCheckpointProperties2NV>(rhs)) {}

  QueueFamilyCheckpointProperties2NV &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyCheckpointProperties2NV>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyCheckpointProperties2NV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
  void *next_ = {};
  PipelineStageMask2 checkpoint_execution_stage_mask_ = {};
};

struct MemoryBarrier2 {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_BARRIER_2;

  using native_type = VkMemoryBarrier2;

  MemoryBarrier2(PipelineStageMask2 src_stage_mask = {},
                 AccessMask2 src_access_mask = {},
                 PipelineStageMask2 dst_stage_mask = {},
                 AccessMask2 dst_access_mask = {},
                 const void *next = {})
    : src_stage_mask_(src_stage_mask), src_access_mask_(src_access_mask), dst_stage_mask_(dst_stage_mask),
      dst_access_mask_(dst_access_mask), next_(next) {}

  MemoryBarrier2(const native_type &rhs) : MemoryBarrier2(std::bit_cast<MemoryBarrier2>(rhs)) {}

  MemoryBarrier2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryBarrier2>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryBarrier2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_BARRIER_2;
  const void *next_;
  PipelineStageMask2 src_stage_mask_;
  AccessMask2 src_access_mask_;
  PipelineStageMask2 dst_stage_mask_;
  AccessMask2 dst_access_mask_;
};

struct BufferMemoryBarrier2 {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_MEMORY_BARRIER_2;

  using native_type = VkBufferMemoryBarrier2;

  BufferMemoryBarrier2(PipelineStageMask2 src_stage_mask = {},
                       AccessMask2 src_access_mask = {},
                       PipelineStageMask2 dst_stage_mask = {},
                       AccessMask2 dst_access_mask = {},
                       uint32_t src_queue_family_index = {},
                       uint32_t dst_queue_family_index = {},
                       VkBuffer buffer = {},
                       DeviceSize offset = {},
                       DeviceSize size = {},
                       const void *next = {})
    : src_stage_mask_(src_stage_mask), src_access_mask_(src_access_mask), dst_stage_mask_(dst_stage_mask),
      dst_access_mask_(dst_access_mask), src_queue_family_index_(src_queue_family_index), dst_queue_family_index_(dst_queue_family_index),
      buffer_(buffer), offset_(offset), size_(size), next_(next) {}

  BufferMemoryBarrier2(const native_type &rhs) : BufferMemoryBarrier2(std::bit_cast<BufferMemoryBarrier2>(rhs)) {}

  BufferMemoryBarrier2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferMemoryBarrier2>(rhs);
    return *this;
  }

  auto operator<=>(const BufferMemoryBarrier2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_MEMORY_BARRIER_2;
  const void *next_;
  PipelineStageMask2 src_stage_mask_;
  AccessMask2 src_access_mask_;
  PipelineStageMask2 dst_stage_mask_;
  AccessMask2 dst_access_mask_;
  uint32_t src_queue_family_index_;
  uint32_t dst_queue_family_index_;
  VkBuffer buffer_;
  DeviceSize offset_;
  DeviceSize size_;
};

struct ImageSubresourceRange {

  using native_type = VkImageSubresourceRange;

  ImageSubresourceRange(ImageAspectMask aspect_mask = {},
                        uint32_t base_mip_level = {},
                        uint32_t level_count = {},
                        uint32_t base_array_layer = {},
                        uint32_t layer_count = {})
    : aspect_mask_(aspect_mask), base_mip_level_(base_mip_level), level_count_(level_count), base_array_layer_(base_array_layer),
      layer_count_(layer_count) {}

  ImageSubresourceRange(const native_type &rhs) : ImageSubresourceRange(std::bit_cast<ImageSubresourceRange>(rhs)) {}

  ImageSubresourceRange &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageSubresourceRange>(rhs);
    return *this;
  }

  auto operator<=>(const ImageSubresourceRange &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageAspectMask aspect_mask_;
  uint32_t base_mip_level_;
  uint32_t level_count_;
  uint32_t base_array_layer_;
  uint32_t layer_count_;
};

struct ImageMemoryBarrier2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_MEMORY_BARRIER_2;

  using native_type = VkImageMemoryBarrier2;

  ImageMemoryBarrier2(PipelineStageMask2 src_stage_mask = {},
                      AccessMask2 src_access_mask = {},
                      PipelineStageMask2 dst_stage_mask = {},
                      AccessMask2 dst_access_mask = {},
                      ImageLayout old_layout = ImageLayout::E_UNDEFINED,
                      ImageLayout new_layout = ImageLayout::E_UNDEFINED,
                      uint32_t src_queue_family_index = {},
                      uint32_t dst_queue_family_index = {},
                      VkImage image = {},
                      ImageSubresourceRange subresource_range = {},
                      const void *next = {})
    : src_stage_mask_(src_stage_mask), src_access_mask_(src_access_mask), dst_stage_mask_(dst_stage_mask),
      dst_access_mask_(dst_access_mask), old_layout_(old_layout), new_layout_(new_layout), src_queue_family_index_(src_queue_family_index),
      dst_queue_family_index_(dst_queue_family_index), image_(image), subresource_range_(subresource_range), next_(next) {}

  ImageMemoryBarrier2(const native_type &rhs) : ImageMemoryBarrier2(std::bit_cast<ImageMemoryBarrier2>(rhs)) {}

  ImageMemoryBarrier2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageMemoryBarrier2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageMemoryBarrier2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_MEMORY_BARRIER_2;
  const void *next_;
  PipelineStageMask2 src_stage_mask_;
  AccessMask2 src_access_mask_;
  PipelineStageMask2 dst_stage_mask_;
  AccessMask2 dst_access_mask_;
  ImageLayout old_layout_;
  ImageLayout new_layout_;
  uint32_t src_queue_family_index_;
  uint32_t dst_queue_family_index_;
  VkImage image_;
  ImageSubresourceRange subresource_range_;
};

struct DependencyInfo {

  static constexpr StructureType structure_type = StructureType::E_DEPENDENCY_INFO;

  using native_type = VkDependencyInfo;

  DependencyInfo(DependencyMask dependency_flags = {},
                 uint32_t memory_barrier_count = {},
                 const MemoryBarrier2 *p_memory_barriers = {},
                 uint32_t buffer_memory_barrier_count = {},
                 const BufferMemoryBarrier2 *p_buffer_memory_barriers = {},
                 uint32_t image_memory_barrier_count = {},
                 const ImageMemoryBarrier2 *p_image_memory_barriers = {},
                 const void *next = {})
    : dependency_flags_(dependency_flags), memory_barrier_count_(memory_barrier_count), p_memory_barriers_(p_memory_barriers),
      buffer_memory_barrier_count_(buffer_memory_barrier_count), p_buffer_memory_barriers_(p_buffer_memory_barriers),
      image_memory_barrier_count_(image_memory_barrier_count), p_image_memory_barriers_(p_image_memory_barriers), next_(next) {}

  DependencyInfo(const native_type &rhs) : DependencyInfo(std::bit_cast<DependencyInfo>(rhs)) {}

  DependencyInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DependencyInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DependencyInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEPENDENCY_INFO;
  const void *next_;
  DependencyMask dependency_flags_;
  uint32_t memory_barrier_count_;
  const MemoryBarrier2 *p_memory_barriers_;
  uint32_t buffer_memory_barrier_count_;
  const BufferMemoryBarrier2 *p_buffer_memory_barriers_;
  uint32_t image_memory_barrier_count_;
  const ImageMemoryBarrier2 *p_image_memory_barriers_;
};

struct VertexInputAttributeDescription2EXT {

  static constexpr StructureType structure_type = StructureType::E_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;

  using native_type = VkVertexInputAttributeDescription2EXT;

  VertexInputAttributeDescription2EXT(
    uint32_t location = {}, uint32_t binding = {}, Format format = Format::E_UNDEFINED, uint32_t offset = {}, void *next = {})
    : location_(location), binding_(binding), format_(format), offset_(offset), next_(next) {}

  VertexInputAttributeDescription2EXT(const native_type &rhs)
    : VertexInputAttributeDescription2EXT(std::bit_cast<VertexInputAttributeDescription2EXT>(rhs)) {}

  VertexInputAttributeDescription2EXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<VertexInputAttributeDescription2EXT>(rhs);
    return *this;
  }

  auto operator<=>(const VertexInputAttributeDescription2EXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
  void *next_;
  uint32_t location_;
  uint32_t binding_;
  Format format_;
  uint32_t offset_;
};

struct PhysicalDeviceExternalMemoryRDMAFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;

  using native_type = VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;

  PhysicalDeviceExternalMemoryRDMAFeaturesNV(bool32 external_memory_rdma = {}, void *next = {})
    : external_memory_rdma_(external_memory_rdma), next_(next) {}

  PhysicalDeviceExternalMemoryRDMAFeaturesNV(const native_type &rhs)
    : PhysicalDeviceExternalMemoryRDMAFeaturesNV(std::bit_cast<PhysicalDeviceExternalMemoryRDMAFeaturesNV>(rhs)) {}

  PhysicalDeviceExternalMemoryRDMAFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExternalMemoryRDMAFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExternalMemoryRDMAFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;
  void *next_;
  bool32 external_memory_rdma_;
};

struct PhysicalDeviceVertexInputDynamicStateFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;

  PhysicalDeviceVertexInputDynamicStateFeaturesEXT(bool32 vertex_input_dynamic_state = {}, void *next = {})
    : vertex_input_dynamic_state_(vertex_input_dynamic_state), next_(next) {}

  PhysicalDeviceVertexInputDynamicStateFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceVertexInputDynamicStateFeaturesEXT(std::bit_cast<PhysicalDeviceVertexInputDynamicStateFeaturesEXT>(rhs)) {}

  PhysicalDeviceVertexInputDynamicStateFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVertexInputDynamicStateFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVertexInputDynamicStateFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
  void *next_;
  bool32 vertex_input_dynamic_state_;
};

struct PipelineViewportDepthClipControlCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT;

  using native_type = VkPipelineViewportDepthClipControlCreateInfoEXT;

  PipelineViewportDepthClipControlCreateInfoEXT(bool32 negative_one_to_one = {}, const void *next = {})
    : negative_one_to_one_(negative_one_to_one), next_(next) {}

  PipelineViewportDepthClipControlCreateInfoEXT(const native_type &rhs)
    : PipelineViewportDepthClipControlCreateInfoEXT(std::bit_cast<PipelineViewportDepthClipControlCreateInfoEXT>(rhs)) {}

  PipelineViewportDepthClipControlCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportDepthClipControlCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportDepthClipControlCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT;
  const void *next_;
  bool32 negative_one_to_one_;
};

struct MutableDescriptorTypeListEXT {

  using native_type = VkMutableDescriptorTypeListEXT;

  MutableDescriptorTypeListEXT(uint32_t descriptor_type_count = {}, const DescriptorType *p_descriptor_types = {})
    : descriptor_type_count_(descriptor_type_count), p_descriptor_types_(p_descriptor_types) {}

  MutableDescriptorTypeListEXT(const native_type &rhs) : MutableDescriptorTypeListEXT(std::bit_cast<MutableDescriptorTypeListEXT>(rhs)) {}

  MutableDescriptorTypeListEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MutableDescriptorTypeListEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MutableDescriptorTypeListEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t descriptor_type_count_;
  const DescriptorType *p_descriptor_types_;
};

struct MutableDescriptorTypeCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;

  using native_type = VkMutableDescriptorTypeCreateInfoEXT;

  MutableDescriptorTypeCreateInfoEXT(uint32_t mutable_descriptor_type_list_count = {},
                                     const MutableDescriptorTypeListEXT *p_mutable_descriptor_type_lists = {},
                                     const void *next = {})
    : mutable_descriptor_type_list_count_(mutable_descriptor_type_list_count),
      p_mutable_descriptor_type_lists_(p_mutable_descriptor_type_lists), next_(next) {}

  MutableDescriptorTypeCreateInfoEXT(const native_type &rhs)
    : MutableDescriptorTypeCreateInfoEXT(std::bit_cast<MutableDescriptorTypeCreateInfoEXT>(rhs)) {}

  MutableDescriptorTypeCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MutableDescriptorTypeCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MutableDescriptorTypeCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;
  const void *next_;
  uint32_t mutable_descriptor_type_list_count_;
  const MutableDescriptorTypeListEXT *p_mutable_descriptor_type_lists_;
};

struct PhysicalDeviceMutableDescriptorTypeFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;

  PhysicalDeviceMutableDescriptorTypeFeaturesEXT(bool32 mutable_descriptor_type = {}, void *next = {})
    : mutable_descriptor_type_(mutable_descriptor_type), next_(next) {}

  PhysicalDeviceMutableDescriptorTypeFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceMutableDescriptorTypeFeaturesEXT(std::bit_cast<PhysicalDeviceMutableDescriptorTypeFeaturesEXT>(rhs)) {}

  PhysicalDeviceMutableDescriptorTypeFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMutableDescriptorTypeFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMutableDescriptorTypeFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;
  void *next_;
  bool32 mutable_descriptor_type_;
};

struct DeviceFaultInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_FAULT_INFO_EXT;

  using native_type = VkDeviceFaultInfoEXT;

  DeviceFaultInfoEXT() = default;

  DeviceFaultInfoEXT(const native_type &rhs) : DeviceFaultInfoEXT(std::bit_cast<DeviceFaultInfoEXT>(rhs)) {}

  DeviceFaultInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceFaultInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceFaultInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_FAULT_INFO_EXT;
  void *next_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
  DeviceFaultAddressInfoEXT *p_address_infos_ = {};
  DeviceFaultVendorInfoEXT *p_vendor_infos_ = {};
  void *p_vendor_binary_data_ = {};
};

struct PhysicalDeviceLegacyVertexAttributesPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT;

  PhysicalDeviceLegacyVertexAttributesPropertiesEXT(bool32 native_unaligned_performance = {}, void *next = {})
    : native_unaligned_performance_(native_unaligned_performance), next_(next) {}

  PhysicalDeviceLegacyVertexAttributesPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceLegacyVertexAttributesPropertiesEXT(std::bit_cast<PhysicalDeviceLegacyVertexAttributesPropertiesEXT>(rhs)) {}

  PhysicalDeviceLegacyVertexAttributesPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLegacyVertexAttributesPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLegacyVertexAttributesPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT;
  void *next_;
  bool32 native_unaligned_performance_;
};

struct PhysicalDeviceLegacyVertexAttributesFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT;

  using native_type = VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT;

  PhysicalDeviceLegacyVertexAttributesFeaturesEXT(bool32 legacy_vertex_attributes = {}, void *next = {})
    : legacy_vertex_attributes_(legacy_vertex_attributes), next_(next) {}

  PhysicalDeviceLegacyVertexAttributesFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceLegacyVertexAttributesFeaturesEXT(std::bit_cast<PhysicalDeviceLegacyVertexAttributesFeaturesEXT>(rhs)) {}

  PhysicalDeviceLegacyVertexAttributesFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLegacyVertexAttributesFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLegacyVertexAttributesFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT;
  void *next_;
  bool32 legacy_vertex_attributes_;
};

struct PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;

  PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(bool32 attachment_feedback_loop_dynamic_state = {}, void *next = {})
    : attachment_feedback_loop_dynamic_state_(attachment_feedback_loop_dynamic_state), next_(next) {}

  PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
        std::bit_cast<PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT>(rhs)) {}

  PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT;
  void *next_;
  bool32 attachment_feedback_loop_dynamic_state_;
};

struct PhysicalDeviceImageProcessing2PropertiesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM;

  using native_type = VkPhysicalDeviceImageProcessing2PropertiesQCOM;

  PhysicalDeviceImageProcessing2PropertiesQCOM() = default;

  PhysicalDeviceImageProcessing2PropertiesQCOM(const native_type &rhs)
    : PhysicalDeviceImageProcessing2PropertiesQCOM(std::bit_cast<PhysicalDeviceImageProcessing2PropertiesQCOM>(rhs)) {}

  PhysicalDeviceImageProcessing2PropertiesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageProcessing2PropertiesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageProcessing2PropertiesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM;
  void *next_ = {};
  Extent2D max_block_match_window_ = {};
};

struct PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT;

  using native_type = VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;

  PhysicalDeviceImageSlicedViewOf3DFeaturesEXT(bool32 image_sliced_view_of3d = {}, void *next = {})
    : image_sliced_view_of3d_(image_sliced_view_of3d), next_(next) {}

  PhysicalDeviceImageSlicedViewOf3DFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceImageSlicedViewOf3DFeaturesEXT(std::bit_cast<PhysicalDeviceImageSlicedViewOf3DFeaturesEXT>(rhs)) {}

  PhysicalDeviceImageSlicedViewOf3DFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageSlicedViewOf3DFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageSlicedViewOf3DFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT;
  void *next_;
  bool32 image_sliced_view_of3d_;
};

struct PhysicalDeviceImage2DViewOf3DFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT;

  using native_type = VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;

  PhysicalDeviceImage2DViewOf3DFeaturesEXT(bool32 image2dview_of3d = {}, bool32 sampler2dview_of3d = {}, void *next = {})
    : image2dview_of3d_(image2dview_of3d), sampler2dview_of3d_(sampler2dview_of3d), next_(next) {}

  PhysicalDeviceImage2DViewOf3DFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceImage2DViewOf3DFeaturesEXT(std::bit_cast<PhysicalDeviceImage2DViewOf3DFeaturesEXT>(rhs)) {}

  PhysicalDeviceImage2DViewOf3DFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImage2DViewOf3DFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImage2DViewOf3DFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT;
  void *next_;
  bool32 image2dview_of3d_;
  bool32 sampler2dview_of3d_;
};

struct PipelineFragmentShadingRateEnumStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineFragmentShadingRateEnumStateCreateInfoNV;

  PipelineFragmentShadingRateEnumStateCreateInfoNV(FragmentShadingRateType shading_rate_type = FragmentShadingRateType::E_FRAGMENT_SIZE_NV,
                                                   FragmentShadingRate shading_rate = FragmentShadingRate::E_1_INVOCATION_PER_PIXEL_NV,
                                                   const std::array<FragmentShadingRateCombinerOp, 2> &combiner_ops = {},
                                                   const void *next = {})
    : shading_rate_type_(shading_rate_type), shading_rate_(shading_rate), combiner_ops_(combiner_ops), next_(next) {}

  PipelineFragmentShadingRateEnumStateCreateInfoNV(const native_type &rhs)
    : PipelineFragmentShadingRateEnumStateCreateInfoNV(std::bit_cast<PipelineFragmentShadingRateEnumStateCreateInfoNV>(rhs)) {}

  PipelineFragmentShadingRateEnumStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineFragmentShadingRateEnumStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineFragmentShadingRateEnumStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
  const void *next_;
  FragmentShadingRateType shading_rate_type_;
  FragmentShadingRate shading_rate_;
  std::array<FragmentShadingRateCombinerOp, 2> combiner_ops_;
};

struct PhysicalDeviceNestedCommandBufferPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceNestedCommandBufferPropertiesEXT;

  PhysicalDeviceNestedCommandBufferPropertiesEXT(uint32_t max_command_buffer_nesting_level = {}, void *next = {})
    : max_command_buffer_nesting_level_(max_command_buffer_nesting_level), next_(next) {}

  PhysicalDeviceNestedCommandBufferPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceNestedCommandBufferPropertiesEXT(std::bit_cast<PhysicalDeviceNestedCommandBufferPropertiesEXT>(rhs)) {}

  PhysicalDeviceNestedCommandBufferPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceNestedCommandBufferPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceNestedCommandBufferPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT;
  void *next_;
  uint32_t max_command_buffer_nesting_level_;
};

struct PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

  PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(SampleCountMaskBit max_fragment_shading_rate_invocation_count = {}, void *next = {})
    : max_fragment_shading_rate_invocation_count_(max_fragment_shading_rate_invocation_count), next_(next) {}

  PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(const native_type &rhs)
    : PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(std::bit_cast<PhysicalDeviceFragmentShadingRateEnumsPropertiesNV>(rhs)) {}

  PhysicalDeviceFragmentShadingRateEnumsPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShadingRateEnumsPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShadingRateEnumsPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
  void *next_;
  SampleCountMaskBit max_fragment_shading_rate_invocation_count_;
};

struct PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;

  using native_type = VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

  PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(bool32 fragment_shading_rate_enums = {},
                                                   bool32 supersample_fragment_shading_rates = {},
                                                   bool32 no_invocation_fragment_shading_rates = {},
                                                   void *next = {})
    : fragment_shading_rate_enums_(fragment_shading_rate_enums), supersample_fragment_shading_rates_(supersample_fragment_shading_rates),
      no_invocation_fragment_shading_rates_(no_invocation_fragment_shading_rates), next_(next) {}

  PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(const native_type &rhs)
    : PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(std::bit_cast<PhysicalDeviceFragmentShadingRateEnumsFeaturesNV>(rhs)) {}

  PhysicalDeviceFragmentShadingRateEnumsFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShadingRateEnumsFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShadingRateEnumsFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
  void *next_;
  bool32 fragment_shading_rate_enums_;
  bool32 supersample_fragment_shading_rates_;
  bool32 no_invocation_fragment_shading_rates_;
};

struct PhysicalDeviceShaderTerminateInvocationFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;

  using native_type = VkPhysicalDeviceShaderTerminateInvocationFeatures;

  PhysicalDeviceShaderTerminateInvocationFeatures(bool32 shader_terminate_invocation = {}, void *next = {})
    : shader_terminate_invocation_(shader_terminate_invocation), next_(next) {}

  PhysicalDeviceShaderTerminateInvocationFeatures(const native_type &rhs)
    : PhysicalDeviceShaderTerminateInvocationFeatures(std::bit_cast<PhysicalDeviceShaderTerminateInvocationFeatures>(rhs)) {}

  PhysicalDeviceShaderTerminateInvocationFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderTerminateInvocationFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderTerminateInvocationFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
  void *next_;
  bool32 shader_terminate_invocation_;
};

struct PhysicalDeviceFragmentShadingRateFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;

  using native_type = VkPhysicalDeviceFragmentShadingRateFeaturesKHR;

  PhysicalDeviceFragmentShadingRateFeaturesKHR(bool32 pipeline_fragment_shading_rate = {},
                                               bool32 primitive_fragment_shading_rate = {},
                                               bool32 attachment_fragment_shading_rate = {},
                                               void *next = {})
    : pipeline_fragment_shading_rate_(pipeline_fragment_shading_rate), primitive_fragment_shading_rate_(primitive_fragment_shading_rate),
      attachment_fragment_shading_rate_(attachment_fragment_shading_rate), next_(next) {}

  PhysicalDeviceFragmentShadingRateFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceFragmentShadingRateFeaturesKHR(std::bit_cast<PhysicalDeviceFragmentShadingRateFeaturesKHR>(rhs)) {}

  PhysicalDeviceFragmentShadingRateFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShadingRateFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShadingRateFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
  void *next_;
  bool32 pipeline_fragment_shading_rate_;
  bool32 primitive_fragment_shading_rate_;
  bool32 attachment_fragment_shading_rate_;
};

struct ImageResolve2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_RESOLVE_2;

  using native_type = VkImageResolve2;

  ImageResolve2(ImageSubresourceLayers src_subresource = {},
                Offset3D src_offset = {},
                ImageSubresourceLayers dst_subresource = {},
                Offset3D dst_offset = {},
                Extent3D extent = {},
                const void *next = {})
    : src_subresource_(src_subresource), src_offset_(src_offset), dst_subresource_(dst_subresource), dst_offset_(dst_offset),
      extent_(extent), next_(next) {}

  ImageResolve2(const native_type &rhs) : ImageResolve2(std::bit_cast<ImageResolve2>(rhs)) {}

  ImageResolve2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageResolve2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageResolve2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_RESOLVE_2;
  const void *next_;
  ImageSubresourceLayers src_subresource_;
  Offset3D src_offset_;
  ImageSubresourceLayers dst_subresource_;
  Offset3D dst_offset_;
  Extent3D extent_;
};

struct ResolveImageInfo2 {

  static constexpr StructureType structure_type = StructureType::E_RESOLVE_IMAGE_INFO_2;

  using native_type = VkResolveImageInfo2;

  ResolveImageInfo2(VkImage src_image = {},
                    ImageLayout src_image_layout = ImageLayout::E_UNDEFINED,
                    VkImage dst_image = {},
                    ImageLayout dst_image_layout = ImageLayout::E_UNDEFINED,
                    uint32_t region_count = {},
                    const ImageResolve2 *p_regions = {},
                    const void *next = {})
    : src_image_(src_image), src_image_layout_(src_image_layout), dst_image_(dst_image), dst_image_layout_(dst_image_layout),
      region_count_(region_count), p_regions_(p_regions), next_(next) {}

  ResolveImageInfo2(const native_type &rhs) : ResolveImageInfo2(std::bit_cast<ResolveImageInfo2>(rhs)) {}

  ResolveImageInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ResolveImageInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const ResolveImageInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RESOLVE_IMAGE_INFO_2;
  const void *next_;
  VkImage src_image_;
  ImageLayout src_image_layout_;
  VkImage dst_image_;
  ImageLayout dst_image_layout_;
  uint32_t region_count_;
  const ImageResolve2 *p_regions_;
};

struct BufferImageCopy2 {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_IMAGE_COPY_2;

  using native_type = VkBufferImageCopy2;

  BufferImageCopy2(DeviceSize buffer_offset = {},
                   uint32_t buffer_row_length = {},
                   uint32_t buffer_image_height = {},
                   ImageSubresourceLayers image_subresource = {},
                   Offset3D image_offset = {},
                   Extent3D image_extent = {},
                   const void *next = {})
    : buffer_offset_(buffer_offset), buffer_row_length_(buffer_row_length), buffer_image_height_(buffer_image_height),
      image_subresource_(image_subresource), image_offset_(image_offset), image_extent_(image_extent), next_(next) {}

  BufferImageCopy2(const native_type &rhs) : BufferImageCopy2(std::bit_cast<BufferImageCopy2>(rhs)) {}

  BufferImageCopy2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferImageCopy2>(rhs);
    return *this;
  }

  auto operator<=>(const BufferImageCopy2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_IMAGE_COPY_2;
  const void *next_;
  DeviceSize buffer_offset_;
  uint32_t buffer_row_length_;
  uint32_t buffer_image_height_;
  ImageSubresourceLayers image_subresource_;
  Offset3D image_offset_;
  Extent3D image_extent_;
};

struct CopyBufferToImageInfo2 {

  static constexpr StructureType structure_type = StructureType::E_COPY_BUFFER_TO_IMAGE_INFO_2;

  using native_type = VkCopyBufferToImageInfo2;

  CopyBufferToImageInfo2(VkBuffer src_buffer = {},
                         VkImage dst_image = {},
                         ImageLayout dst_image_layout = ImageLayout::E_UNDEFINED,
                         uint32_t region_count = {},
                         const BufferImageCopy2 *p_regions = {},
                         const void *next = {})
    : src_buffer_(src_buffer), dst_image_(dst_image), dst_image_layout_(dst_image_layout), region_count_(region_count),
      p_regions_(p_regions), next_(next) {}

  CopyBufferToImageInfo2(const native_type &rhs) : CopyBufferToImageInfo2(std::bit_cast<CopyBufferToImageInfo2>(rhs)) {}

  CopyBufferToImageInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyBufferToImageInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const CopyBufferToImageInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_BUFFER_TO_IMAGE_INFO_2;
  const void *next_;
  VkBuffer src_buffer_;
  VkImage dst_image_;
  ImageLayout dst_image_layout_;
  uint32_t region_count_;
  const BufferImageCopy2 *p_regions_;
};

struct BufferCopy2 {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_COPY_2;

  using native_type = VkBufferCopy2;

  BufferCopy2(DeviceSize src_offset = {}, DeviceSize dst_offset = {}, DeviceSize size = {}, const void *next = {})
    : src_offset_(src_offset), dst_offset_(dst_offset), size_(size), next_(next) {}

  BufferCopy2(const native_type &rhs) : BufferCopy2(std::bit_cast<BufferCopy2>(rhs)) {}

  BufferCopy2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferCopy2>(rhs);
    return *this;
  }

  auto operator<=>(const BufferCopy2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_COPY_2;
  const void *next_;
  DeviceSize src_offset_;
  DeviceSize dst_offset_;
  DeviceSize size_;
};

struct CopyBufferInfo2 {

  static constexpr StructureType structure_type = StructureType::E_COPY_BUFFER_INFO_2;

  using native_type = VkCopyBufferInfo2;

  CopyBufferInfo2(VkBuffer src_buffer = {},
                  VkBuffer dst_buffer = {},
                  uint32_t region_count = {},
                  const BufferCopy2 *p_regions = {},
                  const void *next = {})
    : src_buffer_(src_buffer), dst_buffer_(dst_buffer), region_count_(region_count), p_regions_(p_regions), next_(next) {}

  CopyBufferInfo2(const native_type &rhs) : CopyBufferInfo2(std::bit_cast<CopyBufferInfo2>(rhs)) {}

  CopyBufferInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyBufferInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const CopyBufferInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_BUFFER_INFO_2;
  const void *next_;
  VkBuffer src_buffer_;
  VkBuffer dst_buffer_;
  uint32_t region_count_;
  const BufferCopy2 *p_regions_;
};

struct PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

  PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(bool32 shader_image_int64atomics = {},
                                                  bool32 sparse_image_int64atomics = {},
                                                  void *next = {})
    : shader_image_int64atomics_(shader_image_int64atomics), sparse_image_int64atomics_(sparse_image_int64atomics), next_(next) {}

  PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(std::bit_cast<PhysicalDeviceShaderImageAtomicInt64FeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderImageAtomicInt64FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderImageAtomicInt64FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderImageAtomicInt64FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
  void *next_;
  bool32 shader_image_int64atomics_;
  bool32 sparse_image_int64atomics_;
};

struct ImageBlit2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_BLIT_2;

  using native_type = VkImageBlit2;

  ImageBlit2(ImageSubresourceLayers src_subresource = {},
             const std::array<Offset3D, 2> &src_offsets = {},
             ImageSubresourceLayers dst_subresource = {},
             const std::array<Offset3D, 2> &dst_offsets = {},
             const void *next = {})
    : src_subresource_(src_subresource), src_offsets_(src_offsets), dst_subresource_(dst_subresource), dst_offsets_(dst_offsets),
      next_(next) {}

  ImageBlit2(const native_type &rhs) : ImageBlit2(std::bit_cast<ImageBlit2>(rhs)) {}

  ImageBlit2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageBlit2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageBlit2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_BLIT_2;
  const void *next_;
  ImageSubresourceLayers src_subresource_;
  std::array<Offset3D, 2> src_offsets_;
  ImageSubresourceLayers dst_subresource_;
  std::array<Offset3D, 2> dst_offsets_;
};

struct ImageCopy2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_COPY_2;

  using native_type = VkImageCopy2;

  ImageCopy2(ImageSubresourceLayers src_subresource = {},
             Offset3D src_offset = {},
             ImageSubresourceLayers dst_subresource = {},
             Offset3D dst_offset = {},
             Extent3D extent = {},
             const void *next = {})
    : src_subresource_(src_subresource), src_offset_(src_offset), dst_subresource_(dst_subresource), dst_offset_(dst_offset),
      extent_(extent), next_(next) {}

  ImageCopy2(const native_type &rhs) : ImageCopy2(std::bit_cast<ImageCopy2>(rhs)) {}

  ImageCopy2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageCopy2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageCopy2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_COPY_2;
  const void *next_;
  ImageSubresourceLayers src_subresource_;
  Offset3D src_offset_;
  ImageSubresourceLayers dst_subresource_;
  Offset3D dst_offset_;
  Extent3D extent_;
};

struct VideoEncodeH265NaluSliceSegmentInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR;

  using native_type = VkVideoEncodeH265NaluSliceSegmentInfoKHR;

  VideoEncodeH265NaluSliceSegmentInfoKHR(int32_t constant_qp = {},
                                         const StdVideoEncodeH265SliceSegmentHeader *p_std_slice_segment_header = {},
                                         const void *next = {})
    : constant_qp_(constant_qp), p_std_slice_segment_header_(p_std_slice_segment_header), next_(next) {}

  VideoEncodeH265NaluSliceSegmentInfoKHR(const native_type &rhs)
    : VideoEncodeH265NaluSliceSegmentInfoKHR(std::bit_cast<VideoEncodeH265NaluSliceSegmentInfoKHR>(rhs)) {}

  VideoEncodeH265NaluSliceSegmentInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265NaluSliceSegmentInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265NaluSliceSegmentInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR;
  const void *next_;
  int32_t constant_qp_;
  const StdVideoEncodeH265SliceSegmentHeader *p_std_slice_segment_header_;
};

struct PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI;

  using native_type = VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;

  PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(bool32 cluster_shading_rate = {}, void *next = {})
    : cluster_shading_rate_(cluster_shading_rate), next_(next) {}

  PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(const native_type &rhs)
    : PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(std::bit_cast<PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI>(rhs)) {}

  PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI;
  void *next_;
  bool32 cluster_shading_rate_;
};

struct PhysicalDeviceImageViewMinLodFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT;

  using native_type = VkPhysicalDeviceImageViewMinLodFeaturesEXT;

  PhysicalDeviceImageViewMinLodFeaturesEXT(bool32 min_lod = {}, void *next = {}) : min_lod_(min_lod), next_(next) {}

  PhysicalDeviceImageViewMinLodFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceImageViewMinLodFeaturesEXT(std::bit_cast<PhysicalDeviceImageViewMinLodFeaturesEXT>(rhs)) {}

  PhysicalDeviceImageViewMinLodFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageViewMinLodFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageViewMinLodFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT;
  void *next_;
  bool32 min_lod_;
};

struct PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI;

  using native_type = VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;

  PhysicalDeviceClusterCullingShaderFeaturesHUAWEI(bool32 clusterculling_shader = {},
                                                   bool32 multiview_cluster_culling_shader = {},
                                                   void *next = {})
    : clusterculling_shader_(clusterculling_shader), multiview_cluster_culling_shader_(multiview_cluster_culling_shader), next_(next) {}

  PhysicalDeviceClusterCullingShaderFeaturesHUAWEI(const native_type &rhs)
    : PhysicalDeviceClusterCullingShaderFeaturesHUAWEI(std::bit_cast<PhysicalDeviceClusterCullingShaderFeaturesHUAWEI>(rhs)) {}

  PhysicalDeviceClusterCullingShaderFeaturesHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceClusterCullingShaderFeaturesHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceClusterCullingShaderFeaturesHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI;
  void *next_;
  bool32 clusterculling_shader_;
  bool32 multiview_cluster_culling_shader_;
};

struct PhysicalDevice4444FormatsFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;

  using native_type = VkPhysicalDevice4444FormatsFeaturesEXT;

  PhysicalDevice4444FormatsFeaturesEXT(bool32 format_a4r4g4b4 = {}, bool32 format_a4b4g4r4 = {}, void *next = {})
    : format_a4r4g4b4_(format_a4r4g4b4), format_a4b4g4r4_(format_a4b4g4r4), next_(next) {}

  PhysicalDevice4444FormatsFeaturesEXT(const native_type &rhs)
    : PhysicalDevice4444FormatsFeaturesEXT(std::bit_cast<PhysicalDevice4444FormatsFeaturesEXT>(rhs)) {}

  PhysicalDevice4444FormatsFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevice4444FormatsFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevice4444FormatsFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
  void *next_;
  bool32 format_a4r4g4b4_;
  bool32 format_a4b4g4r4_;
};

struct SamplerCubicWeightsCreateInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM;

  using native_type = VkSamplerCubicWeightsCreateInfoQCOM;

  SamplerCubicWeightsCreateInfoQCOM(CubicFilterWeights cubic_weights = CubicFilterWeights::E_CATMULL_ROM_QCOM, const void *next = {})
    : cubic_weights_(cubic_weights), next_(next) {}

  SamplerCubicWeightsCreateInfoQCOM(const native_type &rhs)
    : SamplerCubicWeightsCreateInfoQCOM(std::bit_cast<SamplerCubicWeightsCreateInfoQCOM>(rhs)) {}

  SamplerCubicWeightsCreateInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerCubicWeightsCreateInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerCubicWeightsCreateInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM;
  const void *next_;
  CubicFilterWeights cubic_weights_;
};

struct PhysicalDeviceLinearColorAttachmentFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV;

  using native_type = VkPhysicalDeviceLinearColorAttachmentFeaturesNV;

  PhysicalDeviceLinearColorAttachmentFeaturesNV(bool32 linear_color_attachment = {}, void *next = {})
    : linear_color_attachment_(linear_color_attachment), next_(next) {}

  PhysicalDeviceLinearColorAttachmentFeaturesNV(const native_type &rhs)
    : PhysicalDeviceLinearColorAttachmentFeaturesNV(std::bit_cast<PhysicalDeviceLinearColorAttachmentFeaturesNV>(rhs)) {}

  PhysicalDeviceLinearColorAttachmentFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLinearColorAttachmentFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLinearColorAttachmentFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV;
  void *next_;
  bool32 linear_color_attachment_;
};

struct PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;

  using native_type = VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;

  PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(bool32 workgroup_memory_explicit_layout = {},
                                                         bool32 workgroup_memory_explicit_layout_scalar_block_layout = {},
                                                         bool32 workgroup_memory_explicit_layout8bit_access = {},
                                                         bool32 workgroup_memory_explicit_layout16bit_access = {},
                                                         void *next = {})
    : workgroup_memory_explicit_layout_(workgroup_memory_explicit_layout),
      workgroup_memory_explicit_layout_scalar_block_layout_(workgroup_memory_explicit_layout_scalar_block_layout),
      workgroup_memory_explicit_layout8bit_access_(workgroup_memory_explicit_layout8bit_access),
      workgroup_memory_explicit_layout16bit_access_(workgroup_memory_explicit_layout16bit_access), next_(next) {}

  PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(std::bit_cast<PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>(rhs)) {}

  PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
  void *next_;
  bool32 workgroup_memory_explicit_layout_;
  bool32 workgroup_memory_explicit_layout_scalar_block_layout_;
  bool32 workgroup_memory_explicit_layout8bit_access_;
  bool32 workgroup_memory_explicit_layout16bit_access_;
};

struct PhysicalDeviceRobustness2PropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceRobustness2PropertiesEXT;

  PhysicalDeviceRobustness2PropertiesEXT() = default;

  PhysicalDeviceRobustness2PropertiesEXT(const native_type &rhs)
    : PhysicalDeviceRobustness2PropertiesEXT(std::bit_cast<PhysicalDeviceRobustness2PropertiesEXT>(rhs)) {}

  PhysicalDeviceRobustness2PropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRobustness2PropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRobustness2PropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
  void *next_ = {};
  DeviceSize robust_storage_buffer_access_size_alignment_ = {};
  DeviceSize robust_uniform_buffer_access_size_alignment_ = {};
};

struct VideoEncodeUsageInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_USAGE_INFO_KHR;

  using native_type = VkVideoEncodeUsageInfoKHR;

  VideoEncodeUsageInfoKHR(VideoEncodeUsageMask video_usage_hints = {},
                          VideoEncodeContentMask video_content_hints = {},
                          VideoEncodeTuningMode tuning_mode = VideoEncodeTuningMode::E_DEFAULT_KHR,
                          const void *next = {})
    : video_usage_hints_(video_usage_hints), video_content_hints_(video_content_hints), tuning_mode_(tuning_mode), next_(next) {}

  VideoEncodeUsageInfoKHR(const native_type &rhs) : VideoEncodeUsageInfoKHR(std::bit_cast<VideoEncodeUsageInfoKHR>(rhs)) {}

  VideoEncodeUsageInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeUsageInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeUsageInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_USAGE_INFO_KHR;
  const void *next_;
  VideoEncodeUsageMask video_usage_hints_;
  VideoEncodeContentMask video_content_hints_;
  VideoEncodeTuningMode tuning_mode_;
};

struct DeviceDiagnosticsConfigCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;

  using native_type = VkDeviceDiagnosticsConfigCreateInfoNV;

  DeviceDiagnosticsConfigCreateInfoNV(DeviceDiagnosticsConfigMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  DeviceDiagnosticsConfigCreateInfoNV(const native_type &rhs)
    : DeviceDiagnosticsConfigCreateInfoNV(std::bit_cast<DeviceDiagnosticsConfigCreateInfoNV>(rhs)) {}

  DeviceDiagnosticsConfigCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceDiagnosticsConfigCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceDiagnosticsConfigCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
  const void *next_;
  DeviceDiagnosticsConfigMask flags_;
};

struct CommandBufferInheritanceRenderPassTransformInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;

  using native_type = VkCommandBufferInheritanceRenderPassTransformInfoQCOM;

  CommandBufferInheritanceRenderPassTransformInfoQCOM(SurfaceTransformMaskBit transform = {}, Rect2D render_area = {}, void *next = {})
    : transform_(transform), render_area_(render_area), next_(next) {}

  CommandBufferInheritanceRenderPassTransformInfoQCOM(const native_type &rhs)
    : CommandBufferInheritanceRenderPassTransformInfoQCOM(std::bit_cast<CommandBufferInheritanceRenderPassTransformInfoQCOM>(rhs)) {}

  CommandBufferInheritanceRenderPassTransformInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferInheritanceRenderPassTransformInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferInheritanceRenderPassTransformInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
  void *next_;
  SurfaceTransformMaskBit transform_;
  Rect2D render_area_;
};

struct CopyCommandTransformInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_COPY_COMMAND_TRANSFORM_INFO_QCOM;

  using native_type = VkCopyCommandTransformInfoQCOM;

  CopyCommandTransformInfoQCOM(SurfaceTransformMaskBit transform = {}, const void *next = {}) : transform_(transform), next_(next) {}

  CopyCommandTransformInfoQCOM(const native_type &rhs) : CopyCommandTransformInfoQCOM(std::bit_cast<CopyCommandTransformInfoQCOM>(rhs)) {}

  CopyCommandTransformInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyCommandTransformInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const CopyCommandTransformInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_COMMAND_TRANSFORM_INFO_QCOM;
  const void *next_;
  SurfaceTransformMaskBit transform_;
};

struct CopyMemoryToMicromapInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COPY_MEMORY_TO_MICROMAP_INFO_EXT;

  using native_type = VkCopyMemoryToMicromapInfoEXT;

  CopyMemoryToMicromapInfoEXT(VkDeviceOrHostAddressConstKHR src = {},
                              VkMicromapEXT dst = {},
                              CopyMicromapMode mode = CopyMicromapMode::E_CLONE_EXT,
                              const void *next = {})
    : src_(src), dst_(dst), mode_(mode), next_(next) {}

  CopyMemoryToMicromapInfoEXT(const native_type &rhs) : CopyMemoryToMicromapInfoEXT(std::bit_cast<CopyMemoryToMicromapInfoEXT>(rhs)) {}

  CopyMemoryToMicromapInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMemoryToMicromapInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMemoryToMicromapInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_MEMORY_TO_MICROMAP_INFO_EXT;
  const void *next_;
  VkDeviceOrHostAddressConstKHR src_;
  VkMicromapEXT dst_;
  CopyMicromapMode mode_;
};

struct RenderPassTransformBeginInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;

  using native_type = VkRenderPassTransformBeginInfoQCOM;

  RenderPassTransformBeginInfoQCOM(SurfaceTransformMaskBit transform = {}, void *next = {}) : transform_(transform), next_(next) {}

  RenderPassTransformBeginInfoQCOM(const native_type &rhs)
    : RenderPassTransformBeginInfoQCOM(std::bit_cast<RenderPassTransformBeginInfoQCOM>(rhs)) {}

  RenderPassTransformBeginInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassTransformBeginInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassTransformBeginInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
  void *next_;
  SurfaceTransformMaskBit transform_;
};

struct DeviceImageSubresourceInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR;

  using native_type = VkDeviceImageSubresourceInfoKHR;

  DeviceImageSubresourceInfoKHR(const ImageCreateInfo *p_create_info = {},
                                const ImageSubresource2KHR *p_subresource = {},
                                const void *next = {})
    : p_create_info_(p_create_info), p_subresource_(p_subresource), next_(next) {}

  DeviceImageSubresourceInfoKHR(const native_type &rhs)
    : DeviceImageSubresourceInfoKHR(std::bit_cast<DeviceImageSubresourceInfoKHR>(rhs)) {}

  DeviceImageSubresourceInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceImageSubresourceInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceImageSubresourceInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR;
  const void *next_;
  const ImageCreateInfo *p_create_info_;
  const ImageSubresource2KHR *p_subresource_;
};

struct ColorBlendAdvancedEXT {

  using native_type = VkColorBlendAdvancedEXT;

  ColorBlendAdvancedEXT(BlendOp advanced_blend_op = BlendOp::E_ADD,
                        bool32 src_premultiplied = {},
                        bool32 dst_premultiplied = {},
                        BlendOverlap blend_overlap = BlendOverlap::E_UNCORRELATED_EXT,
                        bool32 clamp_results = {})
    : advanced_blend_op_(advanced_blend_op), src_premultiplied_(src_premultiplied), dst_premultiplied_(dst_premultiplied),
      blend_overlap_(blend_overlap), clamp_results_(clamp_results) {}

  ColorBlendAdvancedEXT(const native_type &rhs) : ColorBlendAdvancedEXT(std::bit_cast<ColorBlendAdvancedEXT>(rhs)) {}

  ColorBlendAdvancedEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ColorBlendAdvancedEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ColorBlendAdvancedEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  BlendOp advanced_blend_op_;
  bool32 src_premultiplied_;
  bool32 dst_premultiplied_;
  BlendOverlap blend_overlap_;
  bool32 clamp_results_;
};

struct PhysicalDeviceExtendedDynamicState3PropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;

  PhysicalDeviceExtendedDynamicState3PropertiesEXT(bool32 dynamic_primitive_topology_unrestricted = {}, void *next = {})
    : dynamic_primitive_topology_unrestricted_(dynamic_primitive_topology_unrestricted), next_(next) {}

  PhysicalDeviceExtendedDynamicState3PropertiesEXT(const native_type &rhs)
    : PhysicalDeviceExtendedDynamicState3PropertiesEXT(std::bit_cast<PhysicalDeviceExtendedDynamicState3PropertiesEXT>(rhs)) {}

  PhysicalDeviceExtendedDynamicState3PropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExtendedDynamicState3PropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExtendedDynamicState3PropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT;
  void *next_;
  bool32 dynamic_primitive_topology_unrestricted_;
};

struct PhysicalDeviceExtendedDynamicStateFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;

  PhysicalDeviceExtendedDynamicStateFeaturesEXT(bool32 extended_dynamic_state = {}, void *next = {})
    : extended_dynamic_state_(extended_dynamic_state), next_(next) {}

  PhysicalDeviceExtendedDynamicStateFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceExtendedDynamicStateFeaturesEXT(std::bit_cast<PhysicalDeviceExtendedDynamicStateFeaturesEXT>(rhs)) {}

  PhysicalDeviceExtendedDynamicStateFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExtendedDynamicStateFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExtendedDynamicStateFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
  void *next_;
  bool32 extended_dynamic_state_;
};

struct PhysicalDeviceDepthClipControlFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDepthClipControlFeaturesEXT;

  PhysicalDeviceDepthClipControlFeaturesEXT(bool32 depth_clip_control = {}, void *next = {})
    : depth_clip_control_(depth_clip_control), next_(next) {}

  PhysicalDeviceDepthClipControlFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDepthClipControlFeaturesEXT(std::bit_cast<PhysicalDeviceDepthClipControlFeaturesEXT>(rhs)) {}

  PhysicalDeviceDepthClipControlFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDepthClipControlFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDepthClipControlFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT;
  void *next_;
  bool32 depth_clip_control_;
};

struct RayTracingPipelineInterfaceCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;

  using native_type = VkRayTracingPipelineInterfaceCreateInfoKHR;

  RayTracingPipelineInterfaceCreateInfoKHR(uint32_t max_pipeline_ray_payload_size = {},
                                           uint32_t max_pipeline_ray_hit_attribute_size = {},
                                           const void *next = {})
    : max_pipeline_ray_payload_size_(max_pipeline_ray_payload_size),
      max_pipeline_ray_hit_attribute_size_(max_pipeline_ray_hit_attribute_size), next_(next) {}

  RayTracingPipelineInterfaceCreateInfoKHR(const native_type &rhs)
    : RayTracingPipelineInterfaceCreateInfoKHR(std::bit_cast<RayTracingPipelineInterfaceCreateInfoKHR>(rhs)) {}

  RayTracingPipelineInterfaceCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RayTracingPipelineInterfaceCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RayTracingPipelineInterfaceCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
  const void *next_;
  uint32_t max_pipeline_ray_payload_size_;
  uint32_t max_pipeline_ray_hit_attribute_size_;
};

struct CopyAccelerationStructureToMemoryInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;

  using native_type = VkCopyAccelerationStructureToMemoryInfoKHR;

  CopyAccelerationStructureToMemoryInfoKHR(VkAccelerationStructureKHR src = {},
                                           VkDeviceOrHostAddressKHR dst = {},
                                           CopyAccelerationStructureMode mode = CopyAccelerationStructureMode::E_CLONE_KHR,
                                           const void *next = {})
    : src_(src), dst_(dst), mode_(mode), next_(next) {}

  CopyAccelerationStructureToMemoryInfoKHR(const native_type &rhs)
    : CopyAccelerationStructureToMemoryInfoKHR(std::bit_cast<CopyAccelerationStructureToMemoryInfoKHR>(rhs)) {}

  CopyAccelerationStructureToMemoryInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyAccelerationStructureToMemoryInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const CopyAccelerationStructureToMemoryInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
  const void *next_;
  VkAccelerationStructureKHR src_;
  VkDeviceOrHostAddressKHR dst_;
  CopyAccelerationStructureMode mode_;
};

struct AccelerationStructureVersionInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;

  using native_type = VkAccelerationStructureVersionInfoKHR;

  AccelerationStructureVersionInfoKHR(const uint8_t *p_version_data = {}, const void *next = {})
    : p_version_data_(p_version_data), next_(next) {}

  AccelerationStructureVersionInfoKHR(const native_type &rhs)
    : AccelerationStructureVersionInfoKHR(std::bit_cast<AccelerationStructureVersionInfoKHR>(rhs)) {}

  AccelerationStructureVersionInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureVersionInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureVersionInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
  const void *next_;
  const uint8_t *p_version_data_;
};

struct TransformMatrixKHR {

  using native_type = VkTransformMatrixKHR;

  TransformMatrixKHR(const std::array<std::array<float, 4>, 3> &matrix = {}) : matrix_(matrix) {}

  TransformMatrixKHR(const native_type &rhs) : TransformMatrixKHR(std::bit_cast<TransformMatrixKHR>(rhs)) {}

  TransformMatrixKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<TransformMatrixKHR>(rhs);
    return *this;
  }

  auto operator<=>(const TransformMatrixKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  std::array<std::array<float, 4>, 3> matrix_;
};

struct AccelerationStructureInstanceKHR {

  using native_type = VkAccelerationStructureInstanceKHR;

  AccelerationStructureInstanceKHR(TransformMatrixKHR transform = {},
                                   uint32_t instance_custom_index = {},
                                   uint32_t mask = {},
                                   uint32_t instance_shader_binding_table_record_offset = {},
                                   GeometryInstanceMask flags = {},
                                   uint64_t acceleration_structure_reference = {})
    : transform_(transform), instance_custom_index_(instance_custom_index), mask_(mask),
      instance_shader_binding_table_record_offset_(instance_shader_binding_table_record_offset), flags_(flags),
      acceleration_structure_reference_(acceleration_structure_reference) {}

  AccelerationStructureInstanceKHR(const native_type &rhs)
    : AccelerationStructureInstanceKHR(std::bit_cast<AccelerationStructureInstanceKHR>(rhs)) {}

  AccelerationStructureInstanceKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureInstanceKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureInstanceKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  TransformMatrixKHR transform_;
  uint32_t instance_custom_index_ : 24;
  uint32_t mask_ : 8;
  uint32_t instance_shader_binding_table_record_offset_ : 24;
  GeometryInstanceMask flags_ : 8;
  uint64_t acceleration_structure_reference_;
};

struct AabbPositionsKHR {

  using native_type = VkAabbPositionsKHR;

  AabbPositionsKHR(float min_x = {}, float min_y = {}, float min_z = {}, float max_x = {}, float max_y = {}, float max_z = {})
    : min_x_(min_x), min_y_(min_y), min_z_(min_z), max_x_(max_x), max_y_(max_y), max_z_(max_z) {}

  AabbPositionsKHR(const native_type &rhs) : AabbPositionsKHR(std::bit_cast<AabbPositionsKHR>(rhs)) {}

  AabbPositionsKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AabbPositionsKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AabbPositionsKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float min_x_;
  float min_y_;
  float min_z_;
  float max_x_;
  float max_y_;
  float max_z_;
};

struct AccelerationStructureBuildRangeInfoKHR {

  using native_type = VkAccelerationStructureBuildRangeInfoKHR;

  AccelerationStructureBuildRangeInfoKHR(uint32_t primitive_count = {},
                                         uint32_t primitive_offset = {},
                                         uint32_t first_vertex = {},
                                         uint32_t transform_offset = {})
    : primitive_count_(primitive_count), primitive_offset_(primitive_offset), first_vertex_(first_vertex),
      transform_offset_(transform_offset) {}

  AccelerationStructureBuildRangeInfoKHR(const native_type &rhs)
    : AccelerationStructureBuildRangeInfoKHR(std::bit_cast<AccelerationStructureBuildRangeInfoKHR>(rhs)) {}

  AccelerationStructureBuildRangeInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureBuildRangeInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureBuildRangeInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t primitive_count_;
  uint32_t primitive_offset_;
  uint32_t first_vertex_;
  uint32_t transform_offset_;
};

struct AccelerationStructureGeometryKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_KHR;

  using native_type = VkAccelerationStructureGeometryKHR;

  AccelerationStructureGeometryKHR(GeometryType geometry_type = GeometryType::E_TRIANGLES_KHR,
                                   VkAccelerationStructureGeometryDataKHR geometry = {},
                                   GeometryMask flags = {},
                                   const void *next = {})
    : geometry_type_(geometry_type), geometry_(geometry), flags_(flags), next_(next) {}

  AccelerationStructureGeometryKHR(const native_type &rhs)
    : AccelerationStructureGeometryKHR(std::bit_cast<AccelerationStructureGeometryKHR>(rhs)) {}

  AccelerationStructureGeometryKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureGeometryKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureGeometryKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
  const void *next_;
  GeometryType geometry_type_;
  VkAccelerationStructureGeometryDataKHR geometry_;
  GeometryMask flags_;
};

struct AccelerationStructureGeometryAabbsDataKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;

  using native_type = VkAccelerationStructureGeometryAabbsDataKHR;

  AccelerationStructureGeometryAabbsDataKHR(VkDeviceOrHostAddressConstKHR data = {}, DeviceSize stride = {}, const void *next = {})
    : data_(data), stride_(stride), next_(next) {}

  AccelerationStructureGeometryAabbsDataKHR(const native_type &rhs)
    : AccelerationStructureGeometryAabbsDataKHR(std::bit_cast<AccelerationStructureGeometryAabbsDataKHR>(rhs)) {}

  AccelerationStructureGeometryAabbsDataKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureGeometryAabbsDataKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureGeometryAabbsDataKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
  const void *next_;
  VkDeviceOrHostAddressConstKHR data_;
  DeviceSize stride_;
};

struct PhysicalDeviceBorderColorSwizzleFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;

  PhysicalDeviceBorderColorSwizzleFeaturesEXT(bool32 border_color_swizzle = {},
                                              bool32 border_color_swizzle_from_image = {},
                                              void *next = {})
    : border_color_swizzle_(border_color_swizzle), border_color_swizzle_from_image_(border_color_swizzle_from_image), next_(next) {}

  PhysicalDeviceBorderColorSwizzleFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceBorderColorSwizzleFeaturesEXT(std::bit_cast<PhysicalDeviceBorderColorSwizzleFeaturesEXT>(rhs)) {}

  PhysicalDeviceBorderColorSwizzleFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceBorderColorSwizzleFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceBorderColorSwizzleFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT;
  void *next_;
  bool32 border_color_swizzle_;
  bool32 border_color_swizzle_from_image_;
};

struct PhysicalDeviceCustomBorderColorFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;

  using native_type = VkPhysicalDeviceCustomBorderColorFeaturesEXT;

  PhysicalDeviceCustomBorderColorFeaturesEXT(bool32 custom_border_colors = {},
                                             bool32 custom_border_color_without_format = {},
                                             void *next = {})
    : custom_border_colors_(custom_border_colors), custom_border_color_without_format_(custom_border_color_without_format), next_(next) {}

  PhysicalDeviceCustomBorderColorFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceCustomBorderColorFeaturesEXT(std::bit_cast<PhysicalDeviceCustomBorderColorFeaturesEXT>(rhs)) {}

  PhysicalDeviceCustomBorderColorFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCustomBorderColorFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCustomBorderColorFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
  void *next_;
  bool32 custom_border_colors_;
  bool32 custom_border_color_without_format_;
};

struct PhysicalDeviceToolProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TOOL_PROPERTIES;

  using native_type = VkPhysicalDeviceToolProperties;

  PhysicalDeviceToolProperties() = default;

  PhysicalDeviceToolProperties(const native_type &rhs) : PhysicalDeviceToolProperties(std::bit_cast<PhysicalDeviceToolProperties>(rhs)) {}

  PhysicalDeviceToolProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceToolProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceToolProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TOOL_PROPERTIES;
  void *next_ = {};
  std::array<char, VK_MAX_EXTENSION_NAME_SIZE> name_ = {};
  std::array<char, VK_MAX_EXTENSION_NAME_SIZE> version_ = {};
  ToolPurposeMask purposes_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
  std::array<char, VK_MAX_EXTENSION_NAME_SIZE> layer_ = {};
};

struct PipelineCompilerControlCreateInfoAMD {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;

  using native_type = VkPipelineCompilerControlCreateInfoAMD;

  PipelineCompilerControlCreateInfoAMD(PipelineCompilerControlMask compiler_control_flags = {}, const void *next = {})
    : compiler_control_flags_(compiler_control_flags), next_(next) {}

  PipelineCompilerControlCreateInfoAMD(const native_type &rhs)
    : PipelineCompilerControlCreateInfoAMD(std::bit_cast<PipelineCompilerControlCreateInfoAMD>(rhs)) {}

  PipelineCompilerControlCreateInfoAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCompilerControlCreateInfoAMD>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCompilerControlCreateInfoAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
  const void *next_;
  PipelineCompilerControlMask compiler_control_flags_;
};

struct PhysicalDeviceVulkan13Properties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;

  using native_type = VkPhysicalDeviceVulkan13Properties;

  PhysicalDeviceVulkan13Properties() = default;

  PhysicalDeviceVulkan13Properties(const native_type &rhs)
    : PhysicalDeviceVulkan13Properties(std::bit_cast<PhysicalDeviceVulkan13Properties>(rhs)) {}

  PhysicalDeviceVulkan13Properties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkan13Properties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkan13Properties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
  void *next_ = {};
  uint32_t min_subgroup_size_ = {};
  uint32_t max_subgroup_size_ = {};
  uint32_t max_compute_workgroup_subgroups_ = {};
  ShaderStageMask required_subgroup_size_stages_ = {};
  uint32_t max_inline_uniform_block_size_ = {};
  uint32_t max_per_stage_descriptor_inline_uniform_blocks_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_inline_uniform_blocks_ = {};
  uint32_t max_descriptor_set_inline_uniform_blocks_ = {};
  uint32_t max_descriptor_set_update_after_bind_inline_uniform_blocks_ = {};
  uint32_t max_inline_uniform_total_size_ = {};
  bool32 integer_dot_product8bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product8bit_signed_accelerated_ = {};
  bool32 integer_dot_product8bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product4x8bit_packed_unsigned_accelerated_ = {};
  bool32 integer_dot_product4x8bit_packed_signed_accelerated_ = {};
  bool32 integer_dot_product4x8bit_packed_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product16bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product16bit_signed_accelerated_ = {};
  bool32 integer_dot_product16bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product32bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product32bit_signed_accelerated_ = {};
  bool32 integer_dot_product32bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product64bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product64bit_signed_accelerated_ = {};
  bool32 integer_dot_product64bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating8bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating8bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating8bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating4x8bit_packed_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating4x8bit_packed_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating4x8bit_packed_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating16bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating16bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating16bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating32bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating32bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating32bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating64bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating64bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating64bit_mixed_signedness_accelerated_ = {};
  DeviceSize storage_texel_buffer_offset_alignment_bytes_ = {};
  bool32 storage_texel_buffer_offset_single_texel_alignment_ = {};
  DeviceSize uniform_texel_buffer_offset_alignment_bytes_ = {};
  bool32 uniform_texel_buffer_offset_single_texel_alignment_ = {};
  DeviceSize max_buffer_size_ = {};
};

struct DeviceQueueShaderCoreControlCreateInfoARM {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM;

  using native_type = VkDeviceQueueShaderCoreControlCreateInfoARM;

  DeviceQueueShaderCoreControlCreateInfoARM(uint32_t shader_core_count = {}, void *next = {})
    : shader_core_count_(shader_core_count), next_(next) {}

  DeviceQueueShaderCoreControlCreateInfoARM(const native_type &rhs)
    : DeviceQueueShaderCoreControlCreateInfoARM(std::bit_cast<DeviceQueueShaderCoreControlCreateInfoARM>(rhs)) {}

  DeviceQueueShaderCoreControlCreateInfoARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceQueueShaderCoreControlCreateInfoARM>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceQueueShaderCoreControlCreateInfoARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM;
  void *next_;
  uint32_t shader_core_count_;
};

struct PhysicalDeviceVulkan13Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;

  using native_type = VkPhysicalDeviceVulkan13Features;

  PhysicalDeviceVulkan13Features(bool32 robust_image_access = {},
                                 bool32 inline_uniform_block = {},
                                 bool32 descriptor_binding_inline_uniform_block_update_after_bind = {},
                                 bool32 pipeline_creation_cache_control = {},
                                 bool32 private_data = {},
                                 bool32 shader_demote_to_helper_invocation = {},
                                 bool32 shader_terminate_invocation = {},
                                 bool32 subgroup_size_control = {},
                                 bool32 compute_full_subgroups = {},
                                 bool32 synchronization2 = {},
                                 bool32 texture_compression_astc_hdr = {},
                                 bool32 shader_zero_initialize_workgroup_memory = {},
                                 bool32 dynamic_rendering = {},
                                 bool32 shader_integer_dot_product = {},
                                 bool32 maintenance4 = {},
                                 void *next = {})
    : robust_image_access_(robust_image_access), inline_uniform_block_(inline_uniform_block),
      descriptor_binding_inline_uniform_block_update_after_bind_(descriptor_binding_inline_uniform_block_update_after_bind),
      pipeline_creation_cache_control_(pipeline_creation_cache_control), private_data_(private_data),
      shader_demote_to_helper_invocation_(shader_demote_to_helper_invocation), shader_terminate_invocation_(shader_terminate_invocation),
      subgroup_size_control_(subgroup_size_control), compute_full_subgroups_(compute_full_subgroups), synchronization2_(synchronization2),
      texture_compression_astc_hdr_(texture_compression_astc_hdr),
      shader_zero_initialize_workgroup_memory_(shader_zero_initialize_workgroup_memory), dynamic_rendering_(dynamic_rendering),
      shader_integer_dot_product_(shader_integer_dot_product), maintenance4_(maintenance4), next_(next) {}

  PhysicalDeviceVulkan13Features(const native_type &rhs)
    : PhysicalDeviceVulkan13Features(std::bit_cast<PhysicalDeviceVulkan13Features>(rhs)) {}

  PhysicalDeviceVulkan13Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkan13Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkan13Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;
  void *next_;
  bool32 robust_image_access_;
  bool32 inline_uniform_block_;
  bool32 descriptor_binding_inline_uniform_block_update_after_bind_;
  bool32 pipeline_creation_cache_control_;
  bool32 private_data_;
  bool32 shader_demote_to_helper_invocation_;
  bool32 shader_terminate_invocation_;
  bool32 subgroup_size_control_;
  bool32 compute_full_subgroups_;
  bool32 synchronization2_;
  bool32 texture_compression_astc_hdr_;
  bool32 shader_zero_initialize_workgroup_memory_;
  bool32 dynamic_rendering_;
  bool32 shader_integer_dot_product_;
  bool32 maintenance4_;
};

struct AccelerationStructureGeometryTrianglesDataKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;

  using native_type = VkAccelerationStructureGeometryTrianglesDataKHR;

  AccelerationStructureGeometryTrianglesDataKHR(Format vertex_format = Format::E_UNDEFINED,
                                                VkDeviceOrHostAddressConstKHR vertex_data = {},
                                                DeviceSize vertex_stride = {},
                                                uint32_t max_vertex = {},
                                                IndexType index_type = IndexType::E_UINT16,
                                                VkDeviceOrHostAddressConstKHR index_data = {},
                                                VkDeviceOrHostAddressConstKHR transform_data = {},
                                                const void *next = {})
    : vertex_format_(vertex_format), vertex_data_(vertex_data), vertex_stride_(vertex_stride), max_vertex_(max_vertex),
      index_type_(index_type), index_data_(index_data), transform_data_(transform_data), next_(next) {}

  AccelerationStructureGeometryTrianglesDataKHR(const native_type &rhs)
    : AccelerationStructureGeometryTrianglesDataKHR(std::bit_cast<AccelerationStructureGeometryTrianglesDataKHR>(rhs)) {}

  AccelerationStructureGeometryTrianglesDataKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureGeometryTrianglesDataKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureGeometryTrianglesDataKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
  const void *next_;
  Format vertex_format_;
  VkDeviceOrHostAddressConstKHR vertex_data_;
  DeviceSize vertex_stride_;
  uint32_t max_vertex_;
  IndexType index_type_;
  VkDeviceOrHostAddressConstKHR index_data_;
  VkDeviceOrHostAddressConstKHR transform_data_;
};

struct PhysicalDeviceVulkan11Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;

  using native_type = VkPhysicalDeviceVulkan11Features;

  PhysicalDeviceVulkan11Features(bool32 storage_buffer16bit_access = {},
                                 bool32 uniform_and_storage_buffer16bit_access = {},
                                 bool32 storage_push_constant16 = {},
                                 bool32 storage_input_output16 = {},
                                 bool32 multiview = {},
                                 bool32 multiview_geometry_shader = {},
                                 bool32 multiview_tessellation_shader = {},
                                 bool32 variable_pointers_storage_buffer = {},
                                 bool32 variable_pointers = {},
                                 bool32 protected_memory = {},
                                 bool32 sampler_ycbcr_conversion = {},
                                 bool32 shader_draw_parameters = {},
                                 void *next = {})
    : storage_buffer16bit_access_(storage_buffer16bit_access),
      uniform_and_storage_buffer16bit_access_(uniform_and_storage_buffer16bit_access), storage_push_constant16_(storage_push_constant16),
      storage_input_output16_(storage_input_output16), multiview_(multiview), multiview_geometry_shader_(multiview_geometry_shader),
      multiview_tessellation_shader_(multiview_tessellation_shader), variable_pointers_storage_buffer_(variable_pointers_storage_buffer),
      variable_pointers_(variable_pointers), protected_memory_(protected_memory), sampler_ycbcr_conversion_(sampler_ycbcr_conversion),
      shader_draw_parameters_(shader_draw_parameters), next_(next) {}

  PhysicalDeviceVulkan11Features(const native_type &rhs)
    : PhysicalDeviceVulkan11Features(std::bit_cast<PhysicalDeviceVulkan11Features>(rhs)) {}

  PhysicalDeviceVulkan11Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkan11Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkan11Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
  void *next_;
  bool32 storage_buffer16bit_access_;
  bool32 uniform_and_storage_buffer16bit_access_;
  bool32 storage_push_constant16_;
  bool32 storage_input_output16_;
  bool32 multiview_;
  bool32 multiview_geometry_shader_;
  bool32 multiview_tessellation_shader_;
  bool32 variable_pointers_storage_buffer_;
  bool32 variable_pointers_;
  bool32 protected_memory_;
  bool32 sampler_ycbcr_conversion_;
  bool32 shader_draw_parameters_;
};

struct PipelineRasterizationLineStateCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR;

  using native_type = VkPipelineRasterizationLineStateCreateInfoKHR;

  PipelineRasterizationLineStateCreateInfoKHR(LineRasterizationMode line_rasterization_mode = LineRasterizationMode::E_DEFAULT_KHR,
                                              bool32 stippled_line_enable = {},
                                              uint32_t line_stipple_factor = {},
                                              uint16_t line_stipple_pattern = {},
                                              const void *next = {})
    : line_rasterization_mode_(line_rasterization_mode), stippled_line_enable_(stippled_line_enable),
      line_stipple_factor_(line_stipple_factor), line_stipple_pattern_(line_stipple_pattern), next_(next) {}

  PipelineRasterizationLineStateCreateInfoKHR(const native_type &rhs)
    : PipelineRasterizationLineStateCreateInfoKHR(std::bit_cast<PipelineRasterizationLineStateCreateInfoKHR>(rhs)) {}

  PipelineRasterizationLineStateCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationLineStateCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationLineStateCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR;
  const void *next_;
  LineRasterizationMode line_rasterization_mode_;
  bool32 stippled_line_enable_;
  uint32_t line_stipple_factor_;
  uint16_t line_stipple_pattern_;
};

struct PhysicalDeviceLineRasterizationPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceLineRasterizationPropertiesKHR;

  PhysicalDeviceLineRasterizationPropertiesKHR() = default;

  PhysicalDeviceLineRasterizationPropertiesKHR(const native_type &rhs)
    : PhysicalDeviceLineRasterizationPropertiesKHR(std::bit_cast<PhysicalDeviceLineRasterizationPropertiesKHR>(rhs)) {}

  PhysicalDeviceLineRasterizationPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLineRasterizationPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLineRasterizationPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t line_sub_pixel_precision_bits_ = {};
};

struct MemoryOpaqueCaptureAddressAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;

  using native_type = VkMemoryOpaqueCaptureAddressAllocateInfo;

  MemoryOpaqueCaptureAddressAllocateInfo(uint64_t opaque_capture_address = {}, const void *next = {})
    : opaque_capture_address_(opaque_capture_address), next_(next) {}

  MemoryOpaqueCaptureAddressAllocateInfo(const native_type &rhs)
    : MemoryOpaqueCaptureAddressAllocateInfo(std::bit_cast<MemoryOpaqueCaptureAddressAllocateInfo>(rhs)) {}

  MemoryOpaqueCaptureAddressAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryOpaqueCaptureAddressAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryOpaqueCaptureAddressAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
  const void *next_;
  uint64_t opaque_capture_address_;
};

struct RenderingInputAttachmentIndexInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR;

  using native_type = VkRenderingInputAttachmentIndexInfoKHR;

  RenderingInputAttachmentIndexInfoKHR(uint32_t color_attachment_count = {},
                                       const uint32_t *p_color_attachment_input_indices = {},
                                       const uint32_t *p_depth_input_attachment_index = {},
                                       const uint32_t *p_stencil_input_attachment_index = {},
                                       const void *next = {})
    : color_attachment_count_(color_attachment_count), p_color_attachment_input_indices_(p_color_attachment_input_indices),
      p_depth_input_attachment_index_(p_depth_input_attachment_index), p_stencil_input_attachment_index_(p_stencil_input_attachment_index),
      next_(next) {}

  RenderingInputAttachmentIndexInfoKHR(const native_type &rhs)
    : RenderingInputAttachmentIndexInfoKHR(std::bit_cast<RenderingInputAttachmentIndexInfoKHR>(rhs)) {}

  RenderingInputAttachmentIndexInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingInputAttachmentIndexInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingInputAttachmentIndexInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR;
  const void *next_;
  uint32_t color_attachment_count_;
  const uint32_t *p_color_attachment_input_indices_;
  const uint32_t *p_depth_input_attachment_index_;
  const uint32_t *p_stencil_input_attachment_index_;
};

struct PhysicalDeviceClusterCullingShaderPropertiesHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI;

  using native_type = VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;

  PhysicalDeviceClusterCullingShaderPropertiesHUAWEI() = default;

  PhysicalDeviceClusterCullingShaderPropertiesHUAWEI(const native_type &rhs)
    : PhysicalDeviceClusterCullingShaderPropertiesHUAWEI(std::bit_cast<PhysicalDeviceClusterCullingShaderPropertiesHUAWEI>(rhs)) {}

  PhysicalDeviceClusterCullingShaderPropertiesHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceClusterCullingShaderPropertiesHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceClusterCullingShaderPropertiesHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI;
  void *next_ = {};
  std::array<uint32_t, 3> max_work_group_count_ = {};
  std::array<uint32_t, 3> max_work_group_size_ = {};
  uint32_t max_output_cluster_count_ = {};
  DeviceSize indirect_buffer_offset_alignment_ = {};
};

struct PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;

  PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(bool32 shader_maximal_reconvergence = {}, void *next = {})
    : shader_maximal_reconvergence_(shader_maximal_reconvergence), next_(next) {}

  PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(std::bit_cast<PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR;
  void *next_;
  bool32 shader_maximal_reconvergence_;
};

struct ReleaseSwapchainImagesInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT;

  using native_type = VkReleaseSwapchainImagesInfoEXT;

  ReleaseSwapchainImagesInfoEXT(VkSwapchainKHR swapchain = {},
                                uint32_t image_index_count = {},
                                const uint32_t *p_image_indices = {},
                                const void *next = {})
    : swapchain_(swapchain), image_index_count_(image_index_count), p_image_indices_(p_image_indices), next_(next) {}

  ReleaseSwapchainImagesInfoEXT(const native_type &rhs)
    : ReleaseSwapchainImagesInfoEXT(std::bit_cast<ReleaseSwapchainImagesInfoEXT>(rhs)) {}

  ReleaseSwapchainImagesInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ReleaseSwapchainImagesInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ReleaseSwapchainImagesInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT;
  const void *next_;
  VkSwapchainKHR swapchain_;
  uint32_t image_index_count_;
  const uint32_t *p_image_indices_;
};

struct SubpassShadingPipelineCreateInfoHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;

  using native_type = VkSubpassShadingPipelineCreateInfoHUAWEI;

  SubpassShadingPipelineCreateInfoHUAWEI(VkRenderPass render_pass = {}, uint32_t subpass = {}, void *next = {})
    : render_pass_(render_pass), subpass_(subpass), next_(next) {}

  SubpassShadingPipelineCreateInfoHUAWEI(const native_type &rhs)
    : SubpassShadingPipelineCreateInfoHUAWEI(std::bit_cast<SubpassShadingPipelineCreateInfoHUAWEI>(rhs)) {}

  SubpassShadingPipelineCreateInfoHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassShadingPipelineCreateInfoHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassShadingPipelineCreateInfoHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;
  void *next_;
  VkRenderPass render_pass_;
  uint32_t subpass_;
};

struct PhysicalDeviceSubgroupSizeControlFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;

  using native_type = VkPhysicalDeviceSubgroupSizeControlFeatures;

  PhysicalDeviceSubgroupSizeControlFeatures(bool32 subgroup_size_control = {}, bool32 compute_full_subgroups = {}, void *next = {})
    : subgroup_size_control_(subgroup_size_control), compute_full_subgroups_(compute_full_subgroups), next_(next) {}

  PhysicalDeviceSubgroupSizeControlFeatures(const native_type &rhs)
    : PhysicalDeviceSubgroupSizeControlFeatures(std::bit_cast<PhysicalDeviceSubgroupSizeControlFeatures>(rhs)) {}

  PhysicalDeviceSubgroupSizeControlFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSubgroupSizeControlFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSubgroupSizeControlFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
  void *next_;
  bool32 subgroup_size_control_;
  bool32 compute_full_subgroups_;
};

struct PhysicalDeviceTexelBufferAlignmentProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;

  using native_type = VkPhysicalDeviceTexelBufferAlignmentProperties;

  PhysicalDeviceTexelBufferAlignmentProperties() = default;

  PhysicalDeviceTexelBufferAlignmentProperties(const native_type &rhs)
    : PhysicalDeviceTexelBufferAlignmentProperties(std::bit_cast<PhysicalDeviceTexelBufferAlignmentProperties>(rhs)) {}

  PhysicalDeviceTexelBufferAlignmentProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTexelBufferAlignmentProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTexelBufferAlignmentProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
  void *next_ = {};
  DeviceSize storage_texel_buffer_offset_alignment_bytes_ = {};
  bool32 storage_texel_buffer_offset_single_texel_alignment_ = {};
  DeviceSize uniform_texel_buffer_offset_alignment_bytes_ = {};
  bool32 uniform_texel_buffer_offset_single_texel_alignment_ = {};
};

struct PhysicalDeviceTexelBufferAlignmentFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;

  PhysicalDeviceTexelBufferAlignmentFeaturesEXT(bool32 texel_buffer_alignment = {}, void *next = {})
    : texel_buffer_alignment_(texel_buffer_alignment), next_(next) {}

  PhysicalDeviceTexelBufferAlignmentFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceTexelBufferAlignmentFeaturesEXT(std::bit_cast<PhysicalDeviceTexelBufferAlignmentFeaturesEXT>(rhs)) {}

  PhysicalDeviceTexelBufferAlignmentFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTexelBufferAlignmentFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTexelBufferAlignmentFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
  void *next_;
  bool32 texel_buffer_alignment_;
};

struct PipelineExecutableInternalRepresentationKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;

  using native_type = VkPipelineExecutableInternalRepresentationKHR;

  PipelineExecutableInternalRepresentationKHR() = default;

  PipelineExecutableInternalRepresentationKHR(const native_type &rhs)
    : PipelineExecutableInternalRepresentationKHR(std::bit_cast<PipelineExecutableInternalRepresentationKHR>(rhs)) {}

  PipelineExecutableInternalRepresentationKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineExecutableInternalRepresentationKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineExecutableInternalRepresentationKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
  void *next_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> name_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
  bool32 is_text_ = {};
  size_t data_size_ = {};
  void *p_data_ = {};
};

struct DeviceMemoryOpaqueCaptureAddressInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;

  using native_type = VkDeviceMemoryOpaqueCaptureAddressInfo;

  DeviceMemoryOpaqueCaptureAddressInfo(VkDeviceMemory memory = {}, const void *next = {}) : memory_(memory), next_(next) {}

  DeviceMemoryOpaqueCaptureAddressInfo(const native_type &rhs)
    : DeviceMemoryOpaqueCaptureAddressInfo(std::bit_cast<DeviceMemoryOpaqueCaptureAddressInfo>(rhs)) {}

  DeviceMemoryOpaqueCaptureAddressInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceMemoryOpaqueCaptureAddressInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceMemoryOpaqueCaptureAddressInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
  const void *next_;
  VkDeviceMemory memory_;
};

struct PipelineExecutableStatisticKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_EXECUTABLE_STATISTIC_KHR;

  using native_type = VkPipelineExecutableStatisticKHR;

  PipelineExecutableStatisticKHR() = default;

  PipelineExecutableStatisticKHR(const native_type &rhs)
    : PipelineExecutableStatisticKHR(std::bit_cast<PipelineExecutableStatisticKHR>(rhs)) {}

  PipelineExecutableStatisticKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineExecutableStatisticKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineExecutableStatisticKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_EXECUTABLE_STATISTIC_KHR;
  void *next_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> name_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
  PipelineExecutableStatisticFormat format_ = {};
  VkPipelineExecutableStatisticValueKHR value_ = {};
};

struct PipelineExecutablePropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_EXECUTABLE_PROPERTIES_KHR;

  using native_type = VkPipelineExecutablePropertiesKHR;

  PipelineExecutablePropertiesKHR() = default;

  PipelineExecutablePropertiesKHR(const native_type &rhs)
    : PipelineExecutablePropertiesKHR(std::bit_cast<PipelineExecutablePropertiesKHR>(rhs)) {}

  PipelineExecutablePropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineExecutablePropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineExecutablePropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
  void *next_ = {};
  ShaderStageMask stages_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> name_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
  uint32_t subgroup_size_ = {};
};

struct PhysicalDeviceVideoMaintenance1FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR;

  using native_type = VkPhysicalDeviceVideoMaintenance1FeaturesKHR;

  PhysicalDeviceVideoMaintenance1FeaturesKHR(bool32 video_maintenance1 = {}, void *next = {})
    : video_maintenance1_(video_maintenance1), next_(next) {}

  PhysicalDeviceVideoMaintenance1FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceVideoMaintenance1FeaturesKHR(std::bit_cast<PhysicalDeviceVideoMaintenance1FeaturesKHR>(rhs)) {}

  PhysicalDeviceVideoMaintenance1FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVideoMaintenance1FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVideoMaintenance1FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR;
  void *next_;
  bool32 video_maintenance1_;
};

struct PipelineInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_INFO_KHR;

  using native_type = VkPipelineInfoKHR;

  PipelineInfoKHR(VkPipeline pipeline = {}, const void *next = {}) : pipeline_(pipeline), next_(next) {}

  PipelineInfoKHR(const native_type &rhs) : PipelineInfoKHR(std::bit_cast<PipelineInfoKHR>(rhs)) {}

  PipelineInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_INFO_KHR;
  const void *next_;
  VkPipeline pipeline_;
};

struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;

  using native_type = VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

  PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(bool32 pipeline_executable_info = {}, void *next = {})
    : pipeline_executable_info_(pipeline_executable_info), next_(next) {}

  PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(const native_type &rhs)
    : PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(std::bit_cast<PhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(rhs)) {}

  PhysicalDevicePipelineExecutablePropertiesFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelineExecutablePropertiesFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
  void *next_;
  bool32 pipeline_executable_info_;
};

struct AttachmentDescriptionStencilLayout {

  static constexpr StructureType structure_type = StructureType::E_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;

  using native_type = VkAttachmentDescriptionStencilLayout;

  AttachmentDescriptionStencilLayout(ImageLayout stencil_initial_layout = ImageLayout::E_UNDEFINED,
                                     ImageLayout stencil_final_layout = ImageLayout::E_UNDEFINED,
                                     void *next = {})
    : stencil_initial_layout_(stencil_initial_layout), stencil_final_layout_(stencil_final_layout), next_(next) {}

  AttachmentDescriptionStencilLayout(const native_type &rhs)
    : AttachmentDescriptionStencilLayout(std::bit_cast<AttachmentDescriptionStencilLayout>(rhs)) {}

  AttachmentDescriptionStencilLayout &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentDescriptionStencilLayout>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentDescriptionStencilLayout &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
  void *next_;
  ImageLayout stencil_initial_layout_;
  ImageLayout stencil_final_layout_;
};

struct PhysicalDeviceRayTracingMotionBlurFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;

  using native_type = VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;

  PhysicalDeviceRayTracingMotionBlurFeaturesNV(bool32 ray_tracing_motion_blur = {},
                                               bool32 ray_tracing_motion_blur_pipeline_trace_rays_indirect = {},
                                               void *next = {})
    : ray_tracing_motion_blur_(ray_tracing_motion_blur),
      ray_tracing_motion_blur_pipeline_trace_rays_indirect_(ray_tracing_motion_blur_pipeline_trace_rays_indirect), next_(next) {}

  PhysicalDeviceRayTracingMotionBlurFeaturesNV(const native_type &rhs)
    : PhysicalDeviceRayTracingMotionBlurFeaturesNV(std::bit_cast<PhysicalDeviceRayTracingMotionBlurFeaturesNV>(rhs)) {}

  PhysicalDeviceRayTracingMotionBlurFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingMotionBlurFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingMotionBlurFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;
  void *next_;
  bool32 ray_tracing_motion_blur_;
  bool32 ray_tracing_motion_blur_pipeline_trace_rays_indirect_;
};

struct PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;

  using native_type = VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;

  PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(bool32 primitive_topology_list_restart = {},
                                                        bool32 primitive_topology_patch_list_restart = {},
                                                        void *next = {})
    : primitive_topology_list_restart_(primitive_topology_list_restart),
      primitive_topology_patch_list_restart_(primitive_topology_patch_list_restart), next_(next) {}

  PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(std::bit_cast<PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT>(rhs)) {}

  PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;
  void *next_;
  bool32 primitive_topology_list_restart_;
  bool32 primitive_topology_patch_list_restart_;
};

struct AttachmentReferenceStencilLayout {

  static constexpr StructureType structure_type = StructureType::E_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;

  using native_type = VkAttachmentReferenceStencilLayout;

  AttachmentReferenceStencilLayout(ImageLayout stencil_layout = ImageLayout::E_UNDEFINED, void *next = {})
    : stencil_layout_(stencil_layout), next_(next) {}

  AttachmentReferenceStencilLayout(const native_type &rhs)
    : AttachmentReferenceStencilLayout(std::bit_cast<AttachmentReferenceStencilLayout>(rhs)) {}

  AttachmentReferenceStencilLayout &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentReferenceStencilLayout>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentReferenceStencilLayout &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
  void *next_;
  ImageLayout stencil_layout_;
};

struct PhysicalDeviceCooperativeMatrixFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR;

  using native_type = VkPhysicalDeviceCooperativeMatrixFeaturesKHR;

  PhysicalDeviceCooperativeMatrixFeaturesKHR(bool32 cooperative_matrix = {},
                                             bool32 cooperative_matrix_robust_buffer_access = {},
                                             void *next = {})
    : cooperative_matrix_(cooperative_matrix), cooperative_matrix_robust_buffer_access_(cooperative_matrix_robust_buffer_access),
      next_(next) {}

  PhysicalDeviceCooperativeMatrixFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceCooperativeMatrixFeaturesKHR(std::bit_cast<PhysicalDeviceCooperativeMatrixFeaturesKHR>(rhs)) {}

  PhysicalDeviceCooperativeMatrixFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCooperativeMatrixFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCooperativeMatrixFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR;
  void *next_;
  bool32 cooperative_matrix_;
  bool32 cooperative_matrix_robust_buffer_access_;
};

struct PhysicalDeviceFragmentShaderInterlockFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;

  using native_type = VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;

  PhysicalDeviceFragmentShaderInterlockFeaturesEXT(bool32 fragment_shader_sample_interlock = {},
                                                   bool32 fragment_shader_pixel_interlock = {},
                                                   bool32 fragment_shader_shading_rate_interlock = {},
                                                   void *next = {})
    : fragment_shader_sample_interlock_(fragment_shader_sample_interlock),
      fragment_shader_pixel_interlock_(fragment_shader_pixel_interlock),
      fragment_shader_shading_rate_interlock_(fragment_shader_shading_rate_interlock), next_(next) {}

  PhysicalDeviceFragmentShaderInterlockFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceFragmentShaderInterlockFeaturesEXT(std::bit_cast<PhysicalDeviceFragmentShaderInterlockFeaturesEXT>(rhs)) {}

  PhysicalDeviceFragmentShaderInterlockFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShaderInterlockFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShaderInterlockFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
  void *next_;
  bool32 fragment_shader_sample_interlock_;
  bool32 fragment_shader_pixel_interlock_;
  bool32 fragment_shader_shading_rate_interlock_;
};

struct VideoEncodeH265RateControlLayerInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR;

  using native_type = VkVideoEncodeH265RateControlLayerInfoKHR;

  VideoEncodeH265RateControlLayerInfoKHR(bool32 use_min_qp = {},
                                         VideoEncodeH265QpKHR min_qp = {},
                                         bool32 use_max_qp = {},
                                         VideoEncodeH265QpKHR max_qp = {},
                                         bool32 use_max_frame_size = {},
                                         VideoEncodeH265FrameSizeKHR max_frame_size = {},
                                         const void *next = {})
    : use_min_qp_(use_min_qp), min_qp_(min_qp), use_max_qp_(use_max_qp), max_qp_(max_qp), use_max_frame_size_(use_max_frame_size),
      max_frame_size_(max_frame_size), next_(next) {}

  VideoEncodeH265RateControlLayerInfoKHR(const native_type &rhs)
    : VideoEncodeH265RateControlLayerInfoKHR(std::bit_cast<VideoEncodeH265RateControlLayerInfoKHR>(rhs)) {}

  VideoEncodeH265RateControlLayerInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265RateControlLayerInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265RateControlLayerInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR;
  const void *next_;
  bool32 use_min_qp_;
  VideoEncodeH265QpKHR min_qp_;
  bool32 use_max_qp_;
  VideoEncodeH265QpKHR max_qp_;
  bool32 use_max_frame_size_;
  VideoEncodeH265FrameSizeKHR max_frame_size_;
};

struct PhysicalDeviceShaderSMBuiltinsFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;

  using native_type = VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;

  PhysicalDeviceShaderSMBuiltinsFeaturesNV(bool32 shader_smbuiltins = {}, void *next = {})
    : shader_smbuiltins_(shader_smbuiltins), next_(next) {}

  PhysicalDeviceShaderSMBuiltinsFeaturesNV(const native_type &rhs)
    : PhysicalDeviceShaderSMBuiltinsFeaturesNV(std::bit_cast<PhysicalDeviceShaderSMBuiltinsFeaturesNV>(rhs)) {}

  PhysicalDeviceShaderSMBuiltinsFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderSMBuiltinsFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderSMBuiltinsFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
  void *next_;
  bool32 shader_smbuiltins_;
};

struct OutOfBandQueueTypeInfoNV {

  static constexpr StructureType structure_type = StructureType::E_OUT_OF_BAND_QUEUE_TYPE_INFO_NV;

  using native_type = VkOutOfBandQueueTypeInfoNV;

  OutOfBandQueueTypeInfoNV(OutOfBandQueueType queue_type = OutOfBandQueueType::E_RENDER_NV, const void *next = {})
    : queue_type_(queue_type), next_(next) {}

  OutOfBandQueueTypeInfoNV(const native_type &rhs) : OutOfBandQueueTypeInfoNV(std::bit_cast<OutOfBandQueueTypeInfoNV>(rhs)) {}

  OutOfBandQueueTypeInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<OutOfBandQueueTypeInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const OutOfBandQueueTypeInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OUT_OF_BAND_QUEUE_TYPE_INFO_NV;
  const void *next_;
  OutOfBandQueueType queue_type_;
};

struct PhysicalDeviceIndexTypeUint8FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR;

  using native_type = VkPhysicalDeviceIndexTypeUint8FeaturesKHR;

  PhysicalDeviceIndexTypeUint8FeaturesKHR(bool32 index_type_uint8 = {}, void *next = {})
    : index_type_uint8_(index_type_uint8), next_(next) {}

  PhysicalDeviceIndexTypeUint8FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceIndexTypeUint8FeaturesKHR(std::bit_cast<PhysicalDeviceIndexTypeUint8FeaturesKHR>(rhs)) {}

  PhysicalDeviceIndexTypeUint8FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceIndexTypeUint8FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceIndexTypeUint8FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR;
  void *next_;
  bool32 index_type_uint8_;
};

struct PerformanceOverrideInfoINTEL {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_OVERRIDE_INFO_INTEL;

  using native_type = VkPerformanceOverrideInfoINTEL;

  PerformanceOverrideInfoINTEL(PerformanceOverrideType type = PerformanceOverrideType::E_NULL_HARDWARE_INTEL,
                               bool32 enable = {},
                               uint64_t parameter = {},
                               const void *next = {})
    : type_(type), enable_(enable), parameter_(parameter), next_(next) {}

  PerformanceOverrideInfoINTEL(const native_type &rhs) : PerformanceOverrideInfoINTEL(std::bit_cast<PerformanceOverrideInfoINTEL>(rhs)) {}

  PerformanceOverrideInfoINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceOverrideInfoINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceOverrideInfoINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_OVERRIDE_INFO_INTEL;
  const void *next_;
  PerformanceOverrideType type_;
  bool32 enable_;
  uint64_t parameter_;
};

struct VideoDecodeH265SessionParametersAddInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;

  using native_type = VkVideoDecodeH265SessionParametersAddInfoKHR;

  VideoDecodeH265SessionParametersAddInfoKHR(uint32_t std_vpscount = {},
                                             const StdVideoH265VideoParameterSet *p_std_vpss = {},
                                             uint32_t std_spscount = {},
                                             const StdVideoH265SequenceParameterSet *p_std_spss = {},
                                             uint32_t std_ppscount = {},
                                             const StdVideoH265PictureParameterSet *p_std_ppss = {},
                                             const void *next = {})
    : std_vpscount_(std_vpscount), p_std_vpss_(p_std_vpss), std_spscount_(std_spscount), p_std_spss_(p_std_spss),
      std_ppscount_(std_ppscount), p_std_ppss_(p_std_ppss), next_(next) {}

  VideoDecodeH265SessionParametersAddInfoKHR(const native_type &rhs)
    : VideoDecodeH265SessionParametersAddInfoKHR(std::bit_cast<VideoDecodeH265SessionParametersAddInfoKHR>(rhs)) {}

  VideoDecodeH265SessionParametersAddInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH265SessionParametersAddInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH265SessionParametersAddInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;
  const void *next_;
  uint32_t std_vpscount_;
  const StdVideoH265VideoParameterSet *p_std_vpss_;
  uint32_t std_spscount_;
  const StdVideoH265SequenceParameterSet *p_std_spss_;
  uint32_t std_ppscount_;
  const StdVideoH265PictureParameterSet *p_std_ppss_;
};

struct PerformanceStreamMarkerInfoINTEL {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_STREAM_MARKER_INFO_INTEL;

  using native_type = VkPerformanceStreamMarkerInfoINTEL;

  PerformanceStreamMarkerInfoINTEL(uint32_t marker = {}, const void *next = {}) : marker_(marker), next_(next) {}

  PerformanceStreamMarkerInfoINTEL(const native_type &rhs)
    : PerformanceStreamMarkerInfoINTEL(std::bit_cast<PerformanceStreamMarkerInfoINTEL>(rhs)) {}

  PerformanceStreamMarkerInfoINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceStreamMarkerInfoINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceStreamMarkerInfoINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
  const void *next_;
  uint32_t marker_;
};

struct SamplerBlockMatchWindowCreateInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM;

  using native_type = VkSamplerBlockMatchWindowCreateInfoQCOM;

  SamplerBlockMatchWindowCreateInfoQCOM(Extent2D window_extent = {},
                                        BlockMatchWindowCompareMode window_compare_mode = BlockMatchWindowCompareMode::E_MIN_QCOM,
                                        const void *next = {})
    : window_extent_(window_extent), window_compare_mode_(window_compare_mode), next_(next) {}

  SamplerBlockMatchWindowCreateInfoQCOM(const native_type &rhs)
    : SamplerBlockMatchWindowCreateInfoQCOM(std::bit_cast<SamplerBlockMatchWindowCreateInfoQCOM>(rhs)) {}

  SamplerBlockMatchWindowCreateInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerBlockMatchWindowCreateInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerBlockMatchWindowCreateInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM;
  const void *next_;
  Extent2D window_extent_;
  BlockMatchWindowCompareMode window_compare_mode_;
};

struct QueryPoolPerformanceQueryCreateInfoINTEL {

  static constexpr StructureType structure_type = StructureType::E_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;

  using native_type = VkQueryPoolPerformanceQueryCreateInfoINTEL;

  QueryPoolPerformanceQueryCreateInfoINTEL(QueryPoolSamplingMode performance_counters_sampling = QueryPoolSamplingMode::E_MANUAL_INTEL,
                                           const void *next = {})
    : performance_counters_sampling_(performance_counters_sampling), next_(next) {}

  QueryPoolPerformanceQueryCreateInfoINTEL(const native_type &rhs)
    : QueryPoolPerformanceQueryCreateInfoINTEL(std::bit_cast<QueryPoolPerformanceQueryCreateInfoINTEL>(rhs)) {}

  QueryPoolPerformanceQueryCreateInfoINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueryPoolPerformanceQueryCreateInfoINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const QueryPoolPerformanceQueryCreateInfoINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
  const void *next_;
  QueryPoolSamplingMode performance_counters_sampling_;
};

struct InitializePerformanceApiInfoINTEL {

  static constexpr StructureType structure_type = StructureType::E_INITIALIZE_PERFORMANCE_API_INFO_INTEL;

  using native_type = VkInitializePerformanceApiInfoINTEL;

  InitializePerformanceApiInfoINTEL(void *p_user_data = {}, const void *next = {}) : p_user_data_(p_user_data), next_(next) {}

  InitializePerformanceApiInfoINTEL(const native_type &rhs)
    : InitializePerformanceApiInfoINTEL(std::bit_cast<InitializePerformanceApiInfoINTEL>(rhs)) {}

  InitializePerformanceApiInfoINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<InitializePerformanceApiInfoINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const InitializePerformanceApiInfoINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
  const void *next_;
  void *p_user_data_;
};

struct DeviceGroupPresentInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_PRESENT_INFO_KHR;

  using native_type = VkDeviceGroupPresentInfoKHR;

  DeviceGroupPresentInfoKHR(uint32_t swapchain_count = {},
                            const uint32_t *p_device_masks = {},
                            DeviceGroupPresentModeMaskBit mode = {},
                            const void *next = {})
    : swapchain_count_(swapchain_count), p_device_masks_(p_device_masks), mode_(mode), next_(next) {}

  DeviceGroupPresentInfoKHR(const native_type &rhs) : DeviceGroupPresentInfoKHR(std::bit_cast<DeviceGroupPresentInfoKHR>(rhs)) {}

  DeviceGroupPresentInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupPresentInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupPresentInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_PRESENT_INFO_KHR;
  const void *next_;
  uint32_t swapchain_count_;
  const uint32_t *p_device_masks_;
  DeviceGroupPresentModeMaskBit mode_;
};

struct AcquireNextImageInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACQUIRE_NEXT_IMAGE_INFO_KHR;

  using native_type = VkAcquireNextImageInfoKHR;

  AcquireNextImageInfoKHR(VkSwapchainKHR swapchain = {},
                          uint64_t timeout = {},
                          VkSemaphore semaphore = {},
                          VkFence fence = {},
                          uint32_t device_mask = {},
                          const void *next = {})
    : swapchain_(swapchain), timeout_(timeout), semaphore_(semaphore), fence_(fence), device_mask_(device_mask), next_(next) {}

  AcquireNextImageInfoKHR(const native_type &rhs) : AcquireNextImageInfoKHR(std::bit_cast<AcquireNextImageInfoKHR>(rhs)) {}

  AcquireNextImageInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AcquireNextImageInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AcquireNextImageInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACQUIRE_NEXT_IMAGE_INFO_KHR;
  const void *next_;
  VkSwapchainKHR swapchain_;
  uint64_t timeout_;
  VkSemaphore semaphore_;
  VkFence fence_;
  uint32_t device_mask_;
};

struct ImageSwapchainCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;

  using native_type = VkImageSwapchainCreateInfoKHR;

  ImageSwapchainCreateInfoKHR(VkSwapchainKHR swapchain = {}, const void *next = {}) : swapchain_(swapchain), next_(next) {}

  ImageSwapchainCreateInfoKHR(const native_type &rhs) : ImageSwapchainCreateInfoKHR(std::bit_cast<ImageSwapchainCreateInfoKHR>(rhs)) {}

  ImageSwapchainCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageSwapchainCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const ImageSwapchainCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
  const void *next_;
  VkSwapchainKHR swapchain_;
};

struct MemoryGetFdInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_GET_FD_INFO_KHR;

  using native_type = VkMemoryGetFdInfoKHR;

  MemoryGetFdInfoKHR(VkDeviceMemory memory = {}, ExternalMemoryHandleTypeMaskBit handle_type = {}, const void *next = {})
    : memory_(memory), handle_type_(handle_type), next_(next) {}

  MemoryGetFdInfoKHR(const native_type &rhs) : MemoryGetFdInfoKHR(std::bit_cast<MemoryGetFdInfoKHR>(rhs)) {}

  MemoryGetFdInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryGetFdInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryGetFdInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_GET_FD_INFO_KHR;
  const void *next_;
  VkDeviceMemory memory_;
  ExternalMemoryHandleTypeMaskBit handle_type_;
};

struct AccelerationStructureMotionInstanceNV {

  using native_type = VkAccelerationStructureMotionInstanceNV;

  AccelerationStructureMotionInstanceNV(AccelerationStructureMotionInstanceType type = AccelerationStructureMotionInstanceType::E_STATIC_NV,
                                        AccelerationStructureMotionInstanceMask flags = {},
                                        VkAccelerationStructureMotionInstanceDataNV data = {})
    : type_(type), flags_(flags), data_(data) {}

  AccelerationStructureMotionInstanceNV(const native_type &rhs)
    : AccelerationStructureMotionInstanceNV(std::bit_cast<AccelerationStructureMotionInstanceNV>(rhs)) {}

  AccelerationStructureMotionInstanceNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureMotionInstanceNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureMotionInstanceNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  AccelerationStructureMotionInstanceType type_;
  AccelerationStructureMotionInstanceMask flags_;
  VkAccelerationStructureMotionInstanceDataNV data_;
};

struct QueryPoolPerformanceCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;

  using native_type = VkQueryPoolPerformanceCreateInfoKHR;

  QueryPoolPerformanceCreateInfoKHR(uint32_t queue_family_index = {},
                                    uint32_t counter_index_count = {},
                                    const uint32_t *p_counter_indices = {},
                                    const void *next = {})
    : queue_family_index_(queue_family_index), counter_index_count_(counter_index_count), p_counter_indices_(p_counter_indices),
      next_(next) {}

  QueryPoolPerformanceCreateInfoKHR(const native_type &rhs)
    : QueryPoolPerformanceCreateInfoKHR(std::bit_cast<QueryPoolPerformanceCreateInfoKHR>(rhs)) {}

  QueryPoolPerformanceCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueryPoolPerformanceCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const QueryPoolPerformanceCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
  const void *next_;
  uint32_t queue_family_index_;
  uint32_t counter_index_count_;
  const uint32_t *p_counter_indices_;
};

struct BindBufferMemoryInfo {

  static constexpr StructureType structure_type = StructureType::E_BIND_BUFFER_MEMORY_INFO;

  using native_type = VkBindBufferMemoryInfo;

  BindBufferMemoryInfo(VkBuffer buffer = {}, VkDeviceMemory memory = {}, DeviceSize memory_offset = {}, const void *next = {})
    : buffer_(buffer), memory_(memory), memory_offset_(memory_offset), next_(next) {}

  BindBufferMemoryInfo(const native_type &rhs) : BindBufferMemoryInfo(std::bit_cast<BindBufferMemoryInfo>(rhs)) {}

  BindBufferMemoryInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindBufferMemoryInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BindBufferMemoryInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_BUFFER_MEMORY_INFO;
  const void *next_;
  VkBuffer buffer_;
  VkDeviceMemory memory_;
  DeviceSize memory_offset_;
};

struct ImportFenceFdInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_IMPORT_FENCE_FD_INFO_KHR;

  using native_type = VkImportFenceFdInfoKHR;

  ImportFenceFdInfoKHR(
    VkFence fence = {}, FenceImportMask flags = {}, ExternalFenceHandleTypeMaskBit handle_type = {}, int fd = {}, const void *next = {})
    : fence_(fence), flags_(flags), handle_type_(handle_type), fd_(fd), next_(next) {}

  ImportFenceFdInfoKHR(const native_type &rhs) : ImportFenceFdInfoKHR(std::bit_cast<ImportFenceFdInfoKHR>(rhs)) {}

  ImportFenceFdInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImportFenceFdInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const ImportFenceFdInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMPORT_FENCE_FD_INFO_KHR;
  const void *next_;
  VkFence fence_;
  FenceImportMask flags_;
  ExternalFenceHandleTypeMaskBit handle_type_;
  int fd_;
};

struct LayerSettingEXT {

  using native_type = VkLayerSettingEXT;

  LayerSettingEXT(const char *p_layer_name = {},
                  const char *p_setting_name = {},
                  LayerSettingType type = LayerSettingType::E_BOOL32_EXT,
                  uint32_t value_count = {},
                  const void *p_values = {})
    : p_layer_name_(p_layer_name), p_setting_name_(p_setting_name), type_(type), value_count_(value_count), p_values_(p_values) {}

  LayerSettingEXT(const native_type &rhs) : LayerSettingEXT(std::bit_cast<LayerSettingEXT>(rhs)) {}

  LayerSettingEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<LayerSettingEXT>(rhs);
    return *this;
  }

  auto operator<=>(const LayerSettingEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  const char *p_layer_name_;
  const char *p_setting_name_;
  LayerSettingType type_;
  uint32_t value_count_;
  const void *p_values_;
};

struct LayerSettingsCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_LAYER_SETTINGS_CREATE_INFO_EXT;

  using native_type = VkLayerSettingsCreateInfoEXT;

  LayerSettingsCreateInfoEXT(uint32_t setting_count = {}, const LayerSettingEXT *p_settings = {}, const void *next = {})
    : setting_count_(setting_count), p_settings_(p_settings), next_(next) {}

  LayerSettingsCreateInfoEXT(const native_type &rhs) : LayerSettingsCreateInfoEXT(std::bit_cast<LayerSettingsCreateInfoEXT>(rhs)) {}

  LayerSettingsCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<LayerSettingsCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const LayerSettingsCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_LAYER_SETTINGS_CREATE_INFO_EXT;
  const void *next_;
  uint32_t setting_count_;
  const LayerSettingEXT *p_settings_;
};

struct DisplayEventInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_EVENT_INFO_EXT;

  using native_type = VkDisplayEventInfoEXT;

  DisplayEventInfoEXT(DisplayEventType display_event = DisplayEventType::E_FIRST_PIXEL_OUT_EXT, const void *next = {})
    : display_event_(display_event), next_(next) {}

  DisplayEventInfoEXT(const native_type &rhs) : DisplayEventInfoEXT(std::bit_cast<DisplayEventInfoEXT>(rhs)) {}

  DisplayEventInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayEventInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayEventInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_EVENT_INFO_EXT;
  const void *next_;
  DisplayEventType display_event_;
};

struct PhysicalDeviceMultiviewProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;

  using native_type = VkPhysicalDeviceMultiviewProperties;

  PhysicalDeviceMultiviewProperties() = default;

  PhysicalDeviceMultiviewProperties(const native_type &rhs)
    : PhysicalDeviceMultiviewProperties(std::bit_cast<PhysicalDeviceMultiviewProperties>(rhs)) {}

  PhysicalDeviceMultiviewProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiviewProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiviewProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
  void *next_ = {};
  uint32_t max_multiview_view_count_ = {};
  uint32_t max_multiview_instance_index_ = {};
};

struct PhysicalDeviceRenderPassStripedPropertiesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM;

  using native_type = VkPhysicalDeviceRenderPassStripedPropertiesARM;

  PhysicalDeviceRenderPassStripedPropertiesARM() = default;

  PhysicalDeviceRenderPassStripedPropertiesARM(const native_type &rhs)
    : PhysicalDeviceRenderPassStripedPropertiesARM(std::bit_cast<PhysicalDeviceRenderPassStripedPropertiesARM>(rhs)) {}

  PhysicalDeviceRenderPassStripedPropertiesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRenderPassStripedPropertiesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRenderPassStripedPropertiesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM;
  void *next_ = {};
  Extent2D render_pass_stripe_granularity_ = {};
  uint32_t max_render_pass_stripes_ = {};
};

struct AmigoProfilingSubmitInfoSEC {

  static constexpr StructureType structure_type = StructureType::E_AMIGO_PROFILING_SUBMIT_INFO_SEC;

  using native_type = VkAmigoProfilingSubmitInfoSEC;

  AmigoProfilingSubmitInfoSEC(uint64_t first_draw_timestamp = {}, uint64_t swap_buffer_timestamp = {}, const void *next = {})
    : first_draw_timestamp_(first_draw_timestamp), swap_buffer_timestamp_(swap_buffer_timestamp), next_(next) {}

  AmigoProfilingSubmitInfoSEC(const native_type &rhs) : AmigoProfilingSubmitInfoSEC(std::bit_cast<AmigoProfilingSubmitInfoSEC>(rhs)) {}

  AmigoProfilingSubmitInfoSEC &operator=(const native_type &rhs) {
    *this = std::bit_cast<AmigoProfilingSubmitInfoSEC>(rhs);
    return *this;
  }

  auto operator<=>(const AmigoProfilingSubmitInfoSEC &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_AMIGO_PROFILING_SUBMIT_INFO_SEC;
  const void *next_;
  uint64_t first_draw_timestamp_;
  uint64_t swap_buffer_timestamp_;
};

struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;

  using native_type = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

  PhysicalDeviceShaderSubgroupExtendedTypesFeatures(bool32 shader_subgroup_extended_types = {}, void *next = {})
    : shader_subgroup_extended_types_(shader_subgroup_extended_types), next_(next) {}

  PhysicalDeviceShaderSubgroupExtendedTypesFeatures(const native_type &rhs)
    : PhysicalDeviceShaderSubgroupExtendedTypesFeatures(std::bit_cast<PhysicalDeviceShaderSubgroupExtendedTypesFeatures>(rhs)) {}

  PhysicalDeviceShaderSubgroupExtendedTypesFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderSubgroupExtendedTypesFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderSubgroupExtendedTypesFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
  void *next_;
  bool32 shader_subgroup_extended_types_;
};

struct PerformanceConfigurationAcquireInfoINTEL {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;

  using native_type = VkPerformanceConfigurationAcquireInfoINTEL;

  PerformanceConfigurationAcquireInfoINTEL(
    PerformanceConfigurationType type = PerformanceConfigurationType::E_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL,
    const void *next = {})
    : type_(type), next_(next) {}

  PerformanceConfigurationAcquireInfoINTEL(const native_type &rhs)
    : PerformanceConfigurationAcquireInfoINTEL(std::bit_cast<PerformanceConfigurationAcquireInfoINTEL>(rhs)) {}

  PerformanceConfigurationAcquireInfoINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceConfigurationAcquireInfoINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceConfigurationAcquireInfoINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
  const void *next_;
  PerformanceConfigurationType type_;
};

struct PipelineTessellationDomainOriginStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;

  using native_type = VkPipelineTessellationDomainOriginStateCreateInfo;

  PipelineTessellationDomainOriginStateCreateInfo(TessellationDomainOrigin domain_origin = TessellationDomainOrigin::E_UPPER_LEFT,
                                                  const void *next = {})
    : domain_origin_(domain_origin), next_(next) {}

  PipelineTessellationDomainOriginStateCreateInfo(const native_type &rhs)
    : PipelineTessellationDomainOriginStateCreateInfo(std::bit_cast<PipelineTessellationDomainOriginStateCreateInfo>(rhs)) {}

  PipelineTessellationDomainOriginStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineTessellationDomainOriginStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineTessellationDomainOriginStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
  const void *next_;
  TessellationDomainOrigin domain_origin_;
};

struct PhysicalDeviceProtectedMemoryProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;

  using native_type = VkPhysicalDeviceProtectedMemoryProperties;

  PhysicalDeviceProtectedMemoryProperties() = default;

  PhysicalDeviceProtectedMemoryProperties(const native_type &rhs)
    : PhysicalDeviceProtectedMemoryProperties(std::bit_cast<PhysicalDeviceProtectedMemoryProperties>(rhs)) {}

  PhysicalDeviceProtectedMemoryProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceProtectedMemoryProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceProtectedMemoryProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
  void *next_ = {};
  bool32 protected_no_fault_ = {};
};

struct ExternalFenceProperties {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_FENCE_PROPERTIES;

  using native_type = VkExternalFenceProperties;

  ExternalFenceProperties() = default;

  ExternalFenceProperties(const native_type &rhs) : ExternalFenceProperties(std::bit_cast<ExternalFenceProperties>(rhs)) {}

  ExternalFenceProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalFenceProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalFenceProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_FENCE_PROPERTIES;
  void *next_ = {};
  ExternalFenceHandleTypeMask export_from_imported_handle_types_ = {};
  ExternalFenceHandleTypeMask compatible_handle_types_ = {};
  ExternalFenceFeatureMask external_fence_features_ = {};
};

struct PhysicalDeviceExtendedDynamicState3FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT;

  using native_type = VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;

  PhysicalDeviceExtendedDynamicState3FeaturesEXT(bool32 extended_dynamic_state3tessellation_domain_origin = {},
                                                 bool32 extended_dynamic_state3depth_clamp_enable = {},
                                                 bool32 extended_dynamic_state3polygon_mode = {},
                                                 bool32 extended_dynamic_state3rasterization_samples = {},
                                                 bool32 extended_dynamic_state3sample_mask = {},
                                                 bool32 extended_dynamic_state3alpha_to_coverage_enable = {},
                                                 bool32 extended_dynamic_state3alpha_to_one_enable = {},
                                                 bool32 extended_dynamic_state3logic_op_enable = {},
                                                 bool32 extended_dynamic_state3color_blend_enable = {},
                                                 bool32 extended_dynamic_state3color_blend_equation = {},
                                                 bool32 extended_dynamic_state3color_write_mask = {},
                                                 bool32 extended_dynamic_state3rasterization_stream = {},
                                                 bool32 extended_dynamic_state3conservative_rasterization_mode = {},
                                                 bool32 extended_dynamic_state3extra_primitive_overestimation_size = {},
                                                 bool32 extended_dynamic_state3depth_clip_enable = {},
                                                 bool32 extended_dynamic_state3sample_locations_enable = {},
                                                 bool32 extended_dynamic_state3color_blend_advanced = {},
                                                 bool32 extended_dynamic_state3provoking_vertex_mode = {},
                                                 bool32 extended_dynamic_state3line_rasterization_mode = {},
                                                 bool32 extended_dynamic_state3line_stipple_enable = {},
                                                 bool32 extended_dynamic_state3depth_clip_negative_one_to_one = {},
                                                 bool32 extended_dynamic_state3viewport_wscaling_enable = {},
                                                 bool32 extended_dynamic_state3viewport_swizzle = {},
                                                 bool32 extended_dynamic_state3coverage_to_color_enable = {},
                                                 bool32 extended_dynamic_state3coverage_to_color_location = {},
                                                 bool32 extended_dynamic_state3coverage_modulation_mode = {},
                                                 bool32 extended_dynamic_state3coverage_modulation_table_enable = {},
                                                 bool32 extended_dynamic_state3coverage_modulation_table = {},
                                                 bool32 extended_dynamic_state3coverage_reduction_mode = {},
                                                 bool32 extended_dynamic_state3representative_fragment_test_enable = {},
                                                 bool32 extended_dynamic_state3shading_rate_image_enable = {},
                                                 void *next = {})
    : extended_dynamic_state3tessellation_domain_origin_(extended_dynamic_state3tessellation_domain_origin),
      extended_dynamic_state3depth_clamp_enable_(extended_dynamic_state3depth_clamp_enable),
      extended_dynamic_state3polygon_mode_(extended_dynamic_state3polygon_mode),
      extended_dynamic_state3rasterization_samples_(extended_dynamic_state3rasterization_samples),
      extended_dynamic_state3sample_mask_(extended_dynamic_state3sample_mask),
      extended_dynamic_state3alpha_to_coverage_enable_(extended_dynamic_state3alpha_to_coverage_enable),
      extended_dynamic_state3alpha_to_one_enable_(extended_dynamic_state3alpha_to_one_enable),
      extended_dynamic_state3logic_op_enable_(extended_dynamic_state3logic_op_enable),
      extended_dynamic_state3color_blend_enable_(extended_dynamic_state3color_blend_enable),
      extended_dynamic_state3color_blend_equation_(extended_dynamic_state3color_blend_equation),
      extended_dynamic_state3color_write_mask_(extended_dynamic_state3color_write_mask),
      extended_dynamic_state3rasterization_stream_(extended_dynamic_state3rasterization_stream),
      extended_dynamic_state3conservative_rasterization_mode_(extended_dynamic_state3conservative_rasterization_mode),
      extended_dynamic_state3extra_primitive_overestimation_size_(extended_dynamic_state3extra_primitive_overestimation_size),
      extended_dynamic_state3depth_clip_enable_(extended_dynamic_state3depth_clip_enable),
      extended_dynamic_state3sample_locations_enable_(extended_dynamic_state3sample_locations_enable),
      extended_dynamic_state3color_blend_advanced_(extended_dynamic_state3color_blend_advanced),
      extended_dynamic_state3provoking_vertex_mode_(extended_dynamic_state3provoking_vertex_mode),
      extended_dynamic_state3line_rasterization_mode_(extended_dynamic_state3line_rasterization_mode),
      extended_dynamic_state3line_stipple_enable_(extended_dynamic_state3line_stipple_enable),
      extended_dynamic_state3depth_clip_negative_one_to_one_(extended_dynamic_state3depth_clip_negative_one_to_one),
      extended_dynamic_state3viewport_wscaling_enable_(extended_dynamic_state3viewport_wscaling_enable),
      extended_dynamic_state3viewport_swizzle_(extended_dynamic_state3viewport_swizzle),
      extended_dynamic_state3coverage_to_color_enable_(extended_dynamic_state3coverage_to_color_enable),
      extended_dynamic_state3coverage_to_color_location_(extended_dynamic_state3coverage_to_color_location),
      extended_dynamic_state3coverage_modulation_mode_(extended_dynamic_state3coverage_modulation_mode),
      extended_dynamic_state3coverage_modulation_table_enable_(extended_dynamic_state3coverage_modulation_table_enable),
      extended_dynamic_state3coverage_modulation_table_(extended_dynamic_state3coverage_modulation_table),
      extended_dynamic_state3coverage_reduction_mode_(extended_dynamic_state3coverage_reduction_mode),
      extended_dynamic_state3representative_fragment_test_enable_(extended_dynamic_state3representative_fragment_test_enable),
      extended_dynamic_state3shading_rate_image_enable_(extended_dynamic_state3shading_rate_image_enable), next_(next) {}

  PhysicalDeviceExtendedDynamicState3FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceExtendedDynamicState3FeaturesEXT(std::bit_cast<PhysicalDeviceExtendedDynamicState3FeaturesEXT>(rhs)) {}

  PhysicalDeviceExtendedDynamicState3FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExtendedDynamicState3FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExtendedDynamicState3FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT;
  void *next_;
  bool32 extended_dynamic_state3tessellation_domain_origin_;
  bool32 extended_dynamic_state3depth_clamp_enable_;
  bool32 extended_dynamic_state3polygon_mode_;
  bool32 extended_dynamic_state3rasterization_samples_;
  bool32 extended_dynamic_state3sample_mask_;
  bool32 extended_dynamic_state3alpha_to_coverage_enable_;
  bool32 extended_dynamic_state3alpha_to_one_enable_;
  bool32 extended_dynamic_state3logic_op_enable_;
  bool32 extended_dynamic_state3color_blend_enable_;
  bool32 extended_dynamic_state3color_blend_equation_;
  bool32 extended_dynamic_state3color_write_mask_;
  bool32 extended_dynamic_state3rasterization_stream_;
  bool32 extended_dynamic_state3conservative_rasterization_mode_;
  bool32 extended_dynamic_state3extra_primitive_overestimation_size_;
  bool32 extended_dynamic_state3depth_clip_enable_;
  bool32 extended_dynamic_state3sample_locations_enable_;
  bool32 extended_dynamic_state3color_blend_advanced_;
  bool32 extended_dynamic_state3provoking_vertex_mode_;
  bool32 extended_dynamic_state3line_rasterization_mode_;
  bool32 extended_dynamic_state3line_stipple_enable_;
  bool32 extended_dynamic_state3depth_clip_negative_one_to_one_;
  bool32 extended_dynamic_state3viewport_wscaling_enable_;
  bool32 extended_dynamic_state3viewport_swizzle_;
  bool32 extended_dynamic_state3coverage_to_color_enable_;
  bool32 extended_dynamic_state3coverage_to_color_location_;
  bool32 extended_dynamic_state3coverage_modulation_mode_;
  bool32 extended_dynamic_state3coverage_modulation_table_enable_;
  bool32 extended_dynamic_state3coverage_modulation_table_;
  bool32 extended_dynamic_state3coverage_reduction_mode_;
  bool32 extended_dynamic_state3representative_fragment_test_enable_;
  bool32 extended_dynamic_state3shading_rate_image_enable_;
};

struct PhysicalDeviceExternalFenceInfo {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;

  using native_type = VkPhysicalDeviceExternalFenceInfo;

  PhysicalDeviceExternalFenceInfo(ExternalFenceHandleTypeMaskBit handle_type = {}, const void *next = {})
    : handle_type_(handle_type), next_(next) {}

  PhysicalDeviceExternalFenceInfo(const native_type &rhs)
    : PhysicalDeviceExternalFenceInfo(std::bit_cast<PhysicalDeviceExternalFenceInfo>(rhs)) {}

  PhysicalDeviceExternalFenceInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExternalFenceInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExternalFenceInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
  const void *next_;
  ExternalFenceHandleTypeMaskBit handle_type_;
};

struct PhysicalDeviceExtendedDynamicState2FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;

  using native_type = VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;

  PhysicalDeviceExtendedDynamicState2FeaturesEXT(bool32 extended_dynamic_state2 = {},
                                                 bool32 extended_dynamic_state2logic_op = {},
                                                 bool32 extended_dynamic_state2patch_control_points = {},
                                                 void *next = {})
    : extended_dynamic_state2_(extended_dynamic_state2), extended_dynamic_state2logic_op_(extended_dynamic_state2logic_op),
      extended_dynamic_state2patch_control_points_(extended_dynamic_state2patch_control_points), next_(next) {}

  PhysicalDeviceExtendedDynamicState2FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceExtendedDynamicState2FeaturesEXT(std::bit_cast<PhysicalDeviceExtendedDynamicState2FeaturesEXT>(rhs)) {}

  PhysicalDeviceExtendedDynamicState2FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExtendedDynamicState2FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExtendedDynamicState2FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
  void *next_;
  bool32 extended_dynamic_state2_;
  bool32 extended_dynamic_state2logic_op_;
  bool32 extended_dynamic_state2patch_control_points_;
};

struct ViewportWScalingNV {

  using native_type = VkViewportWScalingNV;

  ViewportWScalingNV(float xcoeff = {}, float ycoeff = {}) : xcoeff_(xcoeff), ycoeff_(ycoeff) {}

  ViewportWScalingNV(const native_type &rhs) : ViewportWScalingNV(std::bit_cast<ViewportWScalingNV>(rhs)) {}

  ViewportWScalingNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ViewportWScalingNV>(rhs);
    return *this;
  }

  auto operator<=>(const ViewportWScalingNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float xcoeff_;
  float ycoeff_;
};

struct PipelineViewportWScalingStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineViewportWScalingStateCreateInfoNV;

  PipelineViewportWScalingStateCreateInfoNV(bool32 viewport_wscaling_enable = {},
                                            uint32_t viewport_count = {},
                                            const ViewportWScalingNV *p_viewport_wscalings = {},
                                            const void *next = {})
    : viewport_wscaling_enable_(viewport_wscaling_enable), viewport_count_(viewport_count), p_viewport_wscalings_(p_viewport_wscalings),
      next_(next) {}

  PipelineViewportWScalingStateCreateInfoNV(const native_type &rhs)
    : PipelineViewportWScalingStateCreateInfoNV(std::bit_cast<PipelineViewportWScalingStateCreateInfoNV>(rhs)) {}

  PipelineViewportWScalingStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportWScalingStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportWScalingStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
  const void *next_;
  bool32 viewport_wscaling_enable_;
  uint32_t viewport_count_;
  const ViewportWScalingNV *p_viewport_wscalings_;
};

struct CommandBufferSubmitInfo {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_SUBMIT_INFO;

  using native_type = VkCommandBufferSubmitInfo;

  CommandBufferSubmitInfo(VkCommandBuffer command_buffer = {}, uint32_t device_mask = {}, const void *next = {})
    : command_buffer_(command_buffer), device_mask_(device_mask), next_(next) {}

  CommandBufferSubmitInfo(const native_type &rhs) : CommandBufferSubmitInfo(std::bit_cast<CommandBufferSubmitInfo>(rhs)) {}

  CommandBufferSubmitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferSubmitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferSubmitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_SUBMIT_INFO;
  const void *next_;
  VkCommandBuffer command_buffer_;
  uint32_t device_mask_;
};

struct MemoryFdPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_FD_PROPERTIES_KHR;

  using native_type = VkMemoryFdPropertiesKHR;

  MemoryFdPropertiesKHR() = default;

  MemoryFdPropertiesKHR(const native_type &rhs) : MemoryFdPropertiesKHR(std::bit_cast<MemoryFdPropertiesKHR>(rhs)) {}

  MemoryFdPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryFdPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryFdPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_FD_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t memory_type_bits_ = {};
};

struct PhysicalDeviceShaderFloat16Int8Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;

  using native_type = VkPhysicalDeviceShaderFloat16Int8Features;

  PhysicalDeviceShaderFloat16Int8Features(bool32 shader_float16 = {}, bool32 shader_int8 = {}, void *next = {})
    : shader_float16_(shader_float16), shader_int8_(shader_int8), next_(next) {}

  PhysicalDeviceShaderFloat16Int8Features(const native_type &rhs)
    : PhysicalDeviceShaderFloat16Int8Features(std::bit_cast<PhysicalDeviceShaderFloat16Int8Features>(rhs)) {}

  PhysicalDeviceShaderFloat16Int8Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderFloat16Int8Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderFloat16Int8Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
  void *next_;
  bool32 shader_float16_;
  bool32 shader_int8_;
};

struct SampleLocationEXT {

  using native_type = VkSampleLocationEXT;

  SampleLocationEXT(float x = {}, float y = {}) : x_(x), y_(y) {}

  SampleLocationEXT(const native_type &rhs) : SampleLocationEXT(std::bit_cast<SampleLocationEXT>(rhs)) {}

  SampleLocationEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SampleLocationEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SampleLocationEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float x_;
  float y_;
};

struct SampleLocationsInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SAMPLE_LOCATIONS_INFO_EXT;

  using native_type = VkSampleLocationsInfoEXT;

  SampleLocationsInfoEXT(SampleCountMaskBit sample_locations_per_pixel = {},
                         Extent2D sample_location_grid_size = {},
                         uint32_t sample_locations_count = {},
                         const SampleLocationEXT *p_sample_locations = {},
                         const void *next = {})
    : sample_locations_per_pixel_(sample_locations_per_pixel), sample_location_grid_size_(sample_location_grid_size),
      sample_locations_count_(sample_locations_count), p_sample_locations_(p_sample_locations), next_(next) {}

  SampleLocationsInfoEXT(const native_type &rhs) : SampleLocationsInfoEXT(std::bit_cast<SampleLocationsInfoEXT>(rhs)) {}

  SampleLocationsInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SampleLocationsInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SampleLocationsInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLE_LOCATIONS_INFO_EXT;
  const void *next_;
  SampleCountMaskBit sample_locations_per_pixel_;
  Extent2D sample_location_grid_size_;
  uint32_t sample_locations_count_;
  const SampleLocationEXT *p_sample_locations_;
};

struct ExternalMemoryAcquireUnmodifiedEXT {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT;

  using native_type = VkExternalMemoryAcquireUnmodifiedEXT;

  ExternalMemoryAcquireUnmodifiedEXT(bool32 acquire_unmodified_memory = {}, const void *next = {})
    : acquire_unmodified_memory_(acquire_unmodified_memory), next_(next) {}

  ExternalMemoryAcquireUnmodifiedEXT(const native_type &rhs)
    : ExternalMemoryAcquireUnmodifiedEXT(std::bit_cast<ExternalMemoryAcquireUnmodifiedEXT>(rhs)) {}

  ExternalMemoryAcquireUnmodifiedEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalMemoryAcquireUnmodifiedEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalMemoryAcquireUnmodifiedEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT;
  const void *next_;
  bool32 acquire_unmodified_memory_;
};

struct PhysicalDeviceColorWriteEnableFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceColorWriteEnableFeaturesEXT;

  PhysicalDeviceColorWriteEnableFeaturesEXT(bool32 color_write_enable = {}, void *next = {})
    : color_write_enable_(color_write_enable), next_(next) {}

  PhysicalDeviceColorWriteEnableFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceColorWriteEnableFeaturesEXT(std::bit_cast<PhysicalDeviceColorWriteEnableFeaturesEXT>(rhs)) {}

  PhysicalDeviceColorWriteEnableFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceColorWriteEnableFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceColorWriteEnableFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
  void *next_;
  bool32 color_write_enable_;
};

struct BindShaderGroupIndirectCommandNV {

  using native_type = VkBindShaderGroupIndirectCommandNV;

  BindShaderGroupIndirectCommandNV(uint32_t group_index = {}) : group_index_(group_index) {}

  BindShaderGroupIndirectCommandNV(const native_type &rhs)
    : BindShaderGroupIndirectCommandNV(std::bit_cast<BindShaderGroupIndirectCommandNV>(rhs)) {}

  BindShaderGroupIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindShaderGroupIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const BindShaderGroupIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t group_index_;
};

struct RayTracingShaderGroupCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;

  using native_type = VkRayTracingShaderGroupCreateInfoNV;

  RayTracingShaderGroupCreateInfoNV(RayTracingShaderGroupType type = RayTracingShaderGroupType::E_GENERAL_KHR,
                                    uint32_t general_shader = {},
                                    uint32_t closest_hit_shader = {},
                                    uint32_t any_hit_shader = {},
                                    uint32_t intersection_shader = {},
                                    const void *next = {})
    : type_(type), general_shader_(general_shader), closest_hit_shader_(closest_hit_shader), any_hit_shader_(any_hit_shader),
      intersection_shader_(intersection_shader), next_(next) {}

  RayTracingShaderGroupCreateInfoNV(const native_type &rhs)
    : RayTracingShaderGroupCreateInfoNV(std::bit_cast<RayTracingShaderGroupCreateInfoNV>(rhs)) {}

  RayTracingShaderGroupCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<RayTracingShaderGroupCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const RayTracingShaderGroupCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
  const void *next_;
  RayTracingShaderGroupType type_;
  uint32_t general_shader_;
  uint32_t closest_hit_shader_;
  uint32_t any_hit_shader_;
  uint32_t intersection_shader_;
};

struct ComputePipelineCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_COMPUTE_PIPELINE_CREATE_INFO;

  using native_type = VkComputePipelineCreateInfo;

  ComputePipelineCreateInfo(PipelineCreateMask flags = {},
                            PipelineShaderStageCreateInfo stage = {},
                            VkPipelineLayout layout = {},
                            VkPipeline base_pipeline_handle = {},
                            int32_t base_pipeline_index = {},
                            const void *next = {})
    : flags_(flags), stage_(stage), layout_(layout), base_pipeline_handle_(base_pipeline_handle), base_pipeline_index_(base_pipeline_index),
      next_(next) {}

  ComputePipelineCreateInfo(const native_type &rhs) : ComputePipelineCreateInfo(std::bit_cast<ComputePipelineCreateInfo>(rhs)) {}

  ComputePipelineCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ComputePipelineCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ComputePipelineCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMPUTE_PIPELINE_CREATE_INFO;
  const void *next_;
  PipelineCreateMask flags_;
  PipelineShaderStageCreateInfo stage_;
  VkPipelineLayout layout_;
  VkPipeline base_pipeline_handle_;
  int32_t base_pipeline_index_;
};

struct RenderingAttachmentInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_ATTACHMENT_INFO;

  using native_type = VkRenderingAttachmentInfo;

  RenderingAttachmentInfo(VkImageView image_view = {},
                          ImageLayout image_layout = ImageLayout::E_UNDEFINED,
                          ResolveModeMaskBit resolve_mode = ResolveModeMaskBit::E_NONE,
                          VkImageView resolve_image_view = {},
                          ImageLayout resolve_image_layout = ImageLayout::E_UNDEFINED,
                          AttachmentLoadOp load_op = AttachmentLoadOp::E_LOAD,
                          AttachmentStoreOp store_op = AttachmentStoreOp::E_STORE,
                          VkClearValue clear_value = {},
                          const void *next = {})
    : image_view_(image_view), image_layout_(image_layout), resolve_mode_(resolve_mode), resolve_image_view_(resolve_image_view),
      resolve_image_layout_(resolve_image_layout), load_op_(load_op), store_op_(store_op), clear_value_(clear_value), next_(next) {}

  RenderingAttachmentInfo(const native_type &rhs) : RenderingAttachmentInfo(std::bit_cast<RenderingAttachmentInfo>(rhs)) {}

  RenderingAttachmentInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingAttachmentInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingAttachmentInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_ATTACHMENT_INFO;
  const void *next_;
  VkImageView image_view_;
  ImageLayout image_layout_;
  ResolveModeMaskBit resolve_mode_;
  VkImageView resolve_image_view_;
  ImageLayout resolve_image_layout_;
  AttachmentLoadOp load_op_;
  AttachmentStoreOp store_op_;
  VkClearValue clear_value_;
};

struct SemaphoreCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_SEMAPHORE_CREATE_INFO;

  using native_type = VkSemaphoreCreateInfo;

  SemaphoreCreateInfo(SemaphoreCreateMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  SemaphoreCreateInfo(const native_type &rhs) : SemaphoreCreateInfo(std::bit_cast<SemaphoreCreateInfo>(rhs)) {}

  SemaphoreCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SemaphoreCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SemaphoreCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SEMAPHORE_CREATE_INFO;
  const void *next_;
  SemaphoreCreateMask flags_;
};

struct PipelineColorWriteCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;

  using native_type = VkPipelineColorWriteCreateInfoEXT;

  PipelineColorWriteCreateInfoEXT(uint32_t attachment_count = {}, const bool32 *p_color_write_enables = {}, const void *next = {})
    : attachment_count_(attachment_count), p_color_write_enables_(p_color_write_enables), next_(next) {}

  PipelineColorWriteCreateInfoEXT(const native_type &rhs)
    : PipelineColorWriteCreateInfoEXT(std::bit_cast<PipelineColorWriteCreateInfoEXT>(rhs)) {}

  PipelineColorWriteCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineColorWriteCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineColorWriteCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
  const void *next_;
  uint32_t attachment_count_;
  const bool32 *p_color_write_enables_;
};

struct ExternalMemoryBufferCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;

  using native_type = VkExternalMemoryBufferCreateInfo;

  ExternalMemoryBufferCreateInfo(ExternalMemoryHandleTypeMask handle_types = {}, const void *next = {})
    : handle_types_(handle_types), next_(next) {}

  ExternalMemoryBufferCreateInfo(const native_type &rhs)
    : ExternalMemoryBufferCreateInfo(std::bit_cast<ExternalMemoryBufferCreateInfo>(rhs)) {}

  ExternalMemoryBufferCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalMemoryBufferCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalMemoryBufferCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
  const void *next_;
  ExternalMemoryHandleTypeMask handle_types_;
};

struct MicromapCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MICROMAP_CREATE_INFO_EXT;

  using native_type = VkMicromapCreateInfoEXT;

  MicromapCreateInfoEXT(MicromapCreateMask create_flags = {},
                        VkBuffer buffer = {},
                        DeviceSize offset = {},
                        DeviceSize size = {},
                        MicromapType type = MicromapType::E_OPACITY_MICROMAP_EXT,
                        DeviceAddress device_address = {},
                        const void *next = {})
    : create_flags_(create_flags), buffer_(buffer), offset_(offset), size_(size), type_(type), device_address_(device_address),
      next_(next) {}

  MicromapCreateInfoEXT(const native_type &rhs) : MicromapCreateInfoEXT(std::bit_cast<MicromapCreateInfoEXT>(rhs)) {}

  MicromapCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MicromapCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MicromapCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MICROMAP_CREATE_INFO_EXT;
  const void *next_;
  MicromapCreateMask create_flags_;
  VkBuffer buffer_;
  DeviceSize offset_;
  DeviceSize size_;
  MicromapType type_;
  DeviceAddress device_address_;
};

struct DeviceGroupPresentCapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;

  using native_type = VkDeviceGroupPresentCapabilitiesKHR;

  DeviceGroupPresentCapabilitiesKHR() = default;

  DeviceGroupPresentCapabilitiesKHR(const native_type &rhs)
    : DeviceGroupPresentCapabilitiesKHR(std::bit_cast<DeviceGroupPresentCapabilitiesKHR>(rhs)) {}

  DeviceGroupPresentCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupPresentCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupPresentCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
  void *next_ = {};
  std::array<uint32_t, VK_MAX_DEVICE_GROUP_SIZE> present_mask_ = {};
  DeviceGroupPresentModeMask modes_ = {};
};

struct ExternalMemoryProperties {

  using native_type = VkExternalMemoryProperties;

  ExternalMemoryProperties() = default;

  ExternalMemoryProperties(const native_type &rhs) : ExternalMemoryProperties(std::bit_cast<ExternalMemoryProperties>(rhs)) {}

  ExternalMemoryProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalMemoryProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalMemoryProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ExternalMemoryFeatureMask external_memory_features_ = {};
  ExternalMemoryHandleTypeMask export_from_imported_handle_types_ = {};
  ExternalMemoryHandleTypeMask compatible_handle_types_ = {};
};

struct ExternalBufferProperties {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_BUFFER_PROPERTIES;

  using native_type = VkExternalBufferProperties;

  ExternalBufferProperties() = default;

  ExternalBufferProperties(const native_type &rhs) : ExternalBufferProperties(std::bit_cast<ExternalBufferProperties>(rhs)) {}

  ExternalBufferProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalBufferProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalBufferProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_BUFFER_PROPERTIES;
  void *next_ = {};
  ExternalMemoryProperties external_memory_properties_ = {};
};

struct RenderPassCreationControlEXT {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_CREATION_CONTROL_EXT;

  using native_type = VkRenderPassCreationControlEXT;

  RenderPassCreationControlEXT(bool32 disallow_merging = {}, const void *next = {}) : disallow_merging_(disallow_merging), next_(next) {}

  RenderPassCreationControlEXT(const native_type &rhs) : RenderPassCreationControlEXT(std::bit_cast<RenderPassCreationControlEXT>(rhs)) {}

  RenderPassCreationControlEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassCreationControlEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassCreationControlEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_CREATION_CONTROL_EXT;
  const void *next_;
  bool32 disallow_merging_;
};

struct VideoDecodeH264SessionParametersCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;

  using native_type = VkVideoDecodeH264SessionParametersCreateInfoKHR;

  VideoDecodeH264SessionParametersCreateInfoKHR(uint32_t max_std_spscount = {},
                                                uint32_t max_std_ppscount = {},
                                                const VideoDecodeH264SessionParametersAddInfoKHR *p_parameters_add_info = {},
                                                const void *next = {})
    : max_std_spscount_(max_std_spscount), max_std_ppscount_(max_std_ppscount), p_parameters_add_info_(p_parameters_add_info), next_(next) {
  }

  VideoDecodeH264SessionParametersCreateInfoKHR(const native_type &rhs)
    : VideoDecodeH264SessionParametersCreateInfoKHR(std::bit_cast<VideoDecodeH264SessionParametersCreateInfoKHR>(rhs)) {}

  VideoDecodeH264SessionParametersCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH264SessionParametersCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH264SessionParametersCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;
  const void *next_;
  uint32_t max_std_spscount_;
  uint32_t max_std_ppscount_;
  const VideoDecodeH264SessionParametersAddInfoKHR *p_parameters_add_info_;
};

struct PhysicalDeviceVariablePointersFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;

  using native_type = VkPhysicalDeviceVariablePointersFeatures;

  PhysicalDeviceVariablePointersFeatures(bool32 variable_pointers_storage_buffer = {}, bool32 variable_pointers = {}, void *next = {})
    : variable_pointers_storage_buffer_(variable_pointers_storage_buffer), variable_pointers_(variable_pointers), next_(next) {}

  PhysicalDeviceVariablePointersFeatures(const native_type &rhs)
    : PhysicalDeviceVariablePointersFeatures(std::bit_cast<PhysicalDeviceVariablePointersFeatures>(rhs)) {}

  PhysicalDeviceVariablePointersFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVariablePointersFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVariablePointersFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
  void *next_;
  bool32 variable_pointers_storage_buffer_;
  bool32 variable_pointers_;
};

struct PhysicalDeviceIDProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ID_PROPERTIES;

  using native_type = VkPhysicalDeviceIDProperties;

  PhysicalDeviceIDProperties() = default;

  PhysicalDeviceIDProperties(const native_type &rhs) : PhysicalDeviceIDProperties(std::bit_cast<PhysicalDeviceIDProperties>(rhs)) {}

  PhysicalDeviceIDProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceIDProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceIDProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ID_PROPERTIES;
  void *next_ = {};
  std::array<uint8_t, VK_UUID_SIZE> device_uuid_ = {};
  std::array<uint8_t, VK_UUID_SIZE> driver_uuid_ = {};
  std::array<uint8_t, VK_LUID_SIZE> device_luid_ = {};
  uint32_t device_node_mask_ = {};
  bool32 device_luidvalid_ = {};
};

struct PhysicalDeviceVulkanMemoryModelFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;

  using native_type = VkPhysicalDeviceVulkanMemoryModelFeatures;

  PhysicalDeviceVulkanMemoryModelFeatures(bool32 vulkan_memory_model = {},
                                          bool32 vulkan_memory_model_device_scope = {},
                                          bool32 vulkan_memory_model_availability_visibility_chains = {},
                                          void *next = {})
    : vulkan_memory_model_(vulkan_memory_model), vulkan_memory_model_device_scope_(vulkan_memory_model_device_scope),
      vulkan_memory_model_availability_visibility_chains_(vulkan_memory_model_availability_visibility_chains), next_(next) {}

  PhysicalDeviceVulkanMemoryModelFeatures(const native_type &rhs)
    : PhysicalDeviceVulkanMemoryModelFeatures(std::bit_cast<PhysicalDeviceVulkanMemoryModelFeatures>(rhs)) {}

  PhysicalDeviceVulkanMemoryModelFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkanMemoryModelFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkanMemoryModelFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
  void *next_;
  bool32 vulkan_memory_model_;
  bool32 vulkan_memory_model_device_scope_;
  bool32 vulkan_memory_model_availability_visibility_chains_;
};

struct DrawIndexedIndirectCommand {

  using native_type = VkDrawIndexedIndirectCommand;

  DrawIndexedIndirectCommand(uint32_t index_count = {},
                             uint32_t instance_count = {},
                             uint32_t first_index = {},
                             int32_t vertex_offset = {},
                             uint32_t first_instance = {})
    : index_count_(index_count), instance_count_(instance_count), first_index_(first_index), vertex_offset_(vertex_offset),
      first_instance_(first_instance) {}

  DrawIndexedIndirectCommand(const native_type &rhs) : DrawIndexedIndirectCommand(std::bit_cast<DrawIndexedIndirectCommand>(rhs)) {}

  DrawIndexedIndirectCommand &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrawIndexedIndirectCommand>(rhs);
    return *this;
  }

  auto operator<=>(const DrawIndexedIndirectCommand &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t index_count_;
  uint32_t instance_count_;
  uint32_t first_index_;
  int32_t vertex_offset_;
  uint32_t first_instance_;
};

struct ConformanceVersion {

  using native_type = VkConformanceVersion;

  ConformanceVersion(uint8_t major = {}, uint8_t minor = {}, uint8_t subminor = {}, uint8_t patch = {})
    : major_(major), minor_(minor), subminor_(subminor), patch_(patch) {}

  ConformanceVersion(const native_type &rhs) : ConformanceVersion(std::bit_cast<ConformanceVersion>(rhs)) {}

  ConformanceVersion &operator=(const native_type &rhs) {
    *this = std::bit_cast<ConformanceVersion>(rhs);
    return *this;
  }

  auto operator<=>(const ConformanceVersion &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint8_t major_;
  uint8_t minor_;
  uint8_t subminor_;
  uint8_t patch_;
};

struct PhysicalDeviceDriverProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DRIVER_PROPERTIES;

  using native_type = VkPhysicalDeviceDriverProperties;

  PhysicalDeviceDriverProperties() = default;

  PhysicalDeviceDriverProperties(const native_type &rhs)
    : PhysicalDeviceDriverProperties(std::bit_cast<PhysicalDeviceDriverProperties>(rhs)) {}

  PhysicalDeviceDriverProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDriverProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDriverProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
  void *next_ = {};
  DriverId driver_id_ = {};
  std::array<char, VK_MAX_DRIVER_NAME_SIZE> driver_name_ = {};
  std::array<char, VK_MAX_DRIVER_INFO_SIZE> driver_info_ = {};
  ConformanceVersion conformance_version_ = {};
};

struct DebugUtilsMessengerCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;

  using native_type = VkDebugUtilsMessengerCreateInfoEXT;

  DebugUtilsMessengerCreateInfoEXT(DebugMessageSeverityMask message_severity = {},
                                   DebugMessageTypeMask message_type = {},
                                   DebugMessengerCallback messenger_callback = {},
                                   DebugMessengerCreateMask mask = {},
                                   void *user_data = nullptr,
                                   const void *next = nullptr)
    : next_(next), mask_(mask), message_severity_(message_severity), message_type_(message_type), messenger_callback_(messenger_callback),
      user_data_(user_data) {}

  DebugUtilsMessengerCreateInfoEXT(const native_type &rhs)
    : DebugUtilsMessengerCreateInfoEXT(std::bit_cast<DebugUtilsMessengerCreateInfoEXT>(rhs)) {}

  DebugUtilsMessengerCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugUtilsMessengerCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugUtilsMessengerCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
  const void *next_;
  DebugMessengerCreateMask mask_;
  DebugMessageSeverityMask message_severity_;
  DebugMessageTypeMask message_type_;
  DebugMessengerCallback messenger_callback_;
  void *user_data_;
};

struct PhysicalDeviceImageFormatInfo2 {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;

  using native_type = VkPhysicalDeviceImageFormatInfo2;

  PhysicalDeviceImageFormatInfo2(Format format = Format::E_UNDEFINED,
                                 ImageType type = ImageType::E_1D,
                                 ImageTiling tiling = ImageTiling::E_OPTIMAL,
                                 ImageUsageMask usage = {},
                                 ImageCreateMask flags = {},
                                 const void *next = {})
    : format_(format), type_(type), tiling_(tiling), usage_(usage), flags_(flags), next_(next) {}

  PhysicalDeviceImageFormatInfo2(const native_type &rhs)
    : PhysicalDeviceImageFormatInfo2(std::bit_cast<PhysicalDeviceImageFormatInfo2>(rhs)) {}

  PhysicalDeviceImageFormatInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageFormatInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageFormatInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
  const void *next_;
  Format format_;
  ImageType type_;
  ImageTiling tiling_;
  ImageUsageMask usage_;
  ImageCreateMask flags_;
};

struct FormatProperties {

  using native_type = VkFormatProperties;

  FormatProperties() = default;

  FormatProperties(const native_type &rhs) : FormatProperties(std::bit_cast<FormatProperties>(rhs)) {}

  FormatProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<FormatProperties>(rhs);
    return *this;
  }

  auto operator<=>(const FormatProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  FormatFeatureMask linear_tiling_features_ = {};
  FormatFeatureMask optimal_tiling_features_ = {};
  FormatFeatureMask buffer_features_ = {};
};

struct FormatProperties2 {

  static constexpr StructureType structure_type = StructureType::E_FORMAT_PROPERTIES_2;

  using native_type = VkFormatProperties2;

  FormatProperties2() = default;

  FormatProperties2(const native_type &rhs) : FormatProperties2(std::bit_cast<FormatProperties2>(rhs)) {}

  FormatProperties2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<FormatProperties2>(rhs);
    return *this;
  }

  auto operator<=>(const FormatProperties2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FORMAT_PROPERTIES_2;
  void *next_ = {};
  FormatProperties format_properties_ = {};
};

struct BindPipelineIndirectCommandNV {

  using native_type = VkBindPipelineIndirectCommandNV;

  BindPipelineIndirectCommandNV(DeviceAddress pipeline_address = {}) : pipeline_address_(pipeline_address) {}

  BindPipelineIndirectCommandNV(const native_type &rhs)
    : BindPipelineIndirectCommandNV(std::bit_cast<BindPipelineIndirectCommandNV>(rhs)) {}

  BindPipelineIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindPipelineIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const BindPipelineIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress pipeline_address_;
};

struct PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;

  PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(bool32 shader_subgroup_uniform_control_flow = {}, void *next = {})
    : shader_subgroup_uniform_control_flow_(shader_subgroup_uniform_control_flow), next_(next) {}

  PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
        std::bit_cast<PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
  void *next_;
  bool32 shader_subgroup_uniform_control_flow_;
};

struct IndirectCommandsStreamNV {

  using native_type = VkIndirectCommandsStreamNV;

  IndirectCommandsStreamNV(VkBuffer buffer = {}, DeviceSize offset = {}) : buffer_(buffer), offset_(offset) {}

  IndirectCommandsStreamNV(const native_type &rhs) : IndirectCommandsStreamNV(std::bit_cast<IndirectCommandsStreamNV>(rhs)) {}

  IndirectCommandsStreamNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<IndirectCommandsStreamNV>(rhs);
    return *this;
  }

  auto operator<=>(const IndirectCommandsStreamNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkBuffer buffer_;
  DeviceSize offset_;
};

struct GeneratedCommandsInfoNV {

  static constexpr StructureType structure_type = StructureType::E_GENERATED_COMMANDS_INFO_NV;

  using native_type = VkGeneratedCommandsInfoNV;

  GeneratedCommandsInfoNV(PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                          VkPipeline pipeline = {},
                          VkIndirectCommandsLayoutNV indirect_commands_layout = {},
                          uint32_t stream_count = {},
                          const IndirectCommandsStreamNV *p_streams = {},
                          uint32_t sequences_count = {},
                          VkBuffer preprocess_buffer = {},
                          DeviceSize preprocess_offset = {},
                          DeviceSize preprocess_size = {},
                          VkBuffer sequences_count_buffer = {},
                          DeviceSize sequences_count_offset = {},
                          VkBuffer sequences_index_buffer = {},
                          DeviceSize sequences_index_offset = {},
                          const void *next = {})
    : pipeline_bind_point_(pipeline_bind_point), pipeline_(pipeline), indirect_commands_layout_(indirect_commands_layout),
      stream_count_(stream_count), p_streams_(p_streams), sequences_count_(sequences_count), preprocess_buffer_(preprocess_buffer),
      preprocess_offset_(preprocess_offset), preprocess_size_(preprocess_size), sequences_count_buffer_(sequences_count_buffer),
      sequences_count_offset_(sequences_count_offset), sequences_index_buffer_(sequences_index_buffer),
      sequences_index_offset_(sequences_index_offset), next_(next) {}

  GeneratedCommandsInfoNV(const native_type &rhs) : GeneratedCommandsInfoNV(std::bit_cast<GeneratedCommandsInfoNV>(rhs)) {}

  GeneratedCommandsInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GeneratedCommandsInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const GeneratedCommandsInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GENERATED_COMMANDS_INFO_NV;
  const void *next_;
  PipelineBindPoint pipeline_bind_point_;
  VkPipeline pipeline_;
  VkIndirectCommandsLayoutNV indirect_commands_layout_;
  uint32_t stream_count_;
  const IndirectCommandsStreamNV *p_streams_;
  uint32_t sequences_count_;
  VkBuffer preprocess_buffer_;
  DeviceSize preprocess_offset_;
  DeviceSize preprocess_size_;
  VkBuffer sequences_count_buffer_;
  DeviceSize sequences_count_offset_;
  VkBuffer sequences_index_buffer_;
  DeviceSize sequences_index_offset_;
};

struct MemoryUnmapInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_UNMAP_INFO_KHR;

  using native_type = VkMemoryUnmapInfoKHR;

  MemoryUnmapInfoKHR(MemoryUnmapMask flags = {}, VkDeviceMemory memory = {}, const void *next = {})
    : flags_(flags), memory_(memory), next_(next) {}

  MemoryUnmapInfoKHR(const native_type &rhs) : MemoryUnmapInfoKHR(std::bit_cast<MemoryUnmapInfoKHR>(rhs)) {}

  MemoryUnmapInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryUnmapInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryUnmapInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_UNMAP_INFO_KHR;
  const void *next_;
  MemoryUnmapMask flags_;
  VkDeviceMemory memory_;
};

struct PhysicalDeviceTilePropertiesFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceTilePropertiesFeaturesQCOM;

  PhysicalDeviceTilePropertiesFeaturesQCOM(bool32 tile_properties = {}, void *next = {}) : tile_properties_(tile_properties), next_(next) {}

  PhysicalDeviceTilePropertiesFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceTilePropertiesFeaturesQCOM(std::bit_cast<PhysicalDeviceTilePropertiesFeaturesQCOM>(rhs)) {}

  PhysicalDeviceTilePropertiesFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTilePropertiesFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTilePropertiesFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM;
  void *next_;
  bool32 tile_properties_;
};

struct VideoDecodeH264DpbSlotInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR;

  using native_type = VkVideoDecodeH264DpbSlotInfoKHR;

  VideoDecodeH264DpbSlotInfoKHR(const StdVideoDecodeH264ReferenceInfo *p_std_reference_info = {}, const void *next = {})
    : p_std_reference_info_(p_std_reference_info), next_(next) {}

  VideoDecodeH264DpbSlotInfoKHR(const native_type &rhs)
    : VideoDecodeH264DpbSlotInfoKHR(std::bit_cast<VideoDecodeH264DpbSlotInfoKHR>(rhs)) {}

  VideoDecodeH264DpbSlotInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH264DpbSlotInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH264DpbSlotInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR;
  const void *next_;
  const StdVideoDecodeH264ReferenceInfo *p_std_reference_info_;
};

struct ViewportSwizzleNV {

  using native_type = VkViewportSwizzleNV;

  ViewportSwizzleNV(ViewportCoordinateSwizzle x = ViewportCoordinateSwizzle::E_POSITIVE_X_NV,
                    ViewportCoordinateSwizzle y = ViewportCoordinateSwizzle::E_POSITIVE_X_NV,
                    ViewportCoordinateSwizzle z = ViewportCoordinateSwizzle::E_POSITIVE_X_NV,
                    ViewportCoordinateSwizzle w = ViewportCoordinateSwizzle::E_POSITIVE_X_NV)
    : x_(x), y_(y), z_(z), w_(w) {}

  ViewportSwizzleNV(const native_type &rhs) : ViewportSwizzleNV(std::bit_cast<ViewportSwizzleNV>(rhs)) {}

  ViewportSwizzleNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ViewportSwizzleNV>(rhs);
    return *this;
  }

  auto operator<=>(const ViewportSwizzleNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ViewportCoordinateSwizzle x_;
  ViewportCoordinateSwizzle y_;
  ViewportCoordinateSwizzle z_;
  ViewportCoordinateSwizzle w_;
};

struct ExternalImageFormatProperties {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_IMAGE_FORMAT_PROPERTIES;

  using native_type = VkExternalImageFormatProperties;

  ExternalImageFormatProperties() = default;

  ExternalImageFormatProperties(const native_type &rhs)
    : ExternalImageFormatProperties(std::bit_cast<ExternalImageFormatProperties>(rhs)) {}

  ExternalImageFormatProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalImageFormatProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalImageFormatProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
  void *next_ = {};
  ExternalMemoryProperties external_memory_properties_ = {};
};

struct SetDescriptorBufferOffsetsInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT;

  using native_type = VkSetDescriptorBufferOffsetsInfoEXT;

  SetDescriptorBufferOffsetsInfoEXT(ShaderStageMask stage_flags = {},
                                    VkPipelineLayout layout = {},
                                    uint32_t first_set = {},
                                    uint32_t set_count = {},
                                    const uint32_t *p_buffer_indices = {},
                                    const DeviceSize *p_offsets = {},
                                    const void *next = {})
    : stage_flags_(stage_flags), layout_(layout), first_set_(first_set), set_count_(set_count), p_buffer_indices_(p_buffer_indices),
      p_offsets_(p_offsets), next_(next) {}

  SetDescriptorBufferOffsetsInfoEXT(const native_type &rhs)
    : SetDescriptorBufferOffsetsInfoEXT(std::bit_cast<SetDescriptorBufferOffsetsInfoEXT>(rhs)) {}

  SetDescriptorBufferOffsetsInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SetDescriptorBufferOffsetsInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SetDescriptorBufferOffsetsInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT;
  const void *next_;
  ShaderStageMask stage_flags_;
  VkPipelineLayout layout_;
  uint32_t first_set_;
  uint32_t set_count_;
  const uint32_t *p_buffer_indices_;
  const DeviceSize *p_offsets_;
};

struct PhysicalDeviceMemoryBudgetPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceMemoryBudgetPropertiesEXT;

  PhysicalDeviceMemoryBudgetPropertiesEXT() = default;

  PhysicalDeviceMemoryBudgetPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceMemoryBudgetPropertiesEXT(std::bit_cast<PhysicalDeviceMemoryBudgetPropertiesEXT>(rhs)) {}

  PhysicalDeviceMemoryBudgetPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMemoryBudgetPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMemoryBudgetPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
  void *next_ = {};
  std::array<DeviceSize, VK_MAX_MEMORY_HEAPS> heap_budget_ = {};
  std::array<DeviceSize, VK_MAX_MEMORY_HEAPS> heap_usage_ = {};
};

struct SamplerCaptureDescriptorDataInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;

  using native_type = VkSamplerCaptureDescriptorDataInfoEXT;

  SamplerCaptureDescriptorDataInfoEXT(VkSampler sampler = {}, const void *next = {}) : sampler_(sampler), next_(next) {}

  SamplerCaptureDescriptorDataInfoEXT(const native_type &rhs)
    : SamplerCaptureDescriptorDataInfoEXT(std::bit_cast<SamplerCaptureDescriptorDataInfoEXT>(rhs)) {}

  SamplerCaptureDescriptorDataInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerCaptureDescriptorDataInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerCaptureDescriptorDataInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
  const void *next_;
  VkSampler sampler_;
};

struct IndirectCommandsLayoutTokenNV {

  static constexpr StructureType structure_type = StructureType::E_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;

  using native_type = VkIndirectCommandsLayoutTokenNV;

  IndirectCommandsLayoutTokenNV(IndirectCommandsTokenType token_type = IndirectCommandsTokenType::E_SHADER_GROUP_NV,
                                uint32_t stream = {},
                                uint32_t offset = {},
                                uint32_t vertex_binding_unit = {},
                                bool32 vertex_dynamic_stride = {},
                                VkPipelineLayout pushconstant_pipeline_layout = {},
                                ShaderStageMask pushconstant_shader_stage_flags = {},
                                uint32_t pushconstant_offset = {},
                                uint32_t pushconstant_size = {},
                                IndirectStateMask indirect_state_flags = {},
                                uint32_t index_type_count = {},
                                const IndexType *p_index_types = {},
                                const uint32_t *p_index_type_values = {},
                                const void *next = {})
    : token_type_(token_type), stream_(stream), offset_(offset), vertex_binding_unit_(vertex_binding_unit),
      vertex_dynamic_stride_(vertex_dynamic_stride), pushconstant_pipeline_layout_(pushconstant_pipeline_layout),
      pushconstant_shader_stage_flags_(pushconstant_shader_stage_flags), pushconstant_offset_(pushconstant_offset),
      pushconstant_size_(pushconstant_size), indirect_state_flags_(indirect_state_flags), index_type_count_(index_type_count),
      p_index_types_(p_index_types), p_index_type_values_(p_index_type_values), next_(next) {}

  IndirectCommandsLayoutTokenNV(const native_type &rhs)
    : IndirectCommandsLayoutTokenNV(std::bit_cast<IndirectCommandsLayoutTokenNV>(rhs)) {}

  IndirectCommandsLayoutTokenNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<IndirectCommandsLayoutTokenNV>(rhs);
    return *this;
  }

  auto operator<=>(const IndirectCommandsLayoutTokenNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
  const void *next_;
  IndirectCommandsTokenType token_type_;
  uint32_t stream_;
  uint32_t offset_;
  uint32_t vertex_binding_unit_;
  bool32 vertex_dynamic_stride_;
  VkPipelineLayout pushconstant_pipeline_layout_;
  ShaderStageMask pushconstant_shader_stage_flags_;
  uint32_t pushconstant_offset_;
  uint32_t pushconstant_size_;
  IndirectStateMask indirect_state_flags_;
  uint32_t index_type_count_;
  const IndexType *p_index_types_;
  const uint32_t *p_index_type_values_;
};

struct IndirectCommandsLayoutCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;

  using native_type = VkIndirectCommandsLayoutCreateInfoNV;

  IndirectCommandsLayoutCreateInfoNV(IndirectCommandsLayoutUsageMask flags = {},
                                     PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                                     uint32_t token_count = {},
                                     const IndirectCommandsLayoutTokenNV *p_tokens = {},
                                     uint32_t stream_count = {},
                                     const uint32_t *p_stream_strides = {},
                                     const void *next = {})
    : flags_(flags), pipeline_bind_point_(pipeline_bind_point), token_count_(token_count), p_tokens_(p_tokens), stream_count_(stream_count),
      p_stream_strides_(p_stream_strides), next_(next) {}

  IndirectCommandsLayoutCreateInfoNV(const native_type &rhs)
    : IndirectCommandsLayoutCreateInfoNV(std::bit_cast<IndirectCommandsLayoutCreateInfoNV>(rhs)) {}

  IndirectCommandsLayoutCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<IndirectCommandsLayoutCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const IndirectCommandsLayoutCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
  const void *next_;
  IndirectCommandsLayoutUsageMask flags_;
  PipelineBindPoint pipeline_bind_point_;
  uint32_t token_count_;
  const IndirectCommandsLayoutTokenNV *p_tokens_;
  uint32_t stream_count_;
  const uint32_t *p_stream_strides_;
};

struct PipelineInputAssemblyStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;

  using native_type = VkPipelineInputAssemblyStateCreateInfo;

  PipelineInputAssemblyStateCreateInfo(PipelineInputAssemblyStateCreateMask flags = {},
                                       PrimitiveTopology topology = PrimitiveTopology::E_POINT_LIST,
                                       bool32 primitive_restart_enable = {},
                                       const void *next = {})
    : flags_(flags), topology_(topology), primitive_restart_enable_(primitive_restart_enable), next_(next) {}

  PipelineInputAssemblyStateCreateInfo(const native_type &rhs)
    : PipelineInputAssemblyStateCreateInfo(std::bit_cast<PipelineInputAssemblyStateCreateInfo>(rhs)) {}

  PipelineInputAssemblyStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineInputAssemblyStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineInputAssemblyStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
  const void *next_;
  PipelineInputAssemblyStateCreateMask flags_;
  PrimitiveTopology topology_;
  bool32 primitive_restart_enable_;
};

struct InputAttachmentAspectReference {

  using native_type = VkInputAttachmentAspectReference;

  InputAttachmentAspectReference(uint32_t subpass = {}, uint32_t input_attachment_index = {}, ImageAspectMask aspect_mask = {})
    : subpass_(subpass), input_attachment_index_(input_attachment_index), aspect_mask_(aspect_mask) {}

  InputAttachmentAspectReference(const native_type &rhs)
    : InputAttachmentAspectReference(std::bit_cast<InputAttachmentAspectReference>(rhs)) {}

  InputAttachmentAspectReference &operator=(const native_type &rhs) {
    *this = std::bit_cast<InputAttachmentAspectReference>(rhs);
    return *this;
  }

  auto operator<=>(const InputAttachmentAspectReference &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t subpass_;
  uint32_t input_attachment_index_;
  ImageAspectMask aspect_mask_;
};

struct RenderPassInputAttachmentAspectCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;

  using native_type = VkRenderPassInputAttachmentAspectCreateInfo;

  RenderPassInputAttachmentAspectCreateInfo(uint32_t aspect_reference_count = {},
                                            const InputAttachmentAspectReference *p_aspect_references = {},
                                            const void *next = {})
    : aspect_reference_count_(aspect_reference_count), p_aspect_references_(p_aspect_references), next_(next) {}

  RenderPassInputAttachmentAspectCreateInfo(const native_type &rhs)
    : RenderPassInputAttachmentAspectCreateInfo(std::bit_cast<RenderPassInputAttachmentAspectCreateInfo>(rhs)) {}

  RenderPassInputAttachmentAspectCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassInputAttachmentAspectCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassInputAttachmentAspectCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
  const void *next_;
  uint32_t aspect_reference_count_;
  const InputAttachmentAspectReference *p_aspect_references_;
};

struct PipelineCoverageReductionStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineCoverageReductionStateCreateInfoNV;

  PipelineCoverageReductionStateCreateInfoNV(PipelineCoverageReductionStateCreateMask flags = {},
                                             CoverageReductionMode coverage_reduction_mode = CoverageReductionMode::E_MERGE_NV,
                                             const void *next = {})
    : flags_(flags), coverage_reduction_mode_(coverage_reduction_mode), next_(next) {}

  PipelineCoverageReductionStateCreateInfoNV(const native_type &rhs)
    : PipelineCoverageReductionStateCreateInfoNV(std::bit_cast<PipelineCoverageReductionStateCreateInfoNV>(rhs)) {}

  PipelineCoverageReductionStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCoverageReductionStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCoverageReductionStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
  const void *next_;
  PipelineCoverageReductionStateCreateMask flags_;
  CoverageReductionMode coverage_reduction_mode_;
};

struct SubmitInfo {

  static constexpr StructureType structure_type = StructureType::E_SUBMIT_INFO;

  using native_type = VkSubmitInfo;

  SubmitInfo(const PipelineStageMask *p_wait_dst_stage_mask = {},
             std::span<const VkSemaphore> signal_semaphores = {},
             std::span<const VkSemaphore> wait_semaphores = {},
             std::span<const VkCommandBuffer> command_buffers = {},
             const void *next = {})
    : wait_semaphore_count_(wait_semaphores.size()), p_wait_semaphores_(wait_semaphores.data()),
      p_wait_dst_stage_mask_(p_wait_dst_stage_mask), command_buffer_count_(command_buffers.size()),
      p_command_buffers_(command_buffers.data()), signal_semaphore_count_(signal_semaphores.size()),
      p_signal_semaphores_(signal_semaphores.data()), next_(next) {}

  SubmitInfo(const native_type &rhs) : SubmitInfo(std::bit_cast<SubmitInfo>(rhs)) {}

  SubmitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubmitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SubmitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBMIT_INFO;
  const void *next_;
  uint32_t wait_semaphore_count_;
  const VkSemaphore *p_wait_semaphores_;
  const PipelineStageMask *p_wait_dst_stage_mask_;
  uint32_t command_buffer_count_;
  const VkCommandBuffer *p_command_buffers_;
  uint32_t signal_semaphore_count_;
  const VkSemaphore *p_signal_semaphores_;
};

struct DisplayPlaneCapabilitiesKHR {

  using native_type = VkDisplayPlaneCapabilitiesKHR;

  DisplayPlaneCapabilitiesKHR() = default;

  DisplayPlaneCapabilitiesKHR(const native_type &rhs) : DisplayPlaneCapabilitiesKHR(std::bit_cast<DisplayPlaneCapabilitiesKHR>(rhs)) {}

  DisplayPlaneCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPlaneCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPlaneCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DisplayPlaneAlphaMask supported_alpha_ = {};
  Offset2D min_src_position_ = {};
  Offset2D max_src_position_ = {};
  Extent2D min_src_extent_ = {};
  Extent2D max_src_extent_ = {};
  Offset2D min_dst_position_ = {};
  Offset2D max_dst_position_ = {};
  Extent2D min_dst_extent_ = {};
  Extent2D max_dst_extent_ = {};
};

struct VertexInputBindingDescription {

  using native_type = VkVertexInputBindingDescription;

  VertexInputBindingDescription(uint32_t binding = {}, uint32_t stride = {}, VertexInputRate input_rate = VertexInputRate::E_VERTEX)
    : binding_(binding), stride_(stride), input_rate_(input_rate) {}

  VertexInputBindingDescription(const native_type &rhs)
    : VertexInputBindingDescription(std::bit_cast<VertexInputBindingDescription>(rhs)) {}

  VertexInputBindingDescription &operator=(const native_type &rhs) {
    *this = std::bit_cast<VertexInputBindingDescription>(rhs);
    return *this;
  }

  auto operator<=>(const VertexInputBindingDescription &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t binding_;
  uint32_t stride_;
  VertexInputRate input_rate_;
};

struct VertexInputAttributeDescription {

  using native_type = VkVertexInputAttributeDescription;

  VertexInputAttributeDescription(uint32_t location = {}, uint32_t binding = {}, Format format = Format::E_UNDEFINED, uint32_t offset = {})
    : location_(location), binding_(binding), format_(format), offset_(offset) {}

  VertexInputAttributeDescription(const native_type &rhs)
    : VertexInputAttributeDescription(std::bit_cast<VertexInputAttributeDescription>(rhs)) {}

  VertexInputAttributeDescription &operator=(const native_type &rhs) {
    *this = std::bit_cast<VertexInputAttributeDescription>(rhs);
    return *this;
  }

  auto operator<=>(const VertexInputAttributeDescription &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t location_;
  uint32_t binding_;
  Format format_;
  uint32_t offset_;
};

struct PipelineVertexInputStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;

  using native_type = VkPipelineVertexInputStateCreateInfo;

  PipelineVertexInputStateCreateInfo(PipelineVertexInputStateCreateMask flags = {},
                                     uint32_t vertex_binding_description_count = {},
                                     const VertexInputBindingDescription *p_vertex_binding_descriptions = {},
                                     uint32_t vertex_attribute_description_count = {},
                                     const VertexInputAttributeDescription *p_vertex_attribute_descriptions = {},
                                     const void *next = {})
    : flags_(flags), vertex_binding_description_count_(vertex_binding_description_count),
      p_vertex_binding_descriptions_(p_vertex_binding_descriptions),
      vertex_attribute_description_count_(vertex_attribute_description_count),
      p_vertex_attribute_descriptions_(p_vertex_attribute_descriptions), next_(next) {}

  PipelineVertexInputStateCreateInfo(const native_type &rhs)
    : PipelineVertexInputStateCreateInfo(std::bit_cast<PipelineVertexInputStateCreateInfo>(rhs)) {}

  PipelineVertexInputStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineVertexInputStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineVertexInputStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
  const void *next_;
  PipelineVertexInputStateCreateMask flags_;
  uint32_t vertex_binding_description_count_;
  const VertexInputBindingDescription *p_vertex_binding_descriptions_;
  uint32_t vertex_attribute_description_count_;
  const VertexInputAttributeDescription *p_vertex_attribute_descriptions_;
};

struct PipelineTessellationStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_TESSELLATION_STATE_CREATE_INFO;

  using native_type = VkPipelineTessellationStateCreateInfo;

  PipelineTessellationStateCreateInfo(PipelineTessellationStateCreateMask flags = {},
                                      uint32_t patch_control_points = {},
                                      const void *next = {})
    : flags_(flags), patch_control_points_(patch_control_points), next_(next) {}

  PipelineTessellationStateCreateInfo(const native_type &rhs)
    : PipelineTessellationStateCreateInfo(std::bit_cast<PipelineTessellationStateCreateInfo>(rhs)) {}

  PipelineTessellationStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineTessellationStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineTessellationStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
  const void *next_;
  PipelineTessellationStateCreateMask flags_;
  uint32_t patch_control_points_;
};

struct GraphicsShaderGroupCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;

  using native_type = VkGraphicsShaderGroupCreateInfoNV;

  GraphicsShaderGroupCreateInfoNV(uint32_t stage_count = {},
                                  const PipelineShaderStageCreateInfo *p_stages = {},
                                  const PipelineVertexInputStateCreateInfo *p_vertex_input_state = {},
                                  const PipelineTessellationStateCreateInfo *p_tessellation_state = {},
                                  const void *next = {})
    : stage_count_(stage_count), p_stages_(p_stages), p_vertex_input_state_(p_vertex_input_state),
      p_tessellation_state_(p_tessellation_state), next_(next) {}

  GraphicsShaderGroupCreateInfoNV(const native_type &rhs)
    : GraphicsShaderGroupCreateInfoNV(std::bit_cast<GraphicsShaderGroupCreateInfoNV>(rhs)) {}

  GraphicsShaderGroupCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GraphicsShaderGroupCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const GraphicsShaderGroupCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
  const void *next_;
  uint32_t stage_count_;
  const PipelineShaderStageCreateInfo *p_stages_;
  const PipelineVertexInputStateCreateInfo *p_vertex_input_state_;
  const PipelineTessellationStateCreateInfo *p_tessellation_state_;
};

struct PhysicalDeviceMultiDrawPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceMultiDrawPropertiesEXT;

  PhysicalDeviceMultiDrawPropertiesEXT() = default;

  PhysicalDeviceMultiDrawPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceMultiDrawPropertiesEXT(std::bit_cast<PhysicalDeviceMultiDrawPropertiesEXT>(rhs)) {}

  PhysicalDeviceMultiDrawPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiDrawPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiDrawPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_multi_draw_count_ = {};
};

struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

  PhysicalDeviceDeviceGeneratedCommandsPropertiesNV() = default;

  PhysicalDeviceDeviceGeneratedCommandsPropertiesNV(const native_type &rhs)
    : PhysicalDeviceDeviceGeneratedCommandsPropertiesNV(std::bit_cast<PhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(rhs)) {}

  PhysicalDeviceDeviceGeneratedCommandsPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDeviceGeneratedCommandsPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
  void *next_ = {};
  uint32_t max_graphics_shader_group_count_ = {};
  uint32_t max_indirect_sequence_count_ = {};
  uint32_t max_indirect_commands_token_count_ = {};
  uint32_t max_indirect_commands_stream_count_ = {};
  uint32_t max_indirect_commands_token_offset_ = {};
  uint32_t max_indirect_commands_stream_stride_ = {};
  uint32_t min_sequences_count_buffer_offset_alignment_ = {};
  uint32_t min_sequences_index_buffer_offset_alignment_ = {};
  uint32_t min_indirect_commands_buffer_offset_alignment_ = {};
};

struct DescriptorSetLayoutBinding {

  using native_type = VkDescriptorSetLayoutBinding;

  DescriptorSetLayoutBinding(uint32_t binding = {},
                             DescriptorType descriptor_type = DescriptorType::E_SAMPLER,
                             uint32_t descriptor_count = {},
                             ShaderStageMask stage_flags = {},
                             const VkSampler *p_immutable_samplers = {})
    : binding_(binding), descriptor_type_(descriptor_type), descriptor_count_(descriptor_count), stage_flags_(stage_flags),
      p_immutable_samplers_(p_immutable_samplers) {}

  DescriptorSetLayoutBinding(const native_type &rhs) : DescriptorSetLayoutBinding(std::bit_cast<DescriptorSetLayoutBinding>(rhs)) {}

  DescriptorSetLayoutBinding &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetLayoutBinding>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetLayoutBinding &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t binding_;
  DescriptorType descriptor_type_;
  uint32_t descriptor_count_;
  ShaderStageMask stage_flags_;
  const VkSampler *p_immutable_samplers_;
};

struct DescriptorSetLayoutCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;

  using native_type = VkDescriptorSetLayoutCreateInfo;

  DescriptorSetLayoutCreateInfo(DescriptorSetLayoutCreateMask flags = {},
                                uint32_t binding_count = {},
                                const DescriptorSetLayoutBinding *p_bindings = {},
                                const void *next = {})
    : flags_(flags), binding_count_(binding_count), p_bindings_(p_bindings), next_(next) {}

  DescriptorSetLayoutCreateInfo(const native_type &rhs)
    : DescriptorSetLayoutCreateInfo(std::bit_cast<DescriptorSetLayoutCreateInfo>(rhs)) {}

  DescriptorSetLayoutCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetLayoutCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetLayoutCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
  const void *next_;
  DescriptorSetLayoutCreateMask flags_;
  uint32_t binding_count_;
  const DescriptorSetLayoutBinding *p_bindings_;
};

struct AttachmentReference2 {

  static constexpr StructureType structure_type = StructureType::E_ATTACHMENT_REFERENCE_2;

  using native_type = VkAttachmentReference2;

  AttachmentReference2(uint32_t attachment = {},
                       ImageLayout layout = ImageLayout::E_UNDEFINED,
                       ImageAspectMask aspect_mask = {},
                       const void *next = {})
    : attachment_(attachment), layout_(layout), aspect_mask_(aspect_mask), next_(next) {}

  AttachmentReference2(const native_type &rhs) : AttachmentReference2(std::bit_cast<AttachmentReference2>(rhs)) {}

  AttachmentReference2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentReference2>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentReference2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ATTACHMENT_REFERENCE_2;
  const void *next_;
  uint32_t attachment_;
  ImageLayout layout_;
  ImageAspectMask aspect_mask_;
};

struct FragmentShadingRateAttachmentInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;

  using native_type = VkFragmentShadingRateAttachmentInfoKHR;

  FragmentShadingRateAttachmentInfoKHR(const AttachmentReference2 *p_fragment_shading_rate_attachment = {},
                                       Extent2D shading_rate_attachment_texel_size = {},
                                       const void *next = {})
    : p_fragment_shading_rate_attachment_(p_fragment_shading_rate_attachment),
      shading_rate_attachment_texel_size_(shading_rate_attachment_texel_size), next_(next) {}

  FragmentShadingRateAttachmentInfoKHR(const native_type &rhs)
    : FragmentShadingRateAttachmentInfoKHR(std::bit_cast<FragmentShadingRateAttachmentInfoKHR>(rhs)) {}

  FragmentShadingRateAttachmentInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<FragmentShadingRateAttachmentInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const FragmentShadingRateAttachmentInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
  const void *next_;
  const AttachmentReference2 *p_fragment_shading_rate_attachment_;
  Extent2D shading_rate_attachment_texel_size_;
};

struct PrivateDataSlotCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PRIVATE_DATA_SLOT_CREATE_INFO;

  using native_type = VkPrivateDataSlotCreateInfo;

  PrivateDataSlotCreateInfo(PrivateDataSlotCreateMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  PrivateDataSlotCreateInfo(const native_type &rhs) : PrivateDataSlotCreateInfo(std::bit_cast<PrivateDataSlotCreateInfo>(rhs)) {}

  PrivateDataSlotCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PrivateDataSlotCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PrivateDataSlotCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PRIVATE_DATA_SLOT_CREATE_INFO;
  const void *next_;
  PrivateDataSlotCreateMask flags_;
};

struct VertexInputBindingDivisorDescriptionKHR {

  using native_type = VkVertexInputBindingDivisorDescriptionKHR;

  VertexInputBindingDivisorDescriptionKHR(uint32_t binding = {}, uint32_t divisor = {}) : binding_(binding), divisor_(divisor) {}

  VertexInputBindingDivisorDescriptionKHR(const native_type &rhs)
    : VertexInputBindingDivisorDescriptionKHR(std::bit_cast<VertexInputBindingDivisorDescriptionKHR>(rhs)) {}

  VertexInputBindingDivisorDescriptionKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VertexInputBindingDivisorDescriptionKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VertexInputBindingDivisorDescriptionKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t binding_;
  uint32_t divisor_;
};

struct PipelineVertexInputDivisorStateCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR;

  using native_type = VkPipelineVertexInputDivisorStateCreateInfoKHR;

  PipelineVertexInputDivisorStateCreateInfoKHR(uint32_t vertex_binding_divisor_count = {},
                                               const VertexInputBindingDivisorDescriptionKHR *p_vertex_binding_divisors = {},
                                               const void *next = {})
    : vertex_binding_divisor_count_(vertex_binding_divisor_count), p_vertex_binding_divisors_(p_vertex_binding_divisors), next_(next) {}

  PipelineVertexInputDivisorStateCreateInfoKHR(const native_type &rhs)
    : PipelineVertexInputDivisorStateCreateInfoKHR(std::bit_cast<PipelineVertexInputDivisorStateCreateInfoKHR>(rhs)) {}

  PipelineVertexInputDivisorStateCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineVertexInputDivisorStateCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineVertexInputDivisorStateCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR;
  const void *next_;
  uint32_t vertex_binding_divisor_count_;
  const VertexInputBindingDivisorDescriptionKHR *p_vertex_binding_divisors_;
};

struct VideoEncodeH264SessionParametersCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;

  using native_type = VkVideoEncodeH264SessionParametersCreateInfoKHR;

  VideoEncodeH264SessionParametersCreateInfoKHR(uint32_t max_std_spscount = {},
                                                uint32_t max_std_ppscount = {},
                                                const VideoEncodeH264SessionParametersAddInfoKHR *p_parameters_add_info = {},
                                                const void *next = {})
    : max_std_spscount_(max_std_spscount), max_std_ppscount_(max_std_ppscount), p_parameters_add_info_(p_parameters_add_info), next_(next) {
  }

  VideoEncodeH264SessionParametersCreateInfoKHR(const native_type &rhs)
    : VideoEncodeH264SessionParametersCreateInfoKHR(std::bit_cast<VideoEncodeH264SessionParametersCreateInfoKHR>(rhs)) {}

  VideoEncodeH264SessionParametersCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264SessionParametersCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264SessionParametersCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;
  const void *next_;
  uint32_t max_std_spscount_;
  uint32_t max_std_ppscount_;
  const VideoEncodeH264SessionParametersAddInfoKHR *p_parameters_add_info_;
};

struct GraphicsPipelineShaderGroupsCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;

  using native_type = VkGraphicsPipelineShaderGroupsCreateInfoNV;

  GraphicsPipelineShaderGroupsCreateInfoNV(uint32_t group_count = {},
                                           const GraphicsShaderGroupCreateInfoNV *p_groups = {},
                                           uint32_t pipeline_count = {},
                                           const VkPipeline *p_pipelines = {},
                                           const void *next = {})
    : group_count_(group_count), p_groups_(p_groups), pipeline_count_(pipeline_count), p_pipelines_(p_pipelines), next_(next) {}

  GraphicsPipelineShaderGroupsCreateInfoNV(const native_type &rhs)
    : GraphicsPipelineShaderGroupsCreateInfoNV(std::bit_cast<GraphicsPipelineShaderGroupsCreateInfoNV>(rhs)) {}

  GraphicsPipelineShaderGroupsCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GraphicsPipelineShaderGroupsCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const GraphicsPipelineShaderGroupsCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
  const void *next_;
  uint32_t group_count_;
  const GraphicsShaderGroupCreateInfoNV *p_groups_;
  uint32_t pipeline_count_;
  const VkPipeline *p_pipelines_;
};

struct DevicePrivateDataCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_PRIVATE_DATA_CREATE_INFO;

  using native_type = VkDevicePrivateDataCreateInfo;

  DevicePrivateDataCreateInfo(uint32_t private_data_slot_request_count = {}, const void *next = {})
    : private_data_slot_request_count_(private_data_slot_request_count), next_(next) {}

  DevicePrivateDataCreateInfo(const native_type &rhs) : DevicePrivateDataCreateInfo(std::bit_cast<DevicePrivateDataCreateInfo>(rhs)) {}

  DevicePrivateDataCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DevicePrivateDataCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DevicePrivateDataCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_PRIVATE_DATA_CREATE_INFO;
  const void *next_;
  uint32_t private_data_slot_request_count_;
};

struct PhysicalDeviceMemoryDecompressionPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceMemoryDecompressionPropertiesNV;

  PhysicalDeviceMemoryDecompressionPropertiesNV() = default;

  PhysicalDeviceMemoryDecompressionPropertiesNV(const native_type &rhs)
    : PhysicalDeviceMemoryDecompressionPropertiesNV(std::bit_cast<PhysicalDeviceMemoryDecompressionPropertiesNV>(rhs)) {}

  PhysicalDeviceMemoryDecompressionPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMemoryDecompressionPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMemoryDecompressionPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV;
  void *next_ = {};
  MemoryDecompressionMethodMask decompression_methods_ = {};
  uint64_t max_decompression_indirect_count_ = {};
};

struct DeviceQueueCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_QUEUE_CREATE_INFO;

  using native_type = VkDeviceQueueCreateInfo;

  DeviceQueueCreateInfo(DeviceQueueCreateMask flags = {},
                        uint32_t queue_family_index = {},
                        uint32_t queue_count = {},
                        const float *p_queue_priorities = {},
                        const void *next = {})
    : flags_(flags), queue_family_index_(queue_family_index), queue_count_(queue_count), p_queue_priorities_(p_queue_priorities),
      next_(next) {}

  DeviceQueueCreateInfo(const native_type &rhs) : DeviceQueueCreateInfo(std::bit_cast<DeviceQueueCreateInfo>(rhs)) {}

  DeviceQueueCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceQueueCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceQueueCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_QUEUE_CREATE_INFO;
  const void *next_;
  DeviceQueueCreateMask flags_;
  uint32_t queue_family_index_;
  uint32_t queue_count_;
  const float *p_queue_priorities_;
};

struct PhysicalDeviceFeatures {

  using native_type = VkPhysicalDeviceFeatures;

  PhysicalDeviceFeatures(bool32 robust_buffer_access = {},
                         bool32 full_draw_index_uint32 = {},
                         bool32 image_cube_array = {},
                         bool32 independent_blend = {},
                         bool32 geometry_shader = {},
                         bool32 tessellation_shader = {},
                         bool32 sample_rate_shading = {},
                         bool32 dual_src_blend = {},
                         bool32 logic_op = {},
                         bool32 multi_draw_indirect = {},
                         bool32 draw_indirect_first_instance = {},
                         bool32 depth_clamp = {},
                         bool32 depth_bias_clamp = {},
                         bool32 fill_mode_non_solid = {},
                         bool32 depth_bounds = {},
                         bool32 wide_lines = {},
                         bool32 large_points = {},
                         bool32 alpha_to_one = {},
                         bool32 multi_viewport = {},
                         bool32 sampler_anisotropy = {},
                         bool32 texture_compression_etc2 = {},
                         bool32 texture_compression_astc_ldr = {},
                         bool32 texture_compression_bc = {},
                         bool32 occlusion_query_precise = {},
                         bool32 pipeline_statistics_query = {},
                         bool32 vertex_pipeline_stores_and_atomics = {},
                         bool32 fragment_stores_and_atomics = {},
                         bool32 shader_tessellation_and_geometry_point_size = {},
                         bool32 shader_image_gather_extended = {},
                         bool32 shader_storage_image_extended_formats = {},
                         bool32 shader_storage_image_multisample = {},
                         bool32 shader_storage_image_read_without_format = {},
                         bool32 shader_storage_image_write_without_format = {},
                         bool32 shader_uniform_buffer_array_dynamic_indexing = {},
                         bool32 shader_sampled_image_array_dynamic_indexing = {},
                         bool32 shader_storage_buffer_array_dynamic_indexing = {},
                         bool32 shader_storage_image_array_dynamic_indexing = {},
                         bool32 shader_clip_distance = {},
                         bool32 shader_cull_distance = {},
                         bool32 shader_float64 = {},
                         bool32 shader_int64 = {},
                         bool32 shader_int16 = {},
                         bool32 shader_resource_residency = {},
                         bool32 shader_resource_min_lod = {},
                         bool32 sparse_binding = {},
                         bool32 sparse_residency_buffer = {},
                         bool32 sparse_residency_image2d = {},
                         bool32 sparse_residency_image3d = {},
                         bool32 sparse_residency2samples = {},
                         bool32 sparse_residency4samples = {},
                         bool32 sparse_residency8samples = {},
                         bool32 sparse_residency16samples = {},
                         bool32 sparse_residency_aliased = {},
                         bool32 variable_multisample_rate = {},
                         bool32 inherited_queries = {})
    : robust_buffer_access_(robust_buffer_access), full_draw_index_uint32_(full_draw_index_uint32), image_cube_array_(image_cube_array),
      independent_blend_(independent_blend), geometry_shader_(geometry_shader), tessellation_shader_(tessellation_shader),
      sample_rate_shading_(sample_rate_shading), dual_src_blend_(dual_src_blend), logic_op_(logic_op),
      multi_draw_indirect_(multi_draw_indirect), draw_indirect_first_instance_(draw_indirect_first_instance), depth_clamp_(depth_clamp),
      depth_bias_clamp_(depth_bias_clamp), fill_mode_non_solid_(fill_mode_non_solid), depth_bounds_(depth_bounds), wide_lines_(wide_lines),
      large_points_(large_points), alpha_to_one_(alpha_to_one), multi_viewport_(multi_viewport), sampler_anisotropy_(sampler_anisotropy),
      texture_compression_etc2_(texture_compression_etc2), texture_compression_astc_ldr_(texture_compression_astc_ldr),
      texture_compression_bc_(texture_compression_bc), occlusion_query_precise_(occlusion_query_precise),
      pipeline_statistics_query_(pipeline_statistics_query), vertex_pipeline_stores_and_atomics_(vertex_pipeline_stores_and_atomics),
      fragment_stores_and_atomics_(fragment_stores_and_atomics),
      shader_tessellation_and_geometry_point_size_(shader_tessellation_and_geometry_point_size),
      shader_image_gather_extended_(shader_image_gather_extended),
      shader_storage_image_extended_formats_(shader_storage_image_extended_formats),
      shader_storage_image_multisample_(shader_storage_image_multisample),
      shader_storage_image_read_without_format_(shader_storage_image_read_without_format),
      shader_storage_image_write_without_format_(shader_storage_image_write_without_format),
      shader_uniform_buffer_array_dynamic_indexing_(shader_uniform_buffer_array_dynamic_indexing),
      shader_sampled_image_array_dynamic_indexing_(shader_sampled_image_array_dynamic_indexing),
      shader_storage_buffer_array_dynamic_indexing_(shader_storage_buffer_array_dynamic_indexing),
      shader_storage_image_array_dynamic_indexing_(shader_storage_image_array_dynamic_indexing),
      shader_clip_distance_(shader_clip_distance), shader_cull_distance_(shader_cull_distance), shader_float64_(shader_float64),
      shader_int64_(shader_int64), shader_int16_(shader_int16), shader_resource_residency_(shader_resource_residency),
      shader_resource_min_lod_(shader_resource_min_lod), sparse_binding_(sparse_binding), sparse_residency_buffer_(sparse_residency_buffer),
      sparse_residency_image2d_(sparse_residency_image2d), sparse_residency_image3d_(sparse_residency_image3d),
      sparse_residency2samples_(sparse_residency2samples), sparse_residency4samples_(sparse_residency4samples),
      sparse_residency8samples_(sparse_residency8samples), sparse_residency16samples_(sparse_residency16samples),
      sparse_residency_aliased_(sparse_residency_aliased), variable_multisample_rate_(variable_multisample_rate),
      inherited_queries_(inherited_queries) {}

  PhysicalDeviceFeatures(const native_type &rhs) : PhysicalDeviceFeatures(std::bit_cast<PhysicalDeviceFeatures>(rhs)) {}

  PhysicalDeviceFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  bool32 robust_buffer_access_;
  bool32 full_draw_index_uint32_;
  bool32 image_cube_array_;
  bool32 independent_blend_;
  bool32 geometry_shader_;
  bool32 tessellation_shader_;
  bool32 sample_rate_shading_;
  bool32 dual_src_blend_;
  bool32 logic_op_;
  bool32 multi_draw_indirect_;
  bool32 draw_indirect_first_instance_;
  bool32 depth_clamp_;
  bool32 depth_bias_clamp_;
  bool32 fill_mode_non_solid_;
  bool32 depth_bounds_;
  bool32 wide_lines_;
  bool32 large_points_;
  bool32 alpha_to_one_;
  bool32 multi_viewport_;
  bool32 sampler_anisotropy_;
  bool32 texture_compression_etc2_;
  bool32 texture_compression_astc_ldr_;
  bool32 texture_compression_bc_;
  bool32 occlusion_query_precise_;
  bool32 pipeline_statistics_query_;
  bool32 vertex_pipeline_stores_and_atomics_;
  bool32 fragment_stores_and_atomics_;
  bool32 shader_tessellation_and_geometry_point_size_;
  bool32 shader_image_gather_extended_;
  bool32 shader_storage_image_extended_formats_;
  bool32 shader_storage_image_multisample_;
  bool32 shader_storage_image_read_without_format_;
  bool32 shader_storage_image_write_without_format_;
  bool32 shader_uniform_buffer_array_dynamic_indexing_;
  bool32 shader_sampled_image_array_dynamic_indexing_;
  bool32 shader_storage_buffer_array_dynamic_indexing_;
  bool32 shader_storage_image_array_dynamic_indexing_;
  bool32 shader_clip_distance_;
  bool32 shader_cull_distance_;
  bool32 shader_float64_;
  bool32 shader_int64_;
  bool32 shader_int16_;
  bool32 shader_resource_residency_;
  bool32 shader_resource_min_lod_;
  bool32 sparse_binding_;
  bool32 sparse_residency_buffer_;
  bool32 sparse_residency_image2d_;
  bool32 sparse_residency_image3d_;
  bool32 sparse_residency2samples_;
  bool32 sparse_residency4samples_;
  bool32 sparse_residency8samples_;
  bool32 sparse_residency16samples_;
  bool32 sparse_residency_aliased_;
  bool32 variable_multisample_rate_;
  bool32 inherited_queries_;
};

struct DeviceCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_CREATE_INFO;

  using native_type = VkDeviceCreateInfo;

  DeviceCreateInfo(const PhysicalDeviceFeatures *p_enabled_features = {},
                   std::span<const DeviceQueueCreateInfo> queue_create_infos = {},
                   std::span<const char *> enabled_extension_names = {},
                   std::span<const char *> enabled_layer_names = {},
                   const void *next = {},
                   DeviceCreateMask flags = {})
    : p_enabled_features_(p_enabled_features), flags_(flags), queue_create_info_count_(queue_create_infos.size()),
      p_queue_create_infos_(queue_create_infos.data()), enabled_layer_count_(enabled_layer_names.size()),
      pp_enabled_layer_names_(enabled_layer_names.data()), enabled_extension_count_(enabled_extension_names.size()),
      pp_enabled_extension_names_(enabled_extension_names.data()), next_(next) {}

  DeviceCreateInfo(const native_type &rhs) : DeviceCreateInfo(std::bit_cast<DeviceCreateInfo>(rhs)) {}

  DeviceCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_CREATE_INFO;
  const void *next_;
  DeviceCreateMask flags_;
  uint32_t queue_create_info_count_;
  const DeviceQueueCreateInfo *p_queue_create_infos_;
  uint32_t enabled_layer_count_;
  const char *const *pp_enabled_layer_names_;
  uint32_t enabled_extension_count_;
  const char *const *pp_enabled_extension_names_;
  const PhysicalDeviceFeatures *p_enabled_features_;
};

struct TraceRaysIndirectCommand2KHR {

  using native_type = VkTraceRaysIndirectCommand2KHR;

  TraceRaysIndirectCommand2KHR(DeviceAddress raygen_shader_record_address = {},
                               DeviceSize raygen_shader_record_size = {},
                               DeviceAddress miss_shader_binding_table_address = {},
                               DeviceSize miss_shader_binding_table_size = {},
                               DeviceSize miss_shader_binding_table_stride = {},
                               DeviceAddress hit_shader_binding_table_address = {},
                               DeviceSize hit_shader_binding_table_size = {},
                               DeviceSize hit_shader_binding_table_stride = {},
                               DeviceAddress callable_shader_binding_table_address = {},
                               DeviceSize callable_shader_binding_table_size = {},
                               DeviceSize callable_shader_binding_table_stride = {},
                               uint32_t width = {},
                               uint32_t height = {},
                               uint32_t depth = {})
    : raygen_shader_record_address_(raygen_shader_record_address), raygen_shader_record_size_(raygen_shader_record_size),
      miss_shader_binding_table_address_(miss_shader_binding_table_address),
      miss_shader_binding_table_size_(miss_shader_binding_table_size), miss_shader_binding_table_stride_(miss_shader_binding_table_stride),
      hit_shader_binding_table_address_(hit_shader_binding_table_address), hit_shader_binding_table_size_(hit_shader_binding_table_size),
      hit_shader_binding_table_stride_(hit_shader_binding_table_stride),
      callable_shader_binding_table_address_(callable_shader_binding_table_address),
      callable_shader_binding_table_size_(callable_shader_binding_table_size),
      callable_shader_binding_table_stride_(callable_shader_binding_table_stride), width_(width), height_(height), depth_(depth) {}

  TraceRaysIndirectCommand2KHR(const native_type &rhs) : TraceRaysIndirectCommand2KHR(std::bit_cast<TraceRaysIndirectCommand2KHR>(rhs)) {}

  TraceRaysIndirectCommand2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<TraceRaysIndirectCommand2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const TraceRaysIndirectCommand2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress raygen_shader_record_address_;
  DeviceSize raygen_shader_record_size_;
  DeviceAddress miss_shader_binding_table_address_;
  DeviceSize miss_shader_binding_table_size_;
  DeviceSize miss_shader_binding_table_stride_;
  DeviceAddress hit_shader_binding_table_address_;
  DeviceSize hit_shader_binding_table_size_;
  DeviceSize hit_shader_binding_table_stride_;
  DeviceAddress callable_shader_binding_table_address_;
  DeviceSize callable_shader_binding_table_size_;
  DeviceSize callable_shader_binding_table_stride_;
  uint32_t width_;
  uint32_t height_;
  uint32_t depth_;
};

struct PhysicalDeviceOpticalFlowFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV;

  using native_type = VkPhysicalDeviceOpticalFlowFeaturesNV;

  PhysicalDeviceOpticalFlowFeaturesNV(bool32 optical_flow = {}, void *next = {}) : optical_flow_(optical_flow), next_(next) {}

  PhysicalDeviceOpticalFlowFeaturesNV(const native_type &rhs)
    : PhysicalDeviceOpticalFlowFeaturesNV(std::bit_cast<PhysicalDeviceOpticalFlowFeaturesNV>(rhs)) {}

  PhysicalDeviceOpticalFlowFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceOpticalFlowFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceOpticalFlowFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV;
  void *next_;
  bool32 optical_flow_;
};

struct HeadlessSurfaceCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_HEADLESS_SURFACE_CREATE_INFO_EXT;

  using native_type = VkHeadlessSurfaceCreateInfoEXT;

  HeadlessSurfaceCreateInfoEXT(HeadlessSurfaceCreateMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  HeadlessSurfaceCreateInfoEXT(const native_type &rhs) : HeadlessSurfaceCreateInfoEXT(std::bit_cast<HeadlessSurfaceCreateInfoEXT>(rhs)) {}

  HeadlessSurfaceCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<HeadlessSurfaceCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const HeadlessSurfaceCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_HEADLESS_SURFACE_CREATE_INFO_EXT;
  const void *next_;
  HeadlessSurfaceCreateMask flags_;
};

struct PhysicalDeviceMapMemoryPlacedFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT;

  using native_type = VkPhysicalDeviceMapMemoryPlacedFeaturesEXT;

  PhysicalDeviceMapMemoryPlacedFeaturesEXT(bool32 memory_map_placed = {},
                                           bool32 memory_map_range_placed = {},
                                           bool32 memory_unmap_reserve = {},
                                           void *next = {})
    : memory_map_placed_(memory_map_placed), memory_map_range_placed_(memory_map_range_placed), memory_unmap_reserve_(memory_unmap_reserve),
      next_(next) {}

  PhysicalDeviceMapMemoryPlacedFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceMapMemoryPlacedFeaturesEXT(std::bit_cast<PhysicalDeviceMapMemoryPlacedFeaturesEXT>(rhs)) {}

  PhysicalDeviceMapMemoryPlacedFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMapMemoryPlacedFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMapMemoryPlacedFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT;
  void *next_;
  bool32 memory_map_placed_;
  bool32 memory_map_range_placed_;
  bool32 memory_unmap_reserve_;
};

struct PhysicalDeviceYcbcrDegammaFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;

  PhysicalDeviceYcbcrDegammaFeaturesQCOM(bool32 ycbcr_degamma = {}, void *next = {}) : ycbcr_degamma_(ycbcr_degamma), next_(next) {}

  PhysicalDeviceYcbcrDegammaFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceYcbcrDegammaFeaturesQCOM(std::bit_cast<PhysicalDeviceYcbcrDegammaFeaturesQCOM>(rhs)) {}

  PhysicalDeviceYcbcrDegammaFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceYcbcrDegammaFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceYcbcrDegammaFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM;
  void *next_;
  bool32 ycbcr_degamma_;
};

struct PhysicalDeviceShaderModuleIdentifierFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;

  PhysicalDeviceShaderModuleIdentifierFeaturesEXT(bool32 shader_module_identifier = {}, void *next = {})
    : shader_module_identifier_(shader_module_identifier), next_(next) {}

  PhysicalDeviceShaderModuleIdentifierFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderModuleIdentifierFeaturesEXT(std::bit_cast<PhysicalDeviceShaderModuleIdentifierFeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderModuleIdentifierFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderModuleIdentifierFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderModuleIdentifierFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT;
  void *next_;
  bool32 shader_module_identifier_;
};

struct PhysicalDeviceDynamicRenderingFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;

  using native_type = VkPhysicalDeviceDynamicRenderingFeatures;

  PhysicalDeviceDynamicRenderingFeatures(bool32 dynamic_rendering = {}, void *next = {})
    : dynamic_rendering_(dynamic_rendering), next_(next) {}

  PhysicalDeviceDynamicRenderingFeatures(const native_type &rhs)
    : PhysicalDeviceDynamicRenderingFeatures(std::bit_cast<PhysicalDeviceDynamicRenderingFeatures>(rhs)) {}

  PhysicalDeviceDynamicRenderingFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDynamicRenderingFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDynamicRenderingFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
  void *next_;
  bool32 dynamic_rendering_;
};

struct PhysicalDevicePipelineCreationCacheControlFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;

  using native_type = VkPhysicalDevicePipelineCreationCacheControlFeatures;

  PhysicalDevicePipelineCreationCacheControlFeatures(bool32 pipeline_creation_cache_control = {}, void *next = {})
    : pipeline_creation_cache_control_(pipeline_creation_cache_control), next_(next) {}

  PhysicalDevicePipelineCreationCacheControlFeatures(const native_type &rhs)
    : PhysicalDevicePipelineCreationCacheControlFeatures(std::bit_cast<PhysicalDevicePipelineCreationCacheControlFeatures>(rhs)) {}

  PhysicalDevicePipelineCreationCacheControlFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelineCreationCacheControlFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelineCreationCacheControlFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
  void *next_;
  bool32 pipeline_creation_cache_control_;
};

struct PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV;

  using native_type = VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;

  PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(bool32 device_generated_compute = {},
                                                         bool32 device_generated_compute_pipelines = {},
                                                         bool32 device_generated_compute_capture_replay = {},
                                                         void *next = {})
    : device_generated_compute_(device_generated_compute), device_generated_compute_pipelines_(device_generated_compute_pipelines),
      device_generated_compute_capture_replay_(device_generated_compute_capture_replay), next_(next) {}

  PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(const native_type &rhs)
    : PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(std::bit_cast<PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV>(rhs)) {}

  PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV;
  void *next_;
  bool32 device_generated_compute_;
  bool32 device_generated_compute_pipelines_;
  bool32 device_generated_compute_capture_replay_;
};

struct PresentIdKHR {

  static constexpr StructureType structure_type = StructureType::E_PRESENT_ID_KHR;

  using native_type = VkPresentIdKHR;

  PresentIdKHR(uint32_t swapchain_count = {}, const uint64_t *p_present_ids = {}, const void *next = {})
    : swapchain_count_(swapchain_count), p_present_ids_(p_present_ids), next_(next) {}

  PresentIdKHR(const native_type &rhs) : PresentIdKHR(std::bit_cast<PresentIdKHR>(rhs)) {}

  PresentIdKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PresentIdKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PresentIdKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PRESENT_ID_KHR;
  const void *next_;
  uint32_t swapchain_count_;
  const uint64_t *p_present_ids_;
};

struct PhysicalDeviceExternalImageFormatInfo {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;

  using native_type = VkPhysicalDeviceExternalImageFormatInfo;

  PhysicalDeviceExternalImageFormatInfo(ExternalMemoryHandleTypeMaskBit handle_type = {}, const void *next = {})
    : handle_type_(handle_type), next_(next) {}

  PhysicalDeviceExternalImageFormatInfo(const native_type &rhs)
    : PhysicalDeviceExternalImageFormatInfo(std::bit_cast<PhysicalDeviceExternalImageFormatInfo>(rhs)) {}

  PhysicalDeviceExternalImageFormatInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExternalImageFormatInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExternalImageFormatInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
  const void *next_;
  ExternalMemoryHandleTypeMaskBit handle_type_;
};

struct MemoryHostPointerPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_HOST_POINTER_PROPERTIES_EXT;

  using native_type = VkMemoryHostPointerPropertiesEXT;

  MemoryHostPointerPropertiesEXT() = default;

  MemoryHostPointerPropertiesEXT(const native_type &rhs)
    : MemoryHostPointerPropertiesEXT(std::bit_cast<MemoryHostPointerPropertiesEXT>(rhs)) {}

  MemoryHostPointerPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryHostPointerPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryHostPointerPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_HOST_POINTER_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t memory_type_bits_ = {};
};

struct PhysicalDeviceSwapchainMaintenance1FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT;

  using native_type = VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;

  PhysicalDeviceSwapchainMaintenance1FeaturesEXT(bool32 swapchain_maintenance1 = {}, void *next = {})
    : swapchain_maintenance1_(swapchain_maintenance1), next_(next) {}

  PhysicalDeviceSwapchainMaintenance1FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceSwapchainMaintenance1FeaturesEXT(std::bit_cast<PhysicalDeviceSwapchainMaintenance1FeaturesEXT>(rhs)) {}

  PhysicalDeviceSwapchainMaintenance1FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSwapchainMaintenance1FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSwapchainMaintenance1FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT;
  void *next_;
  bool32 swapchain_maintenance1_;
};

struct PhysicalDeviceDescriptorIndexingFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;

  using native_type = VkPhysicalDeviceDescriptorIndexingFeatures;

  PhysicalDeviceDescriptorIndexingFeatures(bool32 shader_input_attachment_array_dynamic_indexing = {},
                                           bool32 shader_uniform_texel_buffer_array_dynamic_indexing = {},
                                           bool32 shader_storage_texel_buffer_array_dynamic_indexing = {},
                                           bool32 shader_uniform_buffer_array_non_uniform_indexing = {},
                                           bool32 shader_sampled_image_array_non_uniform_indexing = {},
                                           bool32 shader_storage_buffer_array_non_uniform_indexing = {},
                                           bool32 shader_storage_image_array_non_uniform_indexing = {},
                                           bool32 shader_input_attachment_array_non_uniform_indexing = {},
                                           bool32 shader_uniform_texel_buffer_array_non_uniform_indexing = {},
                                           bool32 shader_storage_texel_buffer_array_non_uniform_indexing = {},
                                           bool32 descriptor_binding_uniform_buffer_update_after_bind = {},
                                           bool32 descriptor_binding_sampled_image_update_after_bind = {},
                                           bool32 descriptor_binding_storage_image_update_after_bind = {},
                                           bool32 descriptor_binding_storage_buffer_update_after_bind = {},
                                           bool32 descriptor_binding_uniform_texel_buffer_update_after_bind = {},
                                           bool32 descriptor_binding_storage_texel_buffer_update_after_bind = {},
                                           bool32 descriptor_binding_update_unused_while_pending = {},
                                           bool32 descriptor_binding_partially_bound = {},
                                           bool32 descriptor_binding_variable_descriptor_count = {},
                                           bool32 runtime_descriptor_array = {},
                                           void *next = {})
    : shader_input_attachment_array_dynamic_indexing_(shader_input_attachment_array_dynamic_indexing),
      shader_uniform_texel_buffer_array_dynamic_indexing_(shader_uniform_texel_buffer_array_dynamic_indexing),
      shader_storage_texel_buffer_array_dynamic_indexing_(shader_storage_texel_buffer_array_dynamic_indexing),
      shader_uniform_buffer_array_non_uniform_indexing_(shader_uniform_buffer_array_non_uniform_indexing),
      shader_sampled_image_array_non_uniform_indexing_(shader_sampled_image_array_non_uniform_indexing),
      shader_storage_buffer_array_non_uniform_indexing_(shader_storage_buffer_array_non_uniform_indexing),
      shader_storage_image_array_non_uniform_indexing_(shader_storage_image_array_non_uniform_indexing),
      shader_input_attachment_array_non_uniform_indexing_(shader_input_attachment_array_non_uniform_indexing),
      shader_uniform_texel_buffer_array_non_uniform_indexing_(shader_uniform_texel_buffer_array_non_uniform_indexing),
      shader_storage_texel_buffer_array_non_uniform_indexing_(shader_storage_texel_buffer_array_non_uniform_indexing),
      descriptor_binding_uniform_buffer_update_after_bind_(descriptor_binding_uniform_buffer_update_after_bind),
      descriptor_binding_sampled_image_update_after_bind_(descriptor_binding_sampled_image_update_after_bind),
      descriptor_binding_storage_image_update_after_bind_(descriptor_binding_storage_image_update_after_bind),
      descriptor_binding_storage_buffer_update_after_bind_(descriptor_binding_storage_buffer_update_after_bind),
      descriptor_binding_uniform_texel_buffer_update_after_bind_(descriptor_binding_uniform_texel_buffer_update_after_bind),
      descriptor_binding_storage_texel_buffer_update_after_bind_(descriptor_binding_storage_texel_buffer_update_after_bind),
      descriptor_binding_update_unused_while_pending_(descriptor_binding_update_unused_while_pending),
      descriptor_binding_partially_bound_(descriptor_binding_partially_bound),
      descriptor_binding_variable_descriptor_count_(descriptor_binding_variable_descriptor_count),
      runtime_descriptor_array_(runtime_descriptor_array), next_(next) {}

  PhysicalDeviceDescriptorIndexingFeatures(const native_type &rhs)
    : PhysicalDeviceDescriptorIndexingFeatures(std::bit_cast<PhysicalDeviceDescriptorIndexingFeatures>(rhs)) {}

  PhysicalDeviceDescriptorIndexingFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorIndexingFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorIndexingFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
  void *next_;
  bool32 shader_input_attachment_array_dynamic_indexing_;
  bool32 shader_uniform_texel_buffer_array_dynamic_indexing_;
  bool32 shader_storage_texel_buffer_array_dynamic_indexing_;
  bool32 shader_uniform_buffer_array_non_uniform_indexing_;
  bool32 shader_sampled_image_array_non_uniform_indexing_;
  bool32 shader_storage_buffer_array_non_uniform_indexing_;
  bool32 shader_storage_image_array_non_uniform_indexing_;
  bool32 shader_input_attachment_array_non_uniform_indexing_;
  bool32 shader_uniform_texel_buffer_array_non_uniform_indexing_;
  bool32 shader_storage_texel_buffer_array_non_uniform_indexing_;
  bool32 descriptor_binding_uniform_buffer_update_after_bind_;
  bool32 descriptor_binding_sampled_image_update_after_bind_;
  bool32 descriptor_binding_storage_image_update_after_bind_;
  bool32 descriptor_binding_storage_buffer_update_after_bind_;
  bool32 descriptor_binding_uniform_texel_buffer_update_after_bind_;
  bool32 descriptor_binding_storage_texel_buffer_update_after_bind_;
  bool32 descriptor_binding_update_unused_while_pending_;
  bool32 descriptor_binding_partially_bound_;
  bool32 descriptor_binding_variable_descriptor_count_;
  bool32 runtime_descriptor_array_;
};

struct PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM;

  using native_type = VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;

  PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM() = default;

  PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(const native_type &rhs)
    : PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(std::bit_cast<PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM>(rhs)) {}

  PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM;
  void *next_ = {};
  Extent2D fragment_density_offset_granularity_ = {};
};

struct PhysicalDeviceCooperativeMatrixPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceCooperativeMatrixPropertiesKHR;

  PhysicalDeviceCooperativeMatrixPropertiesKHR() = default;

  PhysicalDeviceCooperativeMatrixPropertiesKHR(const native_type &rhs)
    : PhysicalDeviceCooperativeMatrixPropertiesKHR(std::bit_cast<PhysicalDeviceCooperativeMatrixPropertiesKHR>(rhs)) {}

  PhysicalDeviceCooperativeMatrixPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCooperativeMatrixPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCooperativeMatrixPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR;
  void *next_ = {};
  ShaderStageMask cooperative_matrix_supported_stages_ = {};
};

struct SubresourceHostMemcpySizeEXT {

  static constexpr StructureType structure_type = StructureType::E_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT;

  using native_type = VkSubresourceHostMemcpySizeEXT;

  SubresourceHostMemcpySizeEXT() = default;

  SubresourceHostMemcpySizeEXT(const native_type &rhs) : SubresourceHostMemcpySizeEXT(std::bit_cast<SubresourceHostMemcpySizeEXT>(rhs)) {}

  SubresourceHostMemcpySizeEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubresourceHostMemcpySizeEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SubresourceHostMemcpySizeEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT;
  void *next_ = {};
  DeviceSize size_ = {};
};

struct ExportMemoryAllocateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_EXPORT_MEMORY_ALLOCATE_INFO_NV;

  using native_type = VkExportMemoryAllocateInfoNV;

  ExportMemoryAllocateInfoNV(ExternalMemoryHandleTypeMask handle_types = {}, const void *next = {})
    : handle_types_(handle_types), next_(next) {}

  ExportMemoryAllocateInfoNV(const native_type &rhs) : ExportMemoryAllocateInfoNV(std::bit_cast<ExportMemoryAllocateInfoNV>(rhs)) {}

  ExportMemoryAllocateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExportMemoryAllocateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const ExportMemoryAllocateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXPORT_MEMORY_ALLOCATE_INFO_NV;
  const void *next_;
  ExternalMemoryHandleTypeMask handle_types_;
};

struct ImageFormatProperties {

  using native_type = VkImageFormatProperties;

  ImageFormatProperties() = default;

  ImageFormatProperties(const native_type &rhs) : ImageFormatProperties(std::bit_cast<ImageFormatProperties>(rhs)) {}

  ImageFormatProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageFormatProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ImageFormatProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  Extent3D max_extent_ = {};
  uint32_t max_mip_levels_ = {};
  uint32_t max_array_layers_ = {};
  SampleCountMask sample_counts_ = {};
  DeviceSize max_resource_size_ = {};
};

struct ExternalImageFormatPropertiesNV {

  using native_type = VkExternalImageFormatPropertiesNV;

  ExternalImageFormatPropertiesNV() = default;

  ExternalImageFormatPropertiesNV(const native_type &rhs)
    : ExternalImageFormatPropertiesNV(std::bit_cast<ExternalImageFormatPropertiesNV>(rhs)) {}

  ExternalImageFormatPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalImageFormatPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalImageFormatPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageFormatProperties image_format_properties_ = {};
  ExternalMemoryFeatureMask external_memory_features_ = {};
  ExternalMemoryHandleTypeMask export_from_imported_handle_types_ = {};
  ExternalMemoryHandleTypeMask compatible_handle_types_ = {};
};

struct DedicatedAllocationBufferCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;

  using native_type = VkDedicatedAllocationBufferCreateInfoNV;

  DedicatedAllocationBufferCreateInfoNV(bool32 dedicated_allocation = {}, const void *next = {})
    : dedicated_allocation_(dedicated_allocation), next_(next) {}

  DedicatedAllocationBufferCreateInfoNV(const native_type &rhs)
    : DedicatedAllocationBufferCreateInfoNV(std::bit_cast<DedicatedAllocationBufferCreateInfoNV>(rhs)) {}

  DedicatedAllocationBufferCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<DedicatedAllocationBufferCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const DedicatedAllocationBufferCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
  const void *next_;
  bool32 dedicated_allocation_;
};

struct DeviceDeviceMemoryReportCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;

  using native_type = VkDeviceDeviceMemoryReportCreateInfoEXT;

  DeviceDeviceMemoryReportCreateInfoEXT(DeviceMemoryReportMask flags = {},
                                        PFN_vkDeviceMemoryReportCallbackEXT pfn_user_callback = {},
                                        void *p_user_data = {},
                                        const void *next = {})
    : flags_(flags), pfn_user_callback_(pfn_user_callback), p_user_data_(p_user_data), next_(next) {}

  DeviceDeviceMemoryReportCreateInfoEXT(const native_type &rhs)
    : DeviceDeviceMemoryReportCreateInfoEXT(std::bit_cast<DeviceDeviceMemoryReportCreateInfoEXT>(rhs)) {}

  DeviceDeviceMemoryReportCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceDeviceMemoryReportCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceDeviceMemoryReportCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
  const void *next_;
  DeviceMemoryReportMask flags_;
  PFN_vkDeviceMemoryReportCallbackEXT pfn_user_callback_;
  void *p_user_data_;
};

struct OpticalFlowSessionCreatePrivateDataInfoNV {

  static constexpr StructureType structure_type = StructureType::E_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV;

  using native_type = VkOpticalFlowSessionCreatePrivateDataInfoNV;

  OpticalFlowSessionCreatePrivateDataInfoNV(uint32_t id = {}, uint32_t size = {}, const void *p_private_data = {}, void *next = {})
    : id_(id), size_(size), p_private_data_(p_private_data), next_(next) {}

  OpticalFlowSessionCreatePrivateDataInfoNV(const native_type &rhs)
    : OpticalFlowSessionCreatePrivateDataInfoNV(std::bit_cast<OpticalFlowSessionCreatePrivateDataInfoNV>(rhs)) {}

  OpticalFlowSessionCreatePrivateDataInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<OpticalFlowSessionCreatePrivateDataInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const OpticalFlowSessionCreatePrivateDataInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV;
  void *next_;
  uint32_t id_;
  uint32_t size_;
  const void *p_private_data_;
};

struct AccelerationStructureGeometryInstancesDataKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;

  using native_type = VkAccelerationStructureGeometryInstancesDataKHR;

  AccelerationStructureGeometryInstancesDataKHR(bool32 array_of_pointers = {},
                                                VkDeviceOrHostAddressConstKHR data = {},
                                                const void *next = {})
    : array_of_pointers_(array_of_pointers), data_(data), next_(next) {}

  AccelerationStructureGeometryInstancesDataKHR(const native_type &rhs)
    : AccelerationStructureGeometryInstancesDataKHR(std::bit_cast<AccelerationStructureGeometryInstancesDataKHR>(rhs)) {}

  AccelerationStructureGeometryInstancesDataKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureGeometryInstancesDataKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureGeometryInstancesDataKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
  const void *next_;
  bool32 array_of_pointers_;
  VkDeviceOrHostAddressConstKHR data_;
};

struct BindIndexBufferIndirectCommandNV {

  using native_type = VkBindIndexBufferIndirectCommandNV;

  BindIndexBufferIndirectCommandNV(DeviceAddress buffer_address = {}, uint32_t size = {}, IndexType index_type = IndexType::E_UINT16)
    : buffer_address_(buffer_address), size_(size), index_type_(index_type) {}

  BindIndexBufferIndirectCommandNV(const native_type &rhs)
    : BindIndexBufferIndirectCommandNV(std::bit_cast<BindIndexBufferIndirectCommandNV>(rhs)) {}

  BindIndexBufferIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindIndexBufferIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const BindIndexBufferIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress buffer_address_;
  uint32_t size_;
  IndexType index_type_;
};

struct PhysicalDeviceShaderExpectAssumeFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderExpectAssumeFeaturesKHR;

  PhysicalDeviceShaderExpectAssumeFeaturesKHR(bool32 shader_expect_assume = {}, void *next = {})
    : shader_expect_assume_(shader_expect_assume), next_(next) {}

  PhysicalDeviceShaderExpectAssumeFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderExpectAssumeFeaturesKHR(std::bit_cast<PhysicalDeviceShaderExpectAssumeFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderExpectAssumeFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderExpectAssumeFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderExpectAssumeFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR;
  void *next_;
  bool32 shader_expect_assume_;
};

struct CopyMicromapInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COPY_MICROMAP_INFO_EXT;

  using native_type = VkCopyMicromapInfoEXT;

  CopyMicromapInfoEXT(VkMicromapEXT src = {},
                      VkMicromapEXT dst = {},
                      CopyMicromapMode mode = CopyMicromapMode::E_CLONE_EXT,
                      const void *next = {})
    : src_(src), dst_(dst), mode_(mode), next_(next) {}

  CopyMicromapInfoEXT(const native_type &rhs) : CopyMicromapInfoEXT(std::bit_cast<CopyMicromapInfoEXT>(rhs)) {}

  CopyMicromapInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMicromapInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMicromapInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_MICROMAP_INFO_EXT;
  const void *next_;
  VkMicromapEXT src_;
  VkMicromapEXT dst_;
  CopyMicromapMode mode_;
};

struct ExportFenceCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_EXPORT_FENCE_CREATE_INFO;

  using native_type = VkExportFenceCreateInfo;

  ExportFenceCreateInfo(ExternalFenceHandleTypeMask handle_types = {}, const void *next = {}) : handle_types_(handle_types), next_(next) {}

  ExportFenceCreateInfo(const native_type &rhs) : ExportFenceCreateInfo(std::bit_cast<ExportFenceCreateInfo>(rhs)) {}

  ExportFenceCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExportFenceCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ExportFenceCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXPORT_FENCE_CREATE_INFO;
  const void *next_;
  ExternalFenceHandleTypeMask handle_types_;
};

struct SwapchainCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_CREATE_INFO_KHR;

  using native_type = VkSwapchainCreateInfoKHR;

  SwapchainCreateInfoKHR(SwapchainCreateMask flags = {},
                         VkSurfaceKHR surface = {},
                         uint32_t min_image_count = {},
                         Format image_format = Format::E_UNDEFINED,
                         ColorSpace image_color_space = ColorSpace::E_SRGB_NONLINEAR_KHR,
                         Extent2D image_extent = {},
                         uint32_t image_array_layers = {},
                         ImageUsageMask image_usage = {},
                         SharingMode image_sharing_mode = SharingMode::E_EXCLUSIVE,
                         uint32_t queue_family_index_count = {},
                         const uint32_t *p_queue_family_indices = {},
                         SurfaceTransformMaskBit pre_transform = {},
                         CompositeAlphaMaskBit composite_alpha = {},
                         PresentMode present_mode = PresentMode::E_IMMEDIATE_KHR,
                         bool32 clipped = {},
                         VkSwapchainKHR old_swapchain = {},
                         const void *next = {})
    : flags_(flags), surface_(surface), min_image_count_(min_image_count), image_format_(image_format),
      image_color_space_(image_color_space), image_extent_(image_extent), image_array_layers_(image_array_layers),
      image_usage_(image_usage), image_sharing_mode_(image_sharing_mode), queue_family_index_count_(queue_family_index_count),
      p_queue_family_indices_(p_queue_family_indices), pre_transform_(pre_transform), composite_alpha_(composite_alpha),
      present_mode_(present_mode), clipped_(clipped), old_swapchain_(old_swapchain), next_(next) {}

  SwapchainCreateInfoKHR(const native_type &rhs) : SwapchainCreateInfoKHR(std::bit_cast<SwapchainCreateInfoKHR>(rhs)) {}

  SwapchainCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_CREATE_INFO_KHR;
  const void *next_;
  SwapchainCreateMask flags_;
  VkSurfaceKHR surface_;
  uint32_t min_image_count_;
  Format image_format_;
  ColorSpace image_color_space_;
  Extent2D image_extent_;
  uint32_t image_array_layers_;
  ImageUsageMask image_usage_;
  SharingMode image_sharing_mode_;
  uint32_t queue_family_index_count_;
  const uint32_t *p_queue_family_indices_;
  SurfaceTransformMaskBit pre_transform_;
  CompositeAlphaMaskBit composite_alpha_;
  PresentMode present_mode_;
  bool32 clipped_;
  VkSwapchainKHR old_swapchain_;
};

struct PhysicalDevicePerformanceQueryFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;

  using native_type = VkPhysicalDevicePerformanceQueryFeaturesKHR;

  PhysicalDevicePerformanceQueryFeaturesKHR(bool32 performance_counter_query_pools = {},
                                            bool32 performance_counter_multiple_query_pools = {},
                                            void *next = {})
    : performance_counter_query_pools_(performance_counter_query_pools),
      performance_counter_multiple_query_pools_(performance_counter_multiple_query_pools), next_(next) {}

  PhysicalDevicePerformanceQueryFeaturesKHR(const native_type &rhs)
    : PhysicalDevicePerformanceQueryFeaturesKHR(std::bit_cast<PhysicalDevicePerformanceQueryFeaturesKHR>(rhs)) {}

  PhysicalDevicePerformanceQueryFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePerformanceQueryFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePerformanceQueryFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
  void *next_;
  bool32 performance_counter_query_pools_;
  bool32 performance_counter_multiple_query_pools_;
};

struct SurfaceFormatKHR {

  using native_type = VkSurfaceFormatKHR;

  SurfaceFormatKHR() = default;

  SurfaceFormatKHR(const native_type &rhs) : SurfaceFormatKHR(std::bit_cast<SurfaceFormatKHR>(rhs)) {}

  SurfaceFormatKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceFormatKHR>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceFormatKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  Format format_ = {};
  ColorSpace color_space_ = {};
};

struct ImportSemaphoreFdInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_IMPORT_SEMAPHORE_FD_INFO_KHR;

  using native_type = VkImportSemaphoreFdInfoKHR;

  ImportSemaphoreFdInfoKHR(VkSemaphore semaphore = {},
                           SemaphoreImportMask flags = {},
                           ExternalSemaphoreHandleTypeMaskBit handle_type = {},
                           int fd = {},
                           const void *next = {})
    : semaphore_(semaphore), flags_(flags), handle_type_(handle_type), fd_(fd), next_(next) {}

  ImportSemaphoreFdInfoKHR(const native_type &rhs) : ImportSemaphoreFdInfoKHR(std::bit_cast<ImportSemaphoreFdInfoKHR>(rhs)) {}

  ImportSemaphoreFdInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImportSemaphoreFdInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const ImportSemaphoreFdInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMPORT_SEMAPHORE_FD_INFO_KHR;
  const void *next_;
  VkSemaphore semaphore_;
  SemaphoreImportMask flags_;
  ExternalSemaphoreHandleTypeMaskBit handle_type_;
  int fd_;
};

struct DescriptorBufferBindingInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_BUFFER_BINDING_INFO_EXT;

  using native_type = VkDescriptorBufferBindingInfoEXT;

  DescriptorBufferBindingInfoEXT(DeviceAddress address = {}, BufferUsageMask usage = {}, void *next = {})
    : address_(address), usage_(usage), next_(next) {}

  DescriptorBufferBindingInfoEXT(const native_type &rhs)
    : DescriptorBufferBindingInfoEXT(std::bit_cast<DescriptorBufferBindingInfoEXT>(rhs)) {}

  DescriptorBufferBindingInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorBufferBindingInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorBufferBindingInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_BUFFER_BINDING_INFO_EXT;
  void *next_;
  DeviceAddress address_;
  BufferUsageMask usage_;
};

struct RectLayerKHR {

  using native_type = VkRectLayerKHR;

  RectLayerKHR(Offset2D offset = {}, Extent2D extent = {}, uint32_t layer = {}) : offset_(offset), extent_(extent), layer_(layer) {}

  RectLayerKHR(const native_type &rhs) : RectLayerKHR(std::bit_cast<RectLayerKHR>(rhs)) {}

  RectLayerKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RectLayerKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RectLayerKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  Offset2D offset_;
  Extent2D extent_;
  uint32_t layer_;
};

struct PresentRegionKHR {

  using native_type = VkPresentRegionKHR;

  PresentRegionKHR(uint32_t rectangle_count = {}, const RectLayerKHR *p_rectangles = {})
    : rectangle_count_(rectangle_count), p_rectangles_(p_rectangles) {}

  PresentRegionKHR(const native_type &rhs) : PresentRegionKHR(std::bit_cast<PresentRegionKHR>(rhs)) {}

  PresentRegionKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PresentRegionKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PresentRegionKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t rectangle_count_;
  const RectLayerKHR *p_rectangles_;
};

struct PresentRegionsKHR {

  static constexpr StructureType structure_type = StructureType::E_PRESENT_REGIONS_KHR;

  using native_type = VkPresentRegionsKHR;

  PresentRegionsKHR(uint32_t swapchain_count = {}, const PresentRegionKHR *p_regions = {}, const void *next = {})
    : swapchain_count_(swapchain_count), p_regions_(p_regions), next_(next) {}

  PresentRegionsKHR(const native_type &rhs) : PresentRegionsKHR(std::bit_cast<PresentRegionsKHR>(rhs)) {}

  PresentRegionsKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PresentRegionsKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PresentRegionsKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PRESENT_REGIONS_KHR;
  const void *next_;
  uint32_t swapchain_count_;
  const PresentRegionKHR *p_regions_;
};

struct DebugMarkerMarkerInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_MARKER_MARKER_INFO_EXT;

  using native_type = VkDebugMarkerMarkerInfoEXT;

  DebugMarkerMarkerInfoEXT(const char *p_marker_name = {}, const std::array<float, 4> &color = {}, const void *next = {})
    : p_marker_name_(p_marker_name), color_(color), next_(next) {}

  DebugMarkerMarkerInfoEXT(const native_type &rhs) : DebugMarkerMarkerInfoEXT(std::bit_cast<DebugMarkerMarkerInfoEXT>(rhs)) {}

  DebugMarkerMarkerInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugMarkerMarkerInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugMarkerMarkerInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_MARKER_MARKER_INFO_EXT;
  const void *next_;
  const char *p_marker_name_;
  std::array<float, 4> color_;
};

struct DeviceGroupRenderPassBeginInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;

  using native_type = VkDeviceGroupRenderPassBeginInfo;

  DeviceGroupRenderPassBeginInfo(uint32_t device_mask = {},
                                 uint32_t device_render_area_count = {},
                                 const Rect2D *p_device_render_areas = {},
                                 const void *next = {})
    : device_mask_(device_mask), device_render_area_count_(device_render_area_count), p_device_render_areas_(p_device_render_areas),
      next_(next) {}

  DeviceGroupRenderPassBeginInfo(const native_type &rhs)
    : DeviceGroupRenderPassBeginInfo(std::bit_cast<DeviceGroupRenderPassBeginInfo>(rhs)) {}

  DeviceGroupRenderPassBeginInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupRenderPassBeginInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupRenderPassBeginInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
  const void *next_;
  uint32_t device_mask_;
  uint32_t device_render_area_count_;
  const Rect2D *p_device_render_areas_;
};

struct DebugMarkerObjectTagInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;

  using native_type = VkDebugMarkerObjectTagInfoEXT;

  DebugMarkerObjectTagInfoEXT(DebugReportObjectType object_type = DebugReportObjectType::E_UNKNOWN_EXT,
                              uint64_t object = {},
                              uint64_t tag_name = {},
                              size_t tag_size = {},
                              const void *p_tag = {},
                              const void *next = {})
    : object_type_(object_type), object_(object), tag_name_(tag_name), tag_size_(tag_size), p_tag_(p_tag), next_(next) {}

  DebugMarkerObjectTagInfoEXT(const native_type &rhs) : DebugMarkerObjectTagInfoEXT(std::bit_cast<DebugMarkerObjectTagInfoEXT>(rhs)) {}

  DebugMarkerObjectTagInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugMarkerObjectTagInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugMarkerObjectTagInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
  const void *next_;
  DebugReportObjectType object_type_;
  uint64_t object_;
  uint64_t tag_name_;
  size_t tag_size_;
  const void *p_tag_;
};

struct PhysicalDeviceRenderPassStripedFeaturesARM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM;

  using native_type = VkPhysicalDeviceRenderPassStripedFeaturesARM;

  PhysicalDeviceRenderPassStripedFeaturesARM(bool32 render_pass_striped = {}, void *next = {})
    : render_pass_striped_(render_pass_striped), next_(next) {}

  PhysicalDeviceRenderPassStripedFeaturesARM(const native_type &rhs)
    : PhysicalDeviceRenderPassStripedFeaturesARM(std::bit_cast<PhysicalDeviceRenderPassStripedFeaturesARM>(rhs)) {}

  PhysicalDeviceRenderPassStripedFeaturesARM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRenderPassStripedFeaturesARM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRenderPassStripedFeaturesARM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM;
  void *next_;
  bool32 render_pass_striped_;
};

struct PipelineViewportExclusiveScissorStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineViewportExclusiveScissorStateCreateInfoNV;

  PipelineViewportExclusiveScissorStateCreateInfoNV(uint32_t exclusive_scissor_count = {},
                                                    const Rect2D *p_exclusive_scissors = {},
                                                    const void *next = {})
    : exclusive_scissor_count_(exclusive_scissor_count), p_exclusive_scissors_(p_exclusive_scissors), next_(next) {}

  PipelineViewportExclusiveScissorStateCreateInfoNV(const native_type &rhs)
    : PipelineViewportExclusiveScissorStateCreateInfoNV(std::bit_cast<PipelineViewportExclusiveScissorStateCreateInfoNV>(rhs)) {}

  PipelineViewportExclusiveScissorStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportExclusiveScissorStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportExclusiveScissorStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
  const void *next_;
  uint32_t exclusive_scissor_count_;
  const Rect2D *p_exclusive_scissors_;
};

struct DebugMarkerObjectNameInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;

  using native_type = VkDebugMarkerObjectNameInfoEXT;

  DebugMarkerObjectNameInfoEXT(DebugReportObjectType object_type = DebugReportObjectType::E_UNKNOWN_EXT,
                               uint64_t object = {},
                               const char *p_object_name = {},
                               const void *next = {})
    : object_type_(object_type), object_(object), p_object_name_(p_object_name), next_(next) {}

  DebugMarkerObjectNameInfoEXT(const native_type &rhs) : DebugMarkerObjectNameInfoEXT(std::bit_cast<DebugMarkerObjectNameInfoEXT>(rhs)) {}

  DebugMarkerObjectNameInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugMarkerObjectNameInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugMarkerObjectNameInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
  const void *next_;
  DebugReportObjectType object_type_;
  uint64_t object_;
  const char *p_object_name_;
};

struct PhysicalDeviceExternalBufferInfo {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;

  using native_type = VkPhysicalDeviceExternalBufferInfo;

  PhysicalDeviceExternalBufferInfo(BufferCreateMask flags = {},
                                   BufferUsageMask usage = {},
                                   ExternalMemoryHandleTypeMaskBit handle_type = {},
                                   const void *next = {})
    : flags_(flags), usage_(usage), handle_type_(handle_type), next_(next) {}

  PhysicalDeviceExternalBufferInfo(const native_type &rhs)
    : PhysicalDeviceExternalBufferInfo(std::bit_cast<PhysicalDeviceExternalBufferInfo>(rhs)) {}

  PhysicalDeviceExternalBufferInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExternalBufferInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExternalBufferInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
  const void *next_;
  BufferCreateMask flags_;
  BufferUsageMask usage_;
  ExternalMemoryHandleTypeMaskBit handle_type_;
};

struct CopyMemoryToImageIndirectCommandNV {

  using native_type = VkCopyMemoryToImageIndirectCommandNV;

  CopyMemoryToImageIndirectCommandNV(DeviceAddress src_address = {},
                                     uint32_t buffer_row_length = {},
                                     uint32_t buffer_image_height = {},
                                     ImageSubresourceLayers image_subresource = {},
                                     Offset3D image_offset = {},
                                     Extent3D image_extent = {})
    : src_address_(src_address), buffer_row_length_(buffer_row_length), buffer_image_height_(buffer_image_height),
      image_subresource_(image_subresource), image_offset_(image_offset), image_extent_(image_extent) {}

  CopyMemoryToImageIndirectCommandNV(const native_type &rhs)
    : CopyMemoryToImageIndirectCommandNV(std::bit_cast<CopyMemoryToImageIndirectCommandNV>(rhs)) {}

  CopyMemoryToImageIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMemoryToImageIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMemoryToImageIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress src_address_;
  uint32_t buffer_row_length_;
  uint32_t buffer_image_height_;
  ImageSubresourceLayers image_subresource_;
  Offset3D image_offset_;
  Extent3D image_extent_;
};

struct PhysicalDeviceMaintenance4Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;

  using native_type = VkPhysicalDeviceMaintenance4Features;

  PhysicalDeviceMaintenance4Features(bool32 maintenance4 = {}, void *next = {}) : maintenance4_(maintenance4), next_(next) {}

  PhysicalDeviceMaintenance4Features(const native_type &rhs)
    : PhysicalDeviceMaintenance4Features(std::bit_cast<PhysicalDeviceMaintenance4Features>(rhs)) {}

  PhysicalDeviceMaintenance4Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance4Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance4Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
  void *next_;
  bool32 maintenance4_;
};

struct PhysicalDeviceInvocationMaskFeaturesHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;

  using native_type = VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;

  PhysicalDeviceInvocationMaskFeaturesHUAWEI(bool32 invocation_mask = {}, void *next = {})
    : invocation_mask_(invocation_mask), next_(next) {}

  PhysicalDeviceInvocationMaskFeaturesHUAWEI(const native_type &rhs)
    : PhysicalDeviceInvocationMaskFeaturesHUAWEI(std::bit_cast<PhysicalDeviceInvocationMaskFeaturesHUAWEI>(rhs)) {}

  PhysicalDeviceInvocationMaskFeaturesHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceInvocationMaskFeaturesHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceInvocationMaskFeaturesHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;
  void *next_;
  bool32 invocation_mask_;
};

struct BufferImageCopy {

  using native_type = VkBufferImageCopy;

  BufferImageCopy(DeviceSize buffer_offset = {},
                  uint32_t buffer_row_length = {},
                  uint32_t buffer_image_height = {},
                  ImageSubresourceLayers image_subresource = {},
                  Offset3D image_offset = {},
                  Extent3D image_extent = {})
    : buffer_offset_(buffer_offset), buffer_row_length_(buffer_row_length), buffer_image_height_(buffer_image_height),
      image_subresource_(image_subresource), image_offset_(image_offset), image_extent_(image_extent) {}

  BufferImageCopy(const native_type &rhs) : BufferImageCopy(std::bit_cast<BufferImageCopy>(rhs)) {}

  BufferImageCopy &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferImageCopy>(rhs);
    return *this;
  }

  auto operator<=>(const BufferImageCopy &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceSize buffer_offset_;
  uint32_t buffer_row_length_;
  uint32_t buffer_image_height_;
  ImageSubresourceLayers image_subresource_;
  Offset3D image_offset_;
  Extent3D image_extent_;
};

struct CopyAccelerationStructureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_COPY_ACCELERATION_STRUCTURE_INFO_KHR;

  using native_type = VkCopyAccelerationStructureInfoKHR;

  CopyAccelerationStructureInfoKHR(VkAccelerationStructureKHR src = {},
                                   VkAccelerationStructureKHR dst = {},
                                   CopyAccelerationStructureMode mode = CopyAccelerationStructureMode::E_CLONE_KHR,
                                   const void *next = {})
    : src_(src), dst_(dst), mode_(mode), next_(next) {}

  CopyAccelerationStructureInfoKHR(const native_type &rhs)
    : CopyAccelerationStructureInfoKHR(std::bit_cast<CopyAccelerationStructureInfoKHR>(rhs)) {}

  CopyAccelerationStructureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyAccelerationStructureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const CopyAccelerationStructureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
  const void *next_;
  VkAccelerationStructureKHR src_;
  VkAccelerationStructureKHR dst_;
  CopyAccelerationStructureMode mode_;
};

struct PhysicalDeviceShadingRateImagePropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceShadingRateImagePropertiesNV;

  PhysicalDeviceShadingRateImagePropertiesNV() = default;

  PhysicalDeviceShadingRateImagePropertiesNV(const native_type &rhs)
    : PhysicalDeviceShadingRateImagePropertiesNV(std::bit_cast<PhysicalDeviceShadingRateImagePropertiesNV>(rhs)) {}

  PhysicalDeviceShadingRateImagePropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShadingRateImagePropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShadingRateImagePropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
  void *next_ = {};
  Extent2D shading_rate_texel_size_ = {};
  uint32_t shading_rate_palette_size_ = {};
  uint32_t shading_rate_max_coarse_samples_ = {};
};

struct ImageBlit {

  using native_type = VkImageBlit;

  ImageBlit(ImageSubresourceLayers src_subresource = {},
            const std::array<Offset3D, 2> &src_offsets = {},
            ImageSubresourceLayers dst_subresource = {},
            const std::array<Offset3D, 2> &dst_offsets = {})
    : src_subresource_(src_subresource), src_offsets_(src_offsets), dst_subresource_(dst_subresource), dst_offsets_(dst_offsets) {}

  ImageBlit(const native_type &rhs) : ImageBlit(std::bit_cast<ImageBlit>(rhs)) {}

  ImageBlit &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageBlit>(rhs);
    return *this;
  }

  auto operator<=>(const ImageBlit &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageSubresourceLayers src_subresource_;
  std::array<Offset3D, 2> src_offsets_;
  ImageSubresourceLayers dst_subresource_;
  std::array<Offset3D, 2> dst_offsets_;
};

struct AccelerationStructureMemoryRequirementsInfoNV {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;

  using native_type = VkAccelerationStructureMemoryRequirementsInfoNV;

  AccelerationStructureMemoryRequirementsInfoNV(
    AccelerationStructureMemoryRequirementsType type = AccelerationStructureMemoryRequirementsType::E_OBJECT_NV,
    VkAccelerationStructureNV acceleration_structure = {},
    const void *next = {})
    : type_(type), acceleration_structure_(acceleration_structure), next_(next) {}

  AccelerationStructureMemoryRequirementsInfoNV(const native_type &rhs)
    : AccelerationStructureMemoryRequirementsInfoNV(std::bit_cast<AccelerationStructureMemoryRequirementsInfoNV>(rhs)) {}

  AccelerationStructureMemoryRequirementsInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureMemoryRequirementsInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureMemoryRequirementsInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
  const void *next_;
  AccelerationStructureMemoryRequirementsType type_;
  VkAccelerationStructureNV acceleration_structure_;
};

struct PhysicalDeviceVulkan11Properties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;

  using native_type = VkPhysicalDeviceVulkan11Properties;

  PhysicalDeviceVulkan11Properties() = default;

  PhysicalDeviceVulkan11Properties(const native_type &rhs)
    : PhysicalDeviceVulkan11Properties(std::bit_cast<PhysicalDeviceVulkan11Properties>(rhs)) {}

  PhysicalDeviceVulkan11Properties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkan11Properties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkan11Properties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
  void *next_ = {};
  std::array<uint8_t, VK_UUID_SIZE> device_uuid_ = {};
  std::array<uint8_t, VK_UUID_SIZE> driver_uuid_ = {};
  std::array<uint8_t, VK_LUID_SIZE> device_luid_ = {};
  uint32_t device_node_mask_ = {};
  bool32 device_luidvalid_ = {};
  uint32_t subgroup_size_ = {};
  ShaderStageMask subgroup_supported_stages_ = {};
  SubgroupFeatureMask subgroup_supported_operations_ = {};
  bool32 subgroup_quad_operations_in_all_stages_ = {};
  PointClippingBehavior point_clipping_behavior_ = {};
  uint32_t max_multiview_view_count_ = {};
  uint32_t max_multiview_instance_index_ = {};
  bool32 protected_no_fault_ = {};
  uint32_t max_per_set_descriptors_ = {};
  DeviceSize max_memory_allocation_size_ = {};
};

struct BufferUsageFlags2CreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR;

  using native_type = VkBufferUsageFlags2CreateInfoKHR;

  BufferUsageFlags2CreateInfoKHR(BufferUsageMask2 usage = {}, const void *next = {}) : usage_(usage), next_(next) {}

  BufferUsageFlags2CreateInfoKHR(const native_type &rhs)
    : BufferUsageFlags2CreateInfoKHR(std::bit_cast<BufferUsageFlags2CreateInfoKHR>(rhs)) {}

  BufferUsageFlags2CreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferUsageFlags2CreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const BufferUsageFlags2CreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR;
  const void *next_;
  BufferUsageMask2 usage_;
};

struct SurfaceCapabilitiesKHR {

  using native_type = VkSurfaceCapabilitiesKHR;

  SurfaceCapabilitiesKHR() = default;

  SurfaceCapabilitiesKHR(const native_type &rhs) : SurfaceCapabilitiesKHR(std::bit_cast<SurfaceCapabilitiesKHR>(rhs)) {}

  SurfaceCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t min_image_count_ = {};
  uint32_t max_image_count_ = {};
  Extent2D current_extent_ = {};
  Extent2D min_image_extent_ = {};
  Extent2D max_image_extent_ = {};
  uint32_t max_image_array_layers_ = {};
  SurfaceTransformMask supported_transforms_ = {};
  SurfaceTransformMaskBit current_transform_ = {};
  CompositeAlphaMask supported_composite_alpha_ = {};
  ImageUsageMask supported_usage_flags_ = {};
};

struct RenderingAttachmentLocationInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_ATTACHMENT_LOCATION_INFO_KHR;

  using native_type = VkRenderingAttachmentLocationInfoKHR;

  RenderingAttachmentLocationInfoKHR(uint32_t color_attachment_count = {},
                                     const uint32_t *p_color_attachment_locations = {},
                                     const void *next = {})
    : color_attachment_count_(color_attachment_count), p_color_attachment_locations_(p_color_attachment_locations), next_(next) {}

  RenderingAttachmentLocationInfoKHR(const native_type &rhs)
    : RenderingAttachmentLocationInfoKHR(std::bit_cast<RenderingAttachmentLocationInfoKHR>(rhs)) {}

  RenderingAttachmentLocationInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingAttachmentLocationInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingAttachmentLocationInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_ATTACHMENT_LOCATION_INFO_KHR;
  const void *next_;
  uint32_t color_attachment_count_;
  const uint32_t *p_color_attachment_locations_;
};

struct PhysicalDeviceYcbcrImageArraysFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;

  using native_type = VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;

  PhysicalDeviceYcbcrImageArraysFeaturesEXT(bool32 ycbcr_image_arrays = {}, void *next = {})
    : ycbcr_image_arrays_(ycbcr_image_arrays), next_(next) {}

  PhysicalDeviceYcbcrImageArraysFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceYcbcrImageArraysFeaturesEXT(std::bit_cast<PhysicalDeviceYcbcrImageArraysFeaturesEXT>(rhs)) {}

  PhysicalDeviceYcbcrImageArraysFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceYcbcrImageArraysFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceYcbcrImageArraysFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
  void *next_;
  bool32 ycbcr_image_arrays_;
};

struct PhysicalDeviceUniformBufferStandardLayoutFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;

  using native_type = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

  PhysicalDeviceUniformBufferStandardLayoutFeatures(bool32 uniform_buffer_standard_layout = {}, void *next = {})
    : uniform_buffer_standard_layout_(uniform_buffer_standard_layout), next_(next) {}

  PhysicalDeviceUniformBufferStandardLayoutFeatures(const native_type &rhs)
    : PhysicalDeviceUniformBufferStandardLayoutFeatures(std::bit_cast<PhysicalDeviceUniformBufferStandardLayoutFeatures>(rhs)) {}

  PhysicalDeviceUniformBufferStandardLayoutFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceUniformBufferStandardLayoutFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceUniformBufferStandardLayoutFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
  void *next_;
  bool32 uniform_buffer_standard_layout_;
};

struct BufferCopy {

  using native_type = VkBufferCopy;

  BufferCopy(DeviceSize src_offset = {}, DeviceSize dst_offset = {}, DeviceSize size = {})
    : src_offset_(src_offset), dst_offset_(dst_offset), size_(size) {}

  BufferCopy(const native_type &rhs) : BufferCopy(std::bit_cast<BufferCopy>(rhs)) {}

  BufferCopy &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferCopy>(rhs);
    return *this;
  }

  auto operator<=>(const BufferCopy &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceSize src_offset_;
  DeviceSize dst_offset_;
  DeviceSize size_;
};

struct PipelineSampleLocationsStateCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;

  using native_type = VkPipelineSampleLocationsStateCreateInfoEXT;

  PipelineSampleLocationsStateCreateInfoEXT(bool32 sample_locations_enable = {},
                                            SampleLocationsInfoEXT sample_locations_info = {},
                                            const void *next = {})
    : sample_locations_enable_(sample_locations_enable), sample_locations_info_(sample_locations_info), next_(next) {}

  PipelineSampleLocationsStateCreateInfoEXT(const native_type &rhs)
    : PipelineSampleLocationsStateCreateInfoEXT(std::bit_cast<PipelineSampleLocationsStateCreateInfoEXT>(rhs)) {}

  PipelineSampleLocationsStateCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineSampleLocationsStateCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineSampleLocationsStateCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
  const void *next_;
  bool32 sample_locations_enable_;
  SampleLocationsInfoEXT sample_locations_info_;
};

struct AttachmentSampleLocationsEXT {

  using native_type = VkAttachmentSampleLocationsEXT;

  AttachmentSampleLocationsEXT(uint32_t attachment_index = {}, SampleLocationsInfoEXT sample_locations_info = {})
    : attachment_index_(attachment_index), sample_locations_info_(sample_locations_info) {}

  AttachmentSampleLocationsEXT(const native_type &rhs) : AttachmentSampleLocationsEXT(std::bit_cast<AttachmentSampleLocationsEXT>(rhs)) {}

  AttachmentSampleLocationsEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentSampleLocationsEXT>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentSampleLocationsEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t attachment_index_;
  SampleLocationsInfoEXT sample_locations_info_;
};

struct PhysicalDeviceShaderIntegerDotProductProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;

  using native_type = VkPhysicalDeviceShaderIntegerDotProductProperties;

  PhysicalDeviceShaderIntegerDotProductProperties() = default;

  PhysicalDeviceShaderIntegerDotProductProperties(const native_type &rhs)
    : PhysicalDeviceShaderIntegerDotProductProperties(std::bit_cast<PhysicalDeviceShaderIntegerDotProductProperties>(rhs)) {}

  PhysicalDeviceShaderIntegerDotProductProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderIntegerDotProductProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderIntegerDotProductProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
  void *next_ = {};
  bool32 integer_dot_product8bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product8bit_signed_accelerated_ = {};
  bool32 integer_dot_product8bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product4x8bit_packed_unsigned_accelerated_ = {};
  bool32 integer_dot_product4x8bit_packed_signed_accelerated_ = {};
  bool32 integer_dot_product4x8bit_packed_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product16bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product16bit_signed_accelerated_ = {};
  bool32 integer_dot_product16bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product32bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product32bit_signed_accelerated_ = {};
  bool32 integer_dot_product32bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product64bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product64bit_signed_accelerated_ = {};
  bool32 integer_dot_product64bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating8bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating8bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating8bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating4x8bit_packed_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating4x8bit_packed_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating4x8bit_packed_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating16bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating16bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating16bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating32bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating32bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating32bit_mixed_signedness_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating64bit_unsigned_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating64bit_signed_accelerated_ = {};
  bool32 integer_dot_product_accumulating_saturating64bit_mixed_signedness_accelerated_ = {};
};

struct PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;

  using native_type = VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;

  PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(bool32 pageable_device_local_memory = {}, void *next = {})
    : pageable_device_local_memory_(pageable_device_local_memory), next_(next) {}

  PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(std::bit_cast<PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>(rhs)) {}

  PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;
  void *next_;
  bool32 pageable_device_local_memory_;
};

struct PipelineDynamicStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_DYNAMIC_STATE_CREATE_INFO;

  using native_type = VkPipelineDynamicStateCreateInfo;

  PipelineDynamicStateCreateInfo(PipelineDynamicStateCreateMask flags = {},
                                 uint32_t dynamic_state_count = {},
                                 const DynamicState *p_dynamic_states = {},
                                 const void *next = {})
    : flags_(flags), dynamic_state_count_(dynamic_state_count), p_dynamic_states_(p_dynamic_states), next_(next) {}

  PipelineDynamicStateCreateInfo(const native_type &rhs)
    : PipelineDynamicStateCreateInfo(std::bit_cast<PipelineDynamicStateCreateInfo>(rhs)) {}

  PipelineDynamicStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineDynamicStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineDynamicStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
  const void *next_;
  PipelineDynamicStateCreateMask flags_;
  uint32_t dynamic_state_count_;
  const DynamicState *p_dynamic_states_;
};

struct ExternalMemoryImageCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;

  using native_type = VkExternalMemoryImageCreateInfo;

  ExternalMemoryImageCreateInfo(ExternalMemoryHandleTypeMask handle_types = {}, const void *next = {})
    : handle_types_(handle_types), next_(next) {}

  ExternalMemoryImageCreateInfo(const native_type &rhs)
    : ExternalMemoryImageCreateInfo(std::bit_cast<ExternalMemoryImageCreateInfo>(rhs)) {}

  ExternalMemoryImageCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalMemoryImageCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalMemoryImageCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
  const void *next_;
  ExternalMemoryHandleTypeMask handle_types_;
};

struct DeviceEventInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_EVENT_INFO_EXT;

  using native_type = VkDeviceEventInfoEXT;

  DeviceEventInfoEXT(DeviceEventType device_event = DeviceEventType::E_DISPLAY_HOTPLUG_EXT, const void *next = {})
    : device_event_(device_event), next_(next) {}

  DeviceEventInfoEXT(const native_type &rhs) : DeviceEventInfoEXT(std::bit_cast<DeviceEventInfoEXT>(rhs)) {}

  DeviceEventInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceEventInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceEventInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_EVENT_INFO_EXT;
  const void *next_;
  DeviceEventType device_event_;
};

struct PhysicalDeviceInlineUniformBlockFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;

  using native_type = VkPhysicalDeviceInlineUniformBlockFeatures;

  PhysicalDeviceInlineUniformBlockFeatures(bool32 inline_uniform_block = {},
                                           bool32 descriptor_binding_inline_uniform_block_update_after_bind = {},
                                           void *next = {})
    : inline_uniform_block_(inline_uniform_block),
      descriptor_binding_inline_uniform_block_update_after_bind_(descriptor_binding_inline_uniform_block_update_after_bind), next_(next) {}

  PhysicalDeviceInlineUniformBlockFeatures(const native_type &rhs)
    : PhysicalDeviceInlineUniformBlockFeatures(std::bit_cast<PhysicalDeviceInlineUniformBlockFeatures>(rhs)) {}

  PhysicalDeviceInlineUniformBlockFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceInlineUniformBlockFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceInlineUniformBlockFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
  void *next_;
  bool32 inline_uniform_block_;
  bool32 descriptor_binding_inline_uniform_block_update_after_bind_;
};

struct CuModuleCreateInfoNVX {

  static constexpr StructureType structure_type = StructureType::E_CU_MODULE_CREATE_INFO_NVX;

  using native_type = VkCuModuleCreateInfoNVX;

  CuModuleCreateInfoNVX(size_t data_size = {}, const void *p_data = {}, const void *next = {})
    : data_size_(data_size), p_data_(p_data), next_(next) {}

  CuModuleCreateInfoNVX(const native_type &rhs) : CuModuleCreateInfoNVX(std::bit_cast<CuModuleCreateInfoNVX>(rhs)) {}

  CuModuleCreateInfoNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<CuModuleCreateInfoNVX>(rhs);
    return *this;
  }

  auto operator<=>(const CuModuleCreateInfoNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CU_MODULE_CREATE_INFO_NVX;
  const void *next_;
  size_t data_size_;
  const void *p_data_;
};

struct VideoDecodeH265PictureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H265_PICTURE_INFO_KHR;

  using native_type = VkVideoDecodeH265PictureInfoKHR;

  VideoDecodeH265PictureInfoKHR(const StdVideoDecodeH265PictureInfo *p_std_picture_info = {},
                                uint32_t slice_segment_count = {},
                                const uint32_t *p_slice_segment_offsets = {},
                                const void *next = {})
    : p_std_picture_info_(p_std_picture_info), slice_segment_count_(slice_segment_count), p_slice_segment_offsets_(p_slice_segment_offsets),
      next_(next) {}

  VideoDecodeH265PictureInfoKHR(const native_type &rhs)
    : VideoDecodeH265PictureInfoKHR(std::bit_cast<VideoDecodeH265PictureInfoKHR>(rhs)) {}

  VideoDecodeH265PictureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH265PictureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH265PictureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H265_PICTURE_INFO_KHR;
  const void *next_;
  const StdVideoDecodeH265PictureInfo *p_std_picture_info_;
  uint32_t slice_segment_count_;
  const uint32_t *p_slice_segment_offsets_;
};

struct ImageViewCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_CREATE_INFO;

  using native_type = VkImageViewCreateInfo;

  ImageViewCreateInfo(ImageViewCreateMask flags = {},
                      VkImage image = {},
                      ImageViewType view_type = ImageViewType::E_1D,
                      Format format = Format::E_UNDEFINED,
                      ComponentMapping components = {},
                      ImageSubresourceRange subresource_range = {},
                      const void *next = {})
    : flags_(flags), image_(image), view_type_(view_type), format_(format), components_(components), subresource_range_(subresource_range),
      next_(next) {}

  ImageViewCreateInfo(const native_type &rhs) : ImageViewCreateInfo(std::bit_cast<ImageViewCreateInfo>(rhs)) {}

  ImageViewCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_CREATE_INFO;
  const void *next_;
  ImageViewCreateMask flags_;
  VkImage image_;
  ImageViewType view_type_;
  Format format_;
  ComponentMapping components_;
  ImageSubresourceRange subresource_range_;
};

struct CommandBufferInheritanceRenderingInfo {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;

  using native_type = VkCommandBufferInheritanceRenderingInfo;

  CommandBufferInheritanceRenderingInfo(RenderingMask flags = {},
                                        uint32_t view_mask = {},
                                        uint32_t color_attachment_count = {},
                                        const Format *p_color_attachment_formats = {},
                                        Format depth_attachment_format = Format::E_UNDEFINED,
                                        Format stencil_attachment_format = Format::E_UNDEFINED,
                                        SampleCountMaskBit rasterization_samples = {},
                                        const void *next = {})
    : flags_(flags), view_mask_(view_mask), color_attachment_count_(color_attachment_count),
      p_color_attachment_formats_(p_color_attachment_formats), depth_attachment_format_(depth_attachment_format),
      stencil_attachment_format_(stencil_attachment_format), rasterization_samples_(rasterization_samples), next_(next) {}

  CommandBufferInheritanceRenderingInfo(const native_type &rhs)
    : CommandBufferInheritanceRenderingInfo(std::bit_cast<CommandBufferInheritanceRenderingInfo>(rhs)) {}

  CommandBufferInheritanceRenderingInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferInheritanceRenderingInfo>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferInheritanceRenderingInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
  const void *next_;
  RenderingMask flags_;
  uint32_t view_mask_;
  uint32_t color_attachment_count_;
  const Format *p_color_attachment_formats_;
  Format depth_attachment_format_;
  Format stencil_attachment_format_;
  SampleCountMaskBit rasterization_samples_;
};

struct PhysicalDeviceLineRasterizationFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR;

  using native_type = VkPhysicalDeviceLineRasterizationFeaturesKHR;

  PhysicalDeviceLineRasterizationFeaturesKHR(bool32 rectangular_lines = {},
                                             bool32 bresenham_lines = {},
                                             bool32 smooth_lines = {},
                                             bool32 stippled_rectangular_lines = {},
                                             bool32 stippled_bresenham_lines = {},
                                             bool32 stippled_smooth_lines = {},
                                             void *next = {})
    : rectangular_lines_(rectangular_lines), bresenham_lines_(bresenham_lines), smooth_lines_(smooth_lines),
      stippled_rectangular_lines_(stippled_rectangular_lines), stippled_bresenham_lines_(stippled_bresenham_lines),
      stippled_smooth_lines_(stippled_smooth_lines), next_(next) {}

  PhysicalDeviceLineRasterizationFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceLineRasterizationFeaturesKHR(std::bit_cast<PhysicalDeviceLineRasterizationFeaturesKHR>(rhs)) {}

  PhysicalDeviceLineRasterizationFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLineRasterizationFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLineRasterizationFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR;
  void *next_;
  bool32 rectangular_lines_;
  bool32 bresenham_lines_;
  bool32 smooth_lines_;
  bool32 stippled_rectangular_lines_;
  bool32 stippled_bresenham_lines_;
  bool32 stippled_smooth_lines_;
};

struct VideoDecodeH265CapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H265_CAPABILITIES_KHR;

  using native_type = VkVideoDecodeH265CapabilitiesKHR;

  VideoDecodeH265CapabilitiesKHR() = default;

  VideoDecodeH265CapabilitiesKHR(const native_type &rhs)
    : VideoDecodeH265CapabilitiesKHR(std::bit_cast<VideoDecodeH265CapabilitiesKHR>(rhs)) {}

  VideoDecodeH265CapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH265CapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH265CapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H265_CAPABILITIES_KHR;
  void *next_ = {};
  StdVideoH265LevelIdc max_level_idc_ = {};
};

struct AttachmentReference {

  using native_type = VkAttachmentReference;

  AttachmentReference(uint32_t attachment = {}, ImageLayout layout = ImageLayout::E_UNDEFINED) : attachment_(attachment), layout_(layout) {}

  AttachmentReference(const native_type &rhs) : AttachmentReference(std::bit_cast<AttachmentReference>(rhs)) {}

  AttachmentReference &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentReference>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentReference &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t attachment_;
  ImageLayout layout_;
};

struct SubpassDescription {

  using native_type = VkSubpassDescription;

  SubpassDescription(SubpassDescriptionMask flags = {},
                     PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                     uint32_t input_attachment_count = {},
                     const AttachmentReference *p_input_attachments = {},
                     uint32_t color_attachment_count = {},
                     const AttachmentReference *p_color_attachments = {},
                     const AttachmentReference *p_resolve_attachments = {},
                     const AttachmentReference *p_depth_stencil_attachment = {},
                     uint32_t preserve_attachment_count = {},
                     const uint32_t *p_preserve_attachments = {})
    : flags_(flags), pipeline_bind_point_(pipeline_bind_point), input_attachment_count_(input_attachment_count),
      p_input_attachments_(p_input_attachments), color_attachment_count_(color_attachment_count), p_color_attachments_(p_color_attachments),
      p_resolve_attachments_(p_resolve_attachments), p_depth_stencil_attachment_(p_depth_stencil_attachment),
      preserve_attachment_count_(preserve_attachment_count), p_preserve_attachments_(p_preserve_attachments) {}

  SubpassDescription(const native_type &rhs) : SubpassDescription(std::bit_cast<SubpassDescription>(rhs)) {}

  SubpassDescription &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassDescription>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassDescription &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  SubpassDescriptionMask flags_;
  PipelineBindPoint pipeline_bind_point_;
  uint32_t input_attachment_count_;
  const AttachmentReference *p_input_attachments_;
  uint32_t color_attachment_count_;
  const AttachmentReference *p_color_attachments_;
  const AttachmentReference *p_resolve_attachments_;
  const AttachmentReference *p_depth_stencil_attachment_;
  uint32_t preserve_attachment_count_;
  const uint32_t *p_preserve_attachments_;
};

struct PhysicalDeviceSamplerFilterMinmaxProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;

  using native_type = VkPhysicalDeviceSamplerFilterMinmaxProperties;

  PhysicalDeviceSamplerFilterMinmaxProperties() = default;

  PhysicalDeviceSamplerFilterMinmaxProperties(const native_type &rhs)
    : PhysicalDeviceSamplerFilterMinmaxProperties(std::bit_cast<PhysicalDeviceSamplerFilterMinmaxProperties>(rhs)) {}

  PhysicalDeviceSamplerFilterMinmaxProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSamplerFilterMinmaxProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSamplerFilterMinmaxProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
  void *next_ = {};
  bool32 filter_minmax_single_component_formats_ = {};
  bool32 filter_minmax_image_component_mapping_ = {};
};

struct CudaFunctionCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_CUDA_FUNCTION_CREATE_INFO_NV;

  using native_type = VkCudaFunctionCreateInfoNV;

  CudaFunctionCreateInfoNV(VkCudaModuleNV module = {}, const char *p_name = {}, const void *next = {})
    : module_(module), p_name_(p_name), next_(next) {}

  CudaFunctionCreateInfoNV(const native_type &rhs) : CudaFunctionCreateInfoNV(std::bit_cast<CudaFunctionCreateInfoNV>(rhs)) {}

  CudaFunctionCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CudaFunctionCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const CudaFunctionCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CUDA_FUNCTION_CREATE_INFO_NV;
  const void *next_;
  VkCudaModuleNV module_;
  const char *p_name_;
};

struct HostImageLayoutTransitionInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT;

  using native_type = VkHostImageLayoutTransitionInfoEXT;

  HostImageLayoutTransitionInfoEXT(VkImage image = {},
                                   ImageLayout old_layout = ImageLayout::E_UNDEFINED,
                                   ImageLayout new_layout = ImageLayout::E_UNDEFINED,
                                   ImageSubresourceRange subresource_range = {},
                                   const void *next = {})
    : image_(image), old_layout_(old_layout), new_layout_(new_layout), subresource_range_(subresource_range), next_(next) {}

  HostImageLayoutTransitionInfoEXT(const native_type &rhs)
    : HostImageLayoutTransitionInfoEXT(std::bit_cast<HostImageLayoutTransitionInfoEXT>(rhs)) {}

  HostImageLayoutTransitionInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<HostImageLayoutTransitionInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const HostImageLayoutTransitionInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT;
  const void *next_;
  VkImage image_;
  ImageLayout old_layout_;
  ImageLayout new_layout_;
  ImageSubresourceRange subresource_range_;
};

struct ShadingRatePaletteNV {

  using native_type = VkShadingRatePaletteNV;

  ShadingRatePaletteNV(uint32_t shading_rate_palette_entry_count = {}, const ShadingRatePaletteEntry *p_shading_rate_palette_entries = {})
    : shading_rate_palette_entry_count_(shading_rate_palette_entry_count), p_shading_rate_palette_entries_(p_shading_rate_palette_entries) {
  }

  ShadingRatePaletteNV(const native_type &rhs) : ShadingRatePaletteNV(std::bit_cast<ShadingRatePaletteNV>(rhs)) {}

  ShadingRatePaletteNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShadingRatePaletteNV>(rhs);
    return *this;
  }

  auto operator<=>(const ShadingRatePaletteNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t shading_rate_palette_entry_count_;
  const ShadingRatePaletteEntry *p_shading_rate_palette_entries_;
};

struct PhysicalDeviceExternalSemaphoreInfo {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;

  using native_type = VkPhysicalDeviceExternalSemaphoreInfo;

  PhysicalDeviceExternalSemaphoreInfo(ExternalSemaphoreHandleTypeMaskBit handle_type = {}, const void *next = {})
    : handle_type_(handle_type), next_(next) {}

  PhysicalDeviceExternalSemaphoreInfo(const native_type &rhs)
    : PhysicalDeviceExternalSemaphoreInfo(std::bit_cast<PhysicalDeviceExternalSemaphoreInfo>(rhs)) {}

  PhysicalDeviceExternalSemaphoreInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExternalSemaphoreInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExternalSemaphoreInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
  const void *next_;
  ExternalSemaphoreHandleTypeMaskBit handle_type_;
};

struct SparseMemoryBind {

  using native_type = VkSparseMemoryBind;

  SparseMemoryBind(DeviceSize resource_offset = {},
                   DeviceSize size = {},
                   VkDeviceMemory memory = {},
                   DeviceSize memory_offset = {},
                   SparseMemoryBindMask flags = {})
    : resource_offset_(resource_offset), size_(size), memory_(memory), memory_offset_(memory_offset), flags_(flags) {}

  SparseMemoryBind(const native_type &rhs) : SparseMemoryBind(std::bit_cast<SparseMemoryBind>(rhs)) {}

  SparseMemoryBind &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseMemoryBind>(rhs);
    return *this;
  }

  auto operator<=>(const SparseMemoryBind &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceSize resource_offset_;
  DeviceSize size_;
  VkDeviceMemory memory_;
  DeviceSize memory_offset_;
  SparseMemoryBindMask flags_;
};

struct SparseBufferMemoryBindInfo {

  using native_type = VkSparseBufferMemoryBindInfo;

  SparseBufferMemoryBindInfo(VkBuffer buffer = {}, uint32_t bind_count = {}, const SparseMemoryBind *p_binds = {})
    : buffer_(buffer), bind_count_(bind_count), p_binds_(p_binds) {}

  SparseBufferMemoryBindInfo(const native_type &rhs) : SparseBufferMemoryBindInfo(std::bit_cast<SparseBufferMemoryBindInfo>(rhs)) {}

  SparseBufferMemoryBindInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseBufferMemoryBindInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SparseBufferMemoryBindInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkBuffer buffer_;
  uint32_t bind_count_;
  const SparseMemoryBind *p_binds_;
};

struct PhysicalDeviceMeshShaderPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceMeshShaderPropertiesEXT;

  PhysicalDeviceMeshShaderPropertiesEXT() = default;

  PhysicalDeviceMeshShaderPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceMeshShaderPropertiesEXT(std::bit_cast<PhysicalDeviceMeshShaderPropertiesEXT>(rhs)) {}

  PhysicalDeviceMeshShaderPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMeshShaderPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMeshShaderPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_task_work_group_total_count_ = {};
  std::array<uint32_t, 3> max_task_work_group_count_ = {};
  uint32_t max_task_work_group_invocations_ = {};
  std::array<uint32_t, 3> max_task_work_group_size_ = {};
  uint32_t max_task_payload_size_ = {};
  uint32_t max_task_shared_memory_size_ = {};
  uint32_t max_task_payload_and_shared_memory_size_ = {};
  uint32_t max_mesh_work_group_total_count_ = {};
  std::array<uint32_t, 3> max_mesh_work_group_count_ = {};
  uint32_t max_mesh_work_group_invocations_ = {};
  std::array<uint32_t, 3> max_mesh_work_group_size_ = {};
  uint32_t max_mesh_shared_memory_size_ = {};
  uint32_t max_mesh_payload_and_shared_memory_size_ = {};
  uint32_t max_mesh_output_memory_size_ = {};
  uint32_t max_mesh_payload_and_output_memory_size_ = {};
  uint32_t max_mesh_output_components_ = {};
  uint32_t max_mesh_output_vertices_ = {};
  uint32_t max_mesh_output_primitives_ = {};
  uint32_t max_mesh_output_layers_ = {};
  uint32_t max_mesh_multiview_view_count_ = {};
  uint32_t mesh_output_per_vertex_granularity_ = {};
  uint32_t mesh_output_per_primitive_granularity_ = {};
  uint32_t max_preferred_task_work_group_invocations_ = {};
  uint32_t max_preferred_mesh_work_group_invocations_ = {};
  bool32 prefers_local_invocation_vertex_output_ = {};
  bool32 prefers_local_invocation_primitive_output_ = {};
  bool32 prefers_compact_vertex_output_ = {};
  bool32 prefers_compact_primitive_output_ = {};
};

struct PhysicalDeviceNestedCommandBufferFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT;

  using native_type = VkPhysicalDeviceNestedCommandBufferFeaturesEXT;

  PhysicalDeviceNestedCommandBufferFeaturesEXT(bool32 nested_command_buffer = {},
                                               bool32 nested_command_buffer_rendering = {},
                                               bool32 nested_command_buffer_simultaneous_use = {},
                                               void *next = {})
    : nested_command_buffer_(nested_command_buffer), nested_command_buffer_rendering_(nested_command_buffer_rendering),
      nested_command_buffer_simultaneous_use_(nested_command_buffer_simultaneous_use), next_(next) {}

  PhysicalDeviceNestedCommandBufferFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceNestedCommandBufferFeaturesEXT(std::bit_cast<PhysicalDeviceNestedCommandBufferFeaturesEXT>(rhs)) {}

  PhysicalDeviceNestedCommandBufferFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceNestedCommandBufferFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceNestedCommandBufferFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT;
  void *next_;
  bool32 nested_command_buffer_;
  bool32 nested_command_buffer_rendering_;
  bool32 nested_command_buffer_simultaneous_use_;
};

struct PhysicalDeviceMaintenance3Properties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;

  using native_type = VkPhysicalDeviceMaintenance3Properties;

  PhysicalDeviceMaintenance3Properties() = default;

  PhysicalDeviceMaintenance3Properties(const native_type &rhs)
    : PhysicalDeviceMaintenance3Properties(std::bit_cast<PhysicalDeviceMaintenance3Properties>(rhs)) {}

  PhysicalDeviceMaintenance3Properties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance3Properties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance3Properties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
  void *next_ = {};
  uint32_t max_per_set_descriptors_ = {};
  DeviceSize max_memory_allocation_size_ = {};
};

struct BufferMemoryBarrier {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_MEMORY_BARRIER;

  using native_type = VkBufferMemoryBarrier;

  BufferMemoryBarrier(AccessMask src_access_mask = {},
                      AccessMask dst_access_mask = {},
                      uint32_t src_queue_family_index = {},
                      uint32_t dst_queue_family_index = {},
                      VkBuffer buffer = {},
                      DeviceSize offset = {},
                      DeviceSize size = {},
                      const void *next = {})
    : src_access_mask_(src_access_mask), dst_access_mask_(dst_access_mask), src_queue_family_index_(src_queue_family_index),
      dst_queue_family_index_(dst_queue_family_index), buffer_(buffer), offset_(offset), size_(size), next_(next) {}

  BufferMemoryBarrier(const native_type &rhs) : BufferMemoryBarrier(std::bit_cast<BufferMemoryBarrier>(rhs)) {}

  BufferMemoryBarrier &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferMemoryBarrier>(rhs);
    return *this;
  }

  auto operator<=>(const BufferMemoryBarrier &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_MEMORY_BARRIER;
  const void *next_;
  AccessMask src_access_mask_;
  AccessMask dst_access_mask_;
  uint32_t src_queue_family_index_;
  uint32_t dst_queue_family_index_;
  VkBuffer buffer_;
  DeviceSize offset_;
  DeviceSize size_;
};

struct MemoryGetRemoteAddressInfoNV {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_GET_REMOTE_ADDRESS_INFO_NV;

  using native_type = VkMemoryGetRemoteAddressInfoNV;

  MemoryGetRemoteAddressInfoNV(VkDeviceMemory memory = {}, ExternalMemoryHandleTypeMaskBit handle_type = {}, const void *next = {})
    : memory_(memory), handle_type_(handle_type), next_(next) {}

  MemoryGetRemoteAddressInfoNV(const native_type &rhs) : MemoryGetRemoteAddressInfoNV(std::bit_cast<MemoryGetRemoteAddressInfoNV>(rhs)) {}

  MemoryGetRemoteAddressInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryGetRemoteAddressInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryGetRemoteAddressInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_GET_REMOTE_ADDRESS_INFO_NV;
  const void *next_;
  VkDeviceMemory memory_;
  ExternalMemoryHandleTypeMaskBit handle_type_;
};

struct BufferDeviceAddressCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;

  using native_type = VkBufferDeviceAddressCreateInfoEXT;

  BufferDeviceAddressCreateInfoEXT(DeviceAddress device_address = {}, const void *next = {})
    : device_address_(device_address), next_(next) {}

  BufferDeviceAddressCreateInfoEXT(const native_type &rhs)
    : BufferDeviceAddressCreateInfoEXT(std::bit_cast<BufferDeviceAddressCreateInfoEXT>(rhs)) {}

  BufferDeviceAddressCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferDeviceAddressCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const BufferDeviceAddressCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
  const void *next_;
  DeviceAddress device_address_;
};

struct OpticalFlowExecuteInfoNV {

  static constexpr StructureType structure_type = StructureType::E_OPTICAL_FLOW_EXECUTE_INFO_NV;

  using native_type = VkOpticalFlowExecuteInfoNV;

  OpticalFlowExecuteInfoNV(OpticalFlowExecuteMask flags = {}, uint32_t region_count = {}, const Rect2D *p_regions = {}, void *next = {})
    : flags_(flags), region_count_(region_count), p_regions_(p_regions), next_(next) {}

  OpticalFlowExecuteInfoNV(const native_type &rhs) : OpticalFlowExecuteInfoNV(std::bit_cast<OpticalFlowExecuteInfoNV>(rhs)) {}

  OpticalFlowExecuteInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<OpticalFlowExecuteInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const OpticalFlowExecuteInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OPTICAL_FLOW_EXECUTE_INFO_NV;
  void *next_;
  OpticalFlowExecuteMask flags_;
  uint32_t region_count_;
  const Rect2D *p_regions_;
};

struct ClearRect {

  using native_type = VkClearRect;

  ClearRect(Rect2D rect = {}, uint32_t base_array_layer = {}, uint32_t layer_count = {})
    : rect_(rect), base_array_layer_(base_array_layer), layer_count_(layer_count) {}

  ClearRect(const native_type &rhs) : ClearRect(std::bit_cast<ClearRect>(rhs)) {}

  ClearRect &operator=(const native_type &rhs) {
    *this = std::bit_cast<ClearRect>(rhs);
    return *this;
  }

  auto operator<=>(const ClearRect &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  Rect2D rect_;
  uint32_t base_array_layer_;
  uint32_t layer_count_;
};

struct FramebufferAttachmentImageInfo {

  static constexpr StructureType structure_type = StructureType::E_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;

  using native_type = VkFramebufferAttachmentImageInfo;

  FramebufferAttachmentImageInfo(ImageCreateMask flags = {},
                                 ImageUsageMask usage = {},
                                 uint32_t width = {},
                                 uint32_t height = {},
                                 uint32_t layer_count = {},
                                 uint32_t view_format_count = {},
                                 const Format *p_view_formats = {},
                                 const void *next = {})
    : flags_(flags), usage_(usage), width_(width), height_(height), layer_count_(layer_count), view_format_count_(view_format_count),
      p_view_formats_(p_view_formats), next_(next) {}

  FramebufferAttachmentImageInfo(const native_type &rhs)
    : FramebufferAttachmentImageInfo(std::bit_cast<FramebufferAttachmentImageInfo>(rhs)) {}

  FramebufferAttachmentImageInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<FramebufferAttachmentImageInfo>(rhs);
    return *this;
  }

  auto operator<=>(const FramebufferAttachmentImageInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
  const void *next_;
  ImageCreateMask flags_;
  ImageUsageMask usage_;
  uint32_t width_;
  uint32_t height_;
  uint32_t layer_count_;
  uint32_t view_format_count_;
  const Format *p_view_formats_;
};

struct FramebufferAttachmentsCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;

  using native_type = VkFramebufferAttachmentsCreateInfo;

  FramebufferAttachmentsCreateInfo(uint32_t attachment_image_info_count = {},
                                   const FramebufferAttachmentImageInfo *p_attachment_image_infos = {},
                                   const void *next = {})
    : attachment_image_info_count_(attachment_image_info_count), p_attachment_image_infos_(p_attachment_image_infos), next_(next) {}

  FramebufferAttachmentsCreateInfo(const native_type &rhs)
    : FramebufferAttachmentsCreateInfo(std::bit_cast<FramebufferAttachmentsCreateInfo>(rhs)) {}

  FramebufferAttachmentsCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<FramebufferAttachmentsCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const FramebufferAttachmentsCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
  const void *next_;
  uint32_t attachment_image_info_count_;
  const FramebufferAttachmentImageInfo *p_attachment_image_infos_;
};

struct PhysicalDeviceFragmentShadingRatePropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceFragmentShadingRatePropertiesKHR;

  PhysicalDeviceFragmentShadingRatePropertiesKHR() = default;

  PhysicalDeviceFragmentShadingRatePropertiesKHR(const native_type &rhs)
    : PhysicalDeviceFragmentShadingRatePropertiesKHR(std::bit_cast<PhysicalDeviceFragmentShadingRatePropertiesKHR>(rhs)) {}

  PhysicalDeviceFragmentShadingRatePropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShadingRatePropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShadingRatePropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
  void *next_ = {};
  Extent2D min_fragment_shading_rate_attachment_texel_size_ = {};
  Extent2D max_fragment_shading_rate_attachment_texel_size_ = {};
  uint32_t max_fragment_shading_rate_attachment_texel_size_aspect_ratio_ = {};
  bool32 primitive_fragment_shading_rate_with_multiple_viewports_ = {};
  bool32 layered_shading_rate_attachments_ = {};
  bool32 fragment_shading_rate_non_trivial_combiner_ops_ = {};
  Extent2D max_fragment_size_ = {};
  uint32_t max_fragment_size_aspect_ratio_ = {};
  uint32_t max_fragment_shading_rate_coverage_samples_ = {};
  SampleCountMaskBit max_fragment_shading_rate_rasterization_samples_ = {};
  bool32 fragment_shading_rate_with_shader_depth_stencil_writes_ = {};
  bool32 fragment_shading_rate_with_sample_mask_ = {};
  bool32 fragment_shading_rate_with_shader_sample_mask_ = {};
  bool32 fragment_shading_rate_with_conservative_rasterization_ = {};
  bool32 fragment_shading_rate_with_fragment_shader_interlock_ = {};
  bool32 fragment_shading_rate_with_custom_sample_locations_ = {};
  bool32 fragment_shading_rate_strict_multiply_combiner_ = {};
};

struct BindImageMemorySwapchainInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;

  using native_type = VkBindImageMemorySwapchainInfoKHR;

  BindImageMemorySwapchainInfoKHR(VkSwapchainKHR swapchain = {}, uint32_t image_index = {}, const void *next = {})
    : swapchain_(swapchain), image_index_(image_index), next_(next) {}

  BindImageMemorySwapchainInfoKHR(const native_type &rhs)
    : BindImageMemorySwapchainInfoKHR(std::bit_cast<BindImageMemorySwapchainInfoKHR>(rhs)) {}

  BindImageMemorySwapchainInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindImageMemorySwapchainInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const BindImageMemorySwapchainInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
  const void *next_;
  VkSwapchainKHR swapchain_;
  uint32_t image_index_;
};

struct ShaderResourceUsageAMD {

  using native_type = VkShaderResourceUsageAMD;

  ShaderResourceUsageAMD() = default;

  ShaderResourceUsageAMD(const native_type &rhs) : ShaderResourceUsageAMD(std::bit_cast<ShaderResourceUsageAMD>(rhs)) {}

  ShaderResourceUsageAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShaderResourceUsageAMD>(rhs);
    return *this;
  }

  auto operator<=>(const ShaderResourceUsageAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t num_used_vgprs_ = {};
  uint32_t num_used_sgprs_ = {};
  uint32_t lds_size_per_local_work_group_ = {};
  size_t lds_usage_size_in_bytes_ = {};
  size_t scratch_mem_usage_in_bytes_ = {};
};

struct ShaderStatisticsInfoAMD {

  using native_type = VkShaderStatisticsInfoAMD;

  ShaderStatisticsInfoAMD() = default;

  ShaderStatisticsInfoAMD(const native_type &rhs) : ShaderStatisticsInfoAMD(std::bit_cast<ShaderStatisticsInfoAMD>(rhs)) {}

  ShaderStatisticsInfoAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShaderStatisticsInfoAMD>(rhs);
    return *this;
  }

  auto operator<=>(const ShaderStatisticsInfoAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ShaderStageMask shader_stage_mask_ = {};
  ShaderResourceUsageAMD resource_usage_ = {};
  uint32_t num_physical_vgprs_ = {};
  uint32_t num_physical_sgprs_ = {};
  uint32_t num_available_vgprs_ = {};
  uint32_t num_available_sgprs_ = {};
  std::array<uint32_t, 3> compute_work_group_size_ = {};
};

struct PhysicalDeviceGroupProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_GROUP_PROPERTIES;

  using native_type = VkPhysicalDeviceGroupProperties;

  PhysicalDeviceGroupProperties() = default;

  PhysicalDeviceGroupProperties(const native_type &rhs)
    : PhysicalDeviceGroupProperties(std::bit_cast<PhysicalDeviceGroupProperties>(rhs)) {}

  PhysicalDeviceGroupProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceGroupProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceGroupProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_GROUP_PROPERTIES;
  void *next_ = {};
  uint32_t physical_device_count_ = {};
  std::array<VkPhysicalDevice, VK_MAX_DEVICE_GROUP_SIZE> physical_devices_ = {};
  bool32 subset_allocation_ = {};
};

struct ImageCopy {

  using native_type = VkImageCopy;

  ImageCopy(ImageSubresourceLayers src_subresource = {},
            Offset3D src_offset = {},
            ImageSubresourceLayers dst_subresource = {},
            Offset3D dst_offset = {},
            Extent3D extent = {})
    : src_subresource_(src_subresource), src_offset_(src_offset), dst_subresource_(dst_subresource), dst_offset_(dst_offset),
      extent_(extent) {}

  ImageCopy(const native_type &rhs) : ImageCopy(std::bit_cast<ImageCopy>(rhs)) {}

  ImageCopy &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageCopy>(rhs);
    return *this;
  }

  auto operator<=>(const ImageCopy &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageSubresourceLayers src_subresource_;
  Offset3D src_offset_;
  ImageSubresourceLayers dst_subresource_;
  Offset3D dst_offset_;
  Extent3D extent_;
};

struct PhysicalDeviceLegacyDitheringFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT;

  using native_type = VkPhysicalDeviceLegacyDitheringFeaturesEXT;

  PhysicalDeviceLegacyDitheringFeaturesEXT(bool32 legacy_dithering = {}, void *next = {})
    : legacy_dithering_(legacy_dithering), next_(next) {}

  PhysicalDeviceLegacyDitheringFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceLegacyDitheringFeaturesEXT(std::bit_cast<PhysicalDeviceLegacyDitheringFeaturesEXT>(rhs)) {}

  PhysicalDeviceLegacyDitheringFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLegacyDitheringFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLegacyDitheringFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT;
  void *next_;
  bool32 legacy_dithering_;
};

struct PhysicalDeviceRayTracingPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceRayTracingPropertiesNV;

  PhysicalDeviceRayTracingPropertiesNV() = default;

  PhysicalDeviceRayTracingPropertiesNV(const native_type &rhs)
    : PhysicalDeviceRayTracingPropertiesNV(std::bit_cast<PhysicalDeviceRayTracingPropertiesNV>(rhs)) {}

  PhysicalDeviceRayTracingPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
  void *next_ = {};
  uint32_t shader_group_handle_size_ = {};
  uint32_t max_recursion_depth_ = {};
  uint32_t max_shader_group_stride_ = {};
  uint32_t shader_group_base_alignment_ = {};
  uint64_t max_geometry_count_ = {};
  uint64_t max_instance_count_ = {};
  uint64_t max_triangle_count_ = {};
  uint32_t max_descriptor_set_acceleration_structures_ = {};
};

struct PhysicalDeviceMultiviewFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;

  using native_type = VkPhysicalDeviceMultiviewFeatures;

  PhysicalDeviceMultiviewFeatures(bool32 multiview = {},
                                  bool32 multiview_geometry_shader = {},
                                  bool32 multiview_tessellation_shader = {},
                                  void *next = {})
    : multiview_(multiview), multiview_geometry_shader_(multiview_geometry_shader),
      multiview_tessellation_shader_(multiview_tessellation_shader), next_(next) {}

  PhysicalDeviceMultiviewFeatures(const native_type &rhs)
    : PhysicalDeviceMultiviewFeatures(std::bit_cast<PhysicalDeviceMultiviewFeatures>(rhs)) {}

  PhysicalDeviceMultiviewFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiviewFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiviewFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
  void *next_;
  bool32 multiview_;
  bool32 multiview_geometry_shader_;
  bool32 multiview_tessellation_shader_;
};

struct DeviceGroupSwapchainCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;

  using native_type = VkDeviceGroupSwapchainCreateInfoKHR;

  DeviceGroupSwapchainCreateInfoKHR(DeviceGroupPresentModeMask modes = {}, const void *next = {}) : modes_(modes), next_(next) {}

  DeviceGroupSwapchainCreateInfoKHR(const native_type &rhs)
    : DeviceGroupSwapchainCreateInfoKHR(std::bit_cast<DeviceGroupSwapchainCreateInfoKHR>(rhs)) {}

  DeviceGroupSwapchainCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupSwapchainCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupSwapchainCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
  const void *next_;
  DeviceGroupPresentModeMask modes_;
};

struct PipelineCreateFlags2CreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR;

  using native_type = VkPipelineCreateFlags2CreateInfoKHR;

  PipelineCreateFlags2CreateInfoKHR(PipelineCreateMask2 flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  PipelineCreateFlags2CreateInfoKHR(const native_type &rhs)
    : PipelineCreateFlags2CreateInfoKHR(std::bit_cast<PipelineCreateFlags2CreateInfoKHR>(rhs)) {}

  PipelineCreateFlags2CreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCreateFlags2CreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCreateFlags2CreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR;
  const void *next_;
  PipelineCreateMask2 flags_;
};

struct DedicatedAllocationMemoryAllocateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;

  using native_type = VkDedicatedAllocationMemoryAllocateInfoNV;

  DedicatedAllocationMemoryAllocateInfoNV(VkImage image = {}, VkBuffer buffer = {}, const void *next = {})
    : image_(image), buffer_(buffer), next_(next) {}

  DedicatedAllocationMemoryAllocateInfoNV(const native_type &rhs)
    : DedicatedAllocationMemoryAllocateInfoNV(std::bit_cast<DedicatedAllocationMemoryAllocateInfoNV>(rhs)) {}

  DedicatedAllocationMemoryAllocateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<DedicatedAllocationMemoryAllocateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const DedicatedAllocationMemoryAllocateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
  const void *next_;
  VkImage image_;
  VkBuffer buffer_;
};

struct PhysicalDeviceCustomBorderColorPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceCustomBorderColorPropertiesEXT;

  PhysicalDeviceCustomBorderColorPropertiesEXT() = default;

  PhysicalDeviceCustomBorderColorPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceCustomBorderColorPropertiesEXT(std::bit_cast<PhysicalDeviceCustomBorderColorPropertiesEXT>(rhs)) {}

  PhysicalDeviceCustomBorderColorPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCustomBorderColorPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCustomBorderColorPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_custom_border_color_samplers_ = {};
};

struct ComputePipelineIndirectBufferInfoNV {

  static constexpr StructureType structure_type = StructureType::E_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV;

  using native_type = VkComputePipelineIndirectBufferInfoNV;

  ComputePipelineIndirectBufferInfoNV(DeviceAddress device_address = {},
                                      DeviceSize size = {},
                                      DeviceAddress pipeline_device_address_capture_replay = {},
                                      const void *next = {})
    : device_address_(device_address), size_(size), pipeline_device_address_capture_replay_(pipeline_device_address_capture_replay),
      next_(next) {}

  ComputePipelineIndirectBufferInfoNV(const native_type &rhs)
    : ComputePipelineIndirectBufferInfoNV(std::bit_cast<ComputePipelineIndirectBufferInfoNV>(rhs)) {}

  ComputePipelineIndirectBufferInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ComputePipelineIndirectBufferInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const ComputePipelineIndirectBufferInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV;
  const void *next_;
  DeviceAddress device_address_;
  DeviceSize size_;
  DeviceAddress pipeline_device_address_capture_replay_;
};

struct VideoCodingControlInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_CODING_CONTROL_INFO_KHR;

  using native_type = VkVideoCodingControlInfoKHR;

  VideoCodingControlInfoKHR(VideoCodingControlMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  VideoCodingControlInfoKHR(const native_type &rhs) : VideoCodingControlInfoKHR(std::bit_cast<VideoCodingControlInfoKHR>(rhs)) {}

  VideoCodingControlInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoCodingControlInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoCodingControlInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_CODING_CONTROL_INFO_KHR;
  const void *next_;
  VideoCodingControlMask flags_;
};

struct QueueFamilyProperties {

  using native_type = VkQueueFamilyProperties;

  QueueFamilyProperties() = default;

  QueueFamilyProperties(const native_type &rhs) : QueueFamilyProperties(std::bit_cast<QueueFamilyProperties>(rhs)) {}

  QueueFamilyProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyProperties>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  QueueMask queue_flags_ = {};
  uint32_t queue_count_ = {};
  uint32_t timestamp_valid_bits_ = {};
  Extent3D min_image_transfer_granularity_ = {};
};

struct PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;

  using native_type = VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;

  PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(bool32 descriptor_set_host_mapping = {}, void *next = {})
    : descriptor_set_host_mapping_(descriptor_set_host_mapping), next_(next) {}

  PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(const native_type &rhs)
    : PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(std::bit_cast<PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>(rhs)) {}

  PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;
  void *next_;
  bool32 descriptor_set_host_mapping_;
};

struct AccelerationStructureMatrixMotionInstanceNV {

  using native_type = VkAccelerationStructureMatrixMotionInstanceNV;

  AccelerationStructureMatrixMotionInstanceNV(TransformMatrixKHR transform_t0 = {},
                                              TransformMatrixKHR transform_t1 = {},
                                              uint32_t instance_custom_index = {},
                                              uint32_t mask = {},
                                              uint32_t instance_shader_binding_table_record_offset = {},
                                              GeometryInstanceMask flags = {},
                                              uint64_t acceleration_structure_reference = {})
    : transform_t0_(transform_t0), transform_t1_(transform_t1), instance_custom_index_(instance_custom_index), mask_(mask),
      instance_shader_binding_table_record_offset_(instance_shader_binding_table_record_offset), flags_(flags),
      acceleration_structure_reference_(acceleration_structure_reference) {}

  AccelerationStructureMatrixMotionInstanceNV(const native_type &rhs)
    : AccelerationStructureMatrixMotionInstanceNV(std::bit_cast<AccelerationStructureMatrixMotionInstanceNV>(rhs)) {}

  AccelerationStructureMatrixMotionInstanceNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureMatrixMotionInstanceNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureMatrixMotionInstanceNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  TransformMatrixKHR transform_t0_;
  TransformMatrixKHR transform_t1_;
  uint32_t instance_custom_index_ : 24;
  uint32_t mask_ : 8;
  uint32_t instance_shader_binding_table_record_offset_ : 24;
  GeometryInstanceMask flags_ : 8;
  uint64_t acceleration_structure_reference_;
};

struct VideoEncodeH265PictureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_PICTURE_INFO_KHR;

  using native_type = VkVideoEncodeH265PictureInfoKHR;

  VideoEncodeH265PictureInfoKHR(uint32_t nalu_slice_segment_entry_count = {},
                                const VideoEncodeH265NaluSliceSegmentInfoKHR *p_nalu_slice_segment_entries = {},
                                const StdVideoEncodeH265PictureInfo *p_std_picture_info = {},
                                const void *next = {})
    : nalu_slice_segment_entry_count_(nalu_slice_segment_entry_count), p_nalu_slice_segment_entries_(p_nalu_slice_segment_entries),
      p_std_picture_info_(p_std_picture_info), next_(next) {}

  VideoEncodeH265PictureInfoKHR(const native_type &rhs)
    : VideoEncodeH265PictureInfoKHR(std::bit_cast<VideoEncodeH265PictureInfoKHR>(rhs)) {}

  VideoEncodeH265PictureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265PictureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265PictureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_PICTURE_INFO_KHR;
  const void *next_;
  uint32_t nalu_slice_segment_entry_count_;
  const VideoEncodeH265NaluSliceSegmentInfoKHR *p_nalu_slice_segment_entries_;
  const StdVideoEncodeH265PictureInfo *p_std_picture_info_;
};

struct BlitImageInfo2 {

  static constexpr StructureType structure_type = StructureType::E_BLIT_IMAGE_INFO_2;

  using native_type = VkBlitImageInfo2;

  BlitImageInfo2(VkImage src_image = {},
                 ImageLayout src_image_layout = ImageLayout::E_UNDEFINED,
                 VkImage dst_image = {},
                 ImageLayout dst_image_layout = ImageLayout::E_UNDEFINED,
                 uint32_t region_count = {},
                 const ImageBlit2 *p_regions = {},
                 Filter filter = Filter::E_NEAREST,
                 const void *next = {})
    : src_image_(src_image), src_image_layout_(src_image_layout), dst_image_(dst_image), dst_image_layout_(dst_image_layout),
      region_count_(region_count), p_regions_(p_regions), filter_(filter), next_(next) {}

  BlitImageInfo2(const native_type &rhs) : BlitImageInfo2(std::bit_cast<BlitImageInfo2>(rhs)) {}

  BlitImageInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<BlitImageInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const BlitImageInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BLIT_IMAGE_INFO_2;
  const void *next_;
  VkImage src_image_;
  ImageLayout src_image_layout_;
  VkImage dst_image_;
  ImageLayout dst_image_layout_;
  uint32_t region_count_;
  const ImageBlit2 *p_regions_;
  Filter filter_;
};

struct MemoryBarrier {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_BARRIER;

  using native_type = VkMemoryBarrier;

  MemoryBarrier(AccessMask src_access_mask = {}, AccessMask dst_access_mask = {}, const void *next = {})
    : src_access_mask_(src_access_mask), dst_access_mask_(dst_access_mask), next_(next) {}

  MemoryBarrier(const native_type &rhs) : MemoryBarrier(std::bit_cast<MemoryBarrier>(rhs)) {}

  MemoryBarrier &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryBarrier>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryBarrier &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_BARRIER;
  const void *next_;
  AccessMask src_access_mask_;
  AccessMask dst_access_mask_;
};

struct PhysicalDeviceSubpassShadingPropertiesHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;

  using native_type = VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;

  PhysicalDeviceSubpassShadingPropertiesHUAWEI() = default;

  PhysicalDeviceSubpassShadingPropertiesHUAWEI(const native_type &rhs)
    : PhysicalDeviceSubpassShadingPropertiesHUAWEI(std::bit_cast<PhysicalDeviceSubpassShadingPropertiesHUAWEI>(rhs)) {}

  PhysicalDeviceSubpassShadingPropertiesHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSubpassShadingPropertiesHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSubpassShadingPropertiesHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;
  void *next_ = {};
  uint32_t max_subpass_shading_workgroup_size_aspect_ratio_ = {};
};

struct PhysicalDeviceSparseImageFormatInfo2 {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;

  using native_type = VkPhysicalDeviceSparseImageFormatInfo2;

  PhysicalDeviceSparseImageFormatInfo2(Format format = Format::E_UNDEFINED,
                                       ImageType type = ImageType::E_1D,
                                       SampleCountMaskBit samples = {},
                                       ImageUsageMask usage = {},
                                       ImageTiling tiling = ImageTiling::E_OPTIMAL,
                                       const void *next = {})
    : format_(format), type_(type), samples_(samples), usage_(usage), tiling_(tiling), next_(next) {}

  PhysicalDeviceSparseImageFormatInfo2(const native_type &rhs)
    : PhysicalDeviceSparseImageFormatInfo2(std::bit_cast<PhysicalDeviceSparseImageFormatInfo2>(rhs)) {}

  PhysicalDeviceSparseImageFormatInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSparseImageFormatInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSparseImageFormatInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
  const void *next_;
  Format format_;
  ImageType type_;
  SampleCountMaskBit samples_;
  ImageUsageMask usage_;
  ImageTiling tiling_;
};

struct SparseImageOpaqueMemoryBindInfo {

  using native_type = VkSparseImageOpaqueMemoryBindInfo;

  SparseImageOpaqueMemoryBindInfo(VkImage image = {}, uint32_t bind_count = {}, const SparseMemoryBind *p_binds = {})
    : image_(image), bind_count_(bind_count), p_binds_(p_binds) {}

  SparseImageOpaqueMemoryBindInfo(const native_type &rhs)
    : SparseImageOpaqueMemoryBindInfo(std::bit_cast<SparseImageOpaqueMemoryBindInfo>(rhs)) {}

  SparseImageOpaqueMemoryBindInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageOpaqueMemoryBindInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageOpaqueMemoryBindInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkImage image_;
  uint32_t bind_count_;
  const SparseMemoryBind *p_binds_;
};

struct SparseImageMemoryBind {

  using native_type = VkSparseImageMemoryBind;

  SparseImageMemoryBind(ImageSubresource subresource = {},
                        Offset3D offset = {},
                        Extent3D extent = {},
                        VkDeviceMemory memory = {},
                        DeviceSize memory_offset = {},
                        SparseMemoryBindMask flags = {})
    : subresource_(subresource), offset_(offset), extent_(extent), memory_(memory), memory_offset_(memory_offset), flags_(flags) {}

  SparseImageMemoryBind(const native_type &rhs) : SparseImageMemoryBind(std::bit_cast<SparseImageMemoryBind>(rhs)) {}

  SparseImageMemoryBind &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageMemoryBind>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageMemoryBind &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageSubresource subresource_;
  Offset3D offset_;
  Extent3D extent_;
  VkDeviceMemory memory_;
  DeviceSize memory_offset_;
  SparseMemoryBindMask flags_;
};

struct SparseImageMemoryBindInfo {

  using native_type = VkSparseImageMemoryBindInfo;

  SparseImageMemoryBindInfo(VkImage image = {}, uint32_t bind_count = {}, const SparseImageMemoryBind *p_binds = {})
    : image_(image), bind_count_(bind_count), p_binds_(p_binds) {}

  SparseImageMemoryBindInfo(const native_type &rhs) : SparseImageMemoryBindInfo(std::bit_cast<SparseImageMemoryBindInfo>(rhs)) {}

  SparseImageMemoryBindInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageMemoryBindInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageMemoryBindInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkImage image_;
  uint32_t bind_count_;
  const SparseImageMemoryBind *p_binds_;
};

struct BindSparseInfo {

  static constexpr StructureType structure_type = StructureType::E_BIND_SPARSE_INFO;

  using native_type = VkBindSparseInfo;

  BindSparseInfo(uint32_t wait_semaphore_count = {},
                 const VkSemaphore *p_wait_semaphores = {},
                 uint32_t buffer_bind_count = {},
                 const SparseBufferMemoryBindInfo *p_buffer_binds = {},
                 uint32_t image_opaque_bind_count = {},
                 const SparseImageOpaqueMemoryBindInfo *p_image_opaque_binds = {},
                 uint32_t image_bind_count = {},
                 const SparseImageMemoryBindInfo *p_image_binds = {},
                 uint32_t signal_semaphore_count = {},
                 const VkSemaphore *p_signal_semaphores = {},
                 const void *next = {})
    : wait_semaphore_count_(wait_semaphore_count), p_wait_semaphores_(p_wait_semaphores), buffer_bind_count_(buffer_bind_count),
      p_buffer_binds_(p_buffer_binds), image_opaque_bind_count_(image_opaque_bind_count), p_image_opaque_binds_(p_image_opaque_binds),
      image_bind_count_(image_bind_count), p_image_binds_(p_image_binds), signal_semaphore_count_(signal_semaphore_count),
      p_signal_semaphores_(p_signal_semaphores), next_(next) {}

  BindSparseInfo(const native_type &rhs) : BindSparseInfo(std::bit_cast<BindSparseInfo>(rhs)) {}

  BindSparseInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindSparseInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BindSparseInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_SPARSE_INFO;
  const void *next_;
  uint32_t wait_semaphore_count_;
  const VkSemaphore *p_wait_semaphores_;
  uint32_t buffer_bind_count_;
  const SparseBufferMemoryBindInfo *p_buffer_binds_;
  uint32_t image_opaque_bind_count_;
  const SparseImageOpaqueMemoryBindInfo *p_image_opaque_binds_;
  uint32_t image_bind_count_;
  const SparseImageMemoryBindInfo *p_image_binds_;
  uint32_t signal_semaphore_count_;
  const VkSemaphore *p_signal_semaphores_;
};

struct PhysicalDevicePipelineRobustnessFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT;

  using native_type = VkPhysicalDevicePipelineRobustnessFeaturesEXT;

  PhysicalDevicePipelineRobustnessFeaturesEXT(bool32 pipeline_robustness = {}, void *next = {})
    : pipeline_robustness_(pipeline_robustness), next_(next) {}

  PhysicalDevicePipelineRobustnessFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePipelineRobustnessFeaturesEXT(std::bit_cast<PhysicalDevicePipelineRobustnessFeaturesEXT>(rhs)) {}

  PhysicalDevicePipelineRobustnessFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePipelineRobustnessFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePipelineRobustnessFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT;
  void *next_;
  bool32 pipeline_robustness_;
};

struct ShaderModuleCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_SHADER_MODULE_CREATE_INFO;

  using native_type = VkShaderModuleCreateInfo;

  ShaderModuleCreateInfo(ShaderModuleCreateMask flags = {}, size_t code_size = {}, const uint32_t *p_code = {}, const void *next = {})
    : flags_(flags), code_size_(code_size), p_code_(p_code), next_(next) {}

  ShaderModuleCreateInfo(const native_type &rhs) : ShaderModuleCreateInfo(std::bit_cast<ShaderModuleCreateInfo>(rhs)) {}

  ShaderModuleCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShaderModuleCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ShaderModuleCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SHADER_MODULE_CREATE_INFO;
  const void *next_;
  ShaderModuleCreateMask flags_;
  size_t code_size_;
  const uint32_t *p_code_;
};

struct PhysicalDevicePCIBusInfoPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;

  using native_type = VkPhysicalDevicePCIBusInfoPropertiesEXT;

  PhysicalDevicePCIBusInfoPropertiesEXT() = default;

  PhysicalDevicePCIBusInfoPropertiesEXT(const native_type &rhs)
    : PhysicalDevicePCIBusInfoPropertiesEXT(std::bit_cast<PhysicalDevicePCIBusInfoPropertiesEXT>(rhs)) {}

  PhysicalDevicePCIBusInfoPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePCIBusInfoPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePCIBusInfoPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t pci_domain_ = {};
  uint32_t pci_bus_ = {};
  uint32_t pci_device_ = {};
  uint32_t pci_function_ = {};
};

struct SwapchainCounterCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;

  using native_type = VkSwapchainCounterCreateInfoEXT;

  SwapchainCounterCreateInfoEXT(SurfaceCounterMask surface_counters = {}, const void *next = {})
    : surface_counters_(surface_counters), next_(next) {}

  SwapchainCounterCreateInfoEXT(const native_type &rhs)
    : SwapchainCounterCreateInfoEXT(std::bit_cast<SwapchainCounterCreateInfoEXT>(rhs)) {}

  SwapchainCounterCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainCounterCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainCounterCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
  const void *next_;
  SurfaceCounterMask surface_counters_;
};

struct LatencySubmissionPresentIdNV {

  static constexpr StructureType structure_type = StructureType::E_LATENCY_SUBMISSION_PRESENT_ID_NV;

  using native_type = VkLatencySubmissionPresentIdNV;

  LatencySubmissionPresentIdNV(uint64_t present_id = {}, const void *next = {}) : present_id_(present_id), next_(next) {}

  LatencySubmissionPresentIdNV(const native_type &rhs) : LatencySubmissionPresentIdNV(std::bit_cast<LatencySubmissionPresentIdNV>(rhs)) {}

  LatencySubmissionPresentIdNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<LatencySubmissionPresentIdNV>(rhs);
    return *this;
  }

  auto operator<=>(const LatencySubmissionPresentIdNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_LATENCY_SUBMISSION_PRESENT_ID_NV;
  const void *next_;
  uint64_t present_id_;
};

struct DescriptorSetAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_ALLOCATE_INFO;

  using native_type = VkDescriptorSetAllocateInfo;

  DescriptorSetAllocateInfo(VkDescriptorPool descriptor_pool = {},
                            uint32_t descriptor_set_count = {},
                            const VkDescriptorSetLayout *p_set_layouts = {},
                            const void *next = {})
    : descriptor_pool_(descriptor_pool), descriptor_set_count_(descriptor_set_count), p_set_layouts_(p_set_layouts), next_(next) {}

  DescriptorSetAllocateInfo(const native_type &rhs) : DescriptorSetAllocateInfo(std::bit_cast<DescriptorSetAllocateInfo>(rhs)) {}

  DescriptorSetAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_ALLOCATE_INFO;
  const void *next_;
  VkDescriptorPool descriptor_pool_;
  uint32_t descriptor_set_count_;
  const VkDescriptorSetLayout *p_set_layouts_;
};

struct VideoSessionParametersCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;

  using native_type = VkVideoSessionParametersCreateInfoKHR;

  VideoSessionParametersCreateInfoKHR(VideoSessionParametersCreateMask flags = {},
                                      VkVideoSessionParametersKHR video_session_parameters_template = {},
                                      VkVideoSessionKHR video_session = {},
                                      const void *next = {})
    : flags_(flags), video_session_parameters_template_(video_session_parameters_template), video_session_(video_session), next_(next) {}

  VideoSessionParametersCreateInfoKHR(const native_type &rhs)
    : VideoSessionParametersCreateInfoKHR(std::bit_cast<VideoSessionParametersCreateInfoKHR>(rhs)) {}

  VideoSessionParametersCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoSessionParametersCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoSessionParametersCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
  const void *next_;
  VideoSessionParametersCreateMask flags_;
  VkVideoSessionParametersKHR video_session_parameters_template_;
  VkVideoSessionKHR video_session_;
};

struct GeometryTrianglesNV {

  static constexpr StructureType structure_type = StructureType::E_GEOMETRY_TRIANGLES_NV;

  using native_type = VkGeometryTrianglesNV;

  GeometryTrianglesNV(VkBuffer vertex_data = {},
                      DeviceSize vertex_offset = {},
                      uint32_t vertex_count = {},
                      DeviceSize vertex_stride = {},
                      Format vertex_format = Format::E_UNDEFINED,
                      VkBuffer index_data = {},
                      DeviceSize index_offset = {},
                      uint32_t index_count = {},
                      IndexType index_type = IndexType::E_UINT16,
                      VkBuffer transform_data = {},
                      DeviceSize transform_offset = {},
                      const void *next = {})
    : vertex_data_(vertex_data), vertex_offset_(vertex_offset), vertex_count_(vertex_count), vertex_stride_(vertex_stride),
      vertex_format_(vertex_format), index_data_(index_data), index_offset_(index_offset), index_count_(index_count),
      index_type_(index_type), transform_data_(transform_data), transform_offset_(transform_offset), next_(next) {}

  GeometryTrianglesNV(const native_type &rhs) : GeometryTrianglesNV(std::bit_cast<GeometryTrianglesNV>(rhs)) {}

  GeometryTrianglesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GeometryTrianglesNV>(rhs);
    return *this;
  }

  auto operator<=>(const GeometryTrianglesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GEOMETRY_TRIANGLES_NV;
  const void *next_;
  VkBuffer vertex_data_;
  DeviceSize vertex_offset_;
  uint32_t vertex_count_;
  DeviceSize vertex_stride_;
  Format vertex_format_;
  VkBuffer index_data_;
  DeviceSize index_offset_;
  uint32_t index_count_;
  IndexType index_type_;
  VkBuffer transform_data_;
  DeviceSize transform_offset_;
};

struct SubpassSampleLocationsEXT {

  using native_type = VkSubpassSampleLocationsEXT;

  SubpassSampleLocationsEXT(uint32_t subpass_index = {}, SampleLocationsInfoEXT sample_locations_info = {})
    : subpass_index_(subpass_index), sample_locations_info_(sample_locations_info) {}

  SubpassSampleLocationsEXT(const native_type &rhs) : SubpassSampleLocationsEXT(std::bit_cast<SubpassSampleLocationsEXT>(rhs)) {}

  SubpassSampleLocationsEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassSampleLocationsEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassSampleLocationsEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t subpass_index_;
  SampleLocationsInfoEXT sample_locations_info_;
};

struct DisplayPlanePropertiesKHR {

  using native_type = VkDisplayPlanePropertiesKHR;

  DisplayPlanePropertiesKHR() = default;

  DisplayPlanePropertiesKHR(const native_type &rhs) : DisplayPlanePropertiesKHR(std::bit_cast<DisplayPlanePropertiesKHR>(rhs)) {}

  DisplayPlanePropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPlanePropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPlanePropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkDisplayKHR current_display_ = {};
  uint32_t current_stack_index_ = {};
};

struct DisplayPlaneProperties2KHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_PLANE_PROPERTIES_2_KHR;

  using native_type = VkDisplayPlaneProperties2KHR;

  DisplayPlaneProperties2KHR() = default;

  DisplayPlaneProperties2KHR(const native_type &rhs) : DisplayPlaneProperties2KHR(std::bit_cast<DisplayPlaneProperties2KHR>(rhs)) {}

  DisplayPlaneProperties2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPlaneProperties2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPlaneProperties2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_PLANE_PROPERTIES_2_KHR;
  void *next_ = {};
  DisplayPlanePropertiesKHR display_plane_properties_ = {};
};

struct DescriptorSetBindingReferenceVALVE {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;

  using native_type = VkDescriptorSetBindingReferenceVALVE;

  DescriptorSetBindingReferenceVALVE(VkDescriptorSetLayout descriptor_set_layout = {}, uint32_t binding = {}, const void *next = {})
    : descriptor_set_layout_(descriptor_set_layout), binding_(binding), next_(next) {}

  DescriptorSetBindingReferenceVALVE(const native_type &rhs)
    : DescriptorSetBindingReferenceVALVE(std::bit_cast<DescriptorSetBindingReferenceVALVE>(rhs)) {}

  DescriptorSetBindingReferenceVALVE &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetBindingReferenceVALVE>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetBindingReferenceVALVE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;
  const void *next_;
  VkDescriptorSetLayout descriptor_set_layout_;
  uint32_t binding_;
};

struct SetStateFlagsIndirectCommandNV {

  using native_type = VkSetStateFlagsIndirectCommandNV;

  SetStateFlagsIndirectCommandNV(uint32_t data = {}) : data_(data) {}

  SetStateFlagsIndirectCommandNV(const native_type &rhs)
    : SetStateFlagsIndirectCommandNV(std::bit_cast<SetStateFlagsIndirectCommandNV>(rhs)) {}

  SetStateFlagsIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<SetStateFlagsIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const SetStateFlagsIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t data_;
};

struct RenderPassAttachmentBeginInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_ATTACHMENT_BEGIN_INFO;

  using native_type = VkRenderPassAttachmentBeginInfo;

  RenderPassAttachmentBeginInfo(uint32_t attachment_count = {}, const VkImageView *p_attachments = {}, const void *next = {})
    : attachment_count_(attachment_count), p_attachments_(p_attachments), next_(next) {}

  RenderPassAttachmentBeginInfo(const native_type &rhs)
    : RenderPassAttachmentBeginInfo(std::bit_cast<RenderPassAttachmentBeginInfo>(rhs)) {}

  RenderPassAttachmentBeginInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassAttachmentBeginInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassAttachmentBeginInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
  const void *next_;
  uint32_t attachment_count_;
  const VkImageView *p_attachments_;
};

struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;

  using native_type = VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

  PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(bool32 device_generated_commands = {}, void *next = {})
    : device_generated_commands_(device_generated_commands), next_(next) {}

  PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(const native_type &rhs)
    : PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(std::bit_cast<PhysicalDeviceDeviceGeneratedCommandsFeaturesNV>(rhs)) {}

  PhysicalDeviceDeviceGeneratedCommandsFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDeviceGeneratedCommandsFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDeviceGeneratedCommandsFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
  void *next_;
  bool32 device_generated_commands_;
};

struct QueueFamilyGlobalPriorityPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;

  using native_type = VkQueueFamilyGlobalPriorityPropertiesKHR;

  QueueFamilyGlobalPriorityPropertiesKHR() = default;

  QueueFamilyGlobalPriorityPropertiesKHR(const native_type &rhs)
    : QueueFamilyGlobalPriorityPropertiesKHR(std::bit_cast<QueueFamilyGlobalPriorityPropertiesKHR>(rhs)) {}

  QueueFamilyGlobalPriorityPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyGlobalPriorityPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyGlobalPriorityPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t priority_count_ = {};
  std::array<QueueGlobalPriority, VK_MAX_GLOBAL_PRIORITY_SIZE_KHR> priorities_ = {};
};

struct PhysicalDeviceImageCompressionControlFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT;

  using native_type = VkPhysicalDeviceImageCompressionControlFeaturesEXT;

  PhysicalDeviceImageCompressionControlFeaturesEXT(bool32 image_compression_control = {}, void *next = {})
    : image_compression_control_(image_compression_control), next_(next) {}

  PhysicalDeviceImageCompressionControlFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceImageCompressionControlFeaturesEXT(std::bit_cast<PhysicalDeviceImageCompressionControlFeaturesEXT>(rhs)) {}

  PhysicalDeviceImageCompressionControlFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageCompressionControlFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageCompressionControlFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT;
  void *next_;
  bool32 image_compression_control_;
};

struct MemoryType {

  using native_type = VkMemoryType;

  MemoryType() = default;

  MemoryType(const native_type &rhs) : MemoryType(std::bit_cast<MemoryType>(rhs)) {}

  MemoryType &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryType>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryType &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  MemoryPropertyMask property_flags_ = {};
  uint32_t heap_index_ = {};
};

struct MemoryHeap {

  using native_type = VkMemoryHeap;

  MemoryHeap() = default;

  MemoryHeap(const native_type &rhs) : MemoryHeap(std::bit_cast<MemoryHeap>(rhs)) {}

  MemoryHeap &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryHeap>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryHeap &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceSize size_ = {};
  MemoryHeapMask flags_ = {};
};

struct PhysicalDeviceMemoryProperties {

  using native_type = VkPhysicalDeviceMemoryProperties;

  PhysicalDeviceMemoryProperties() = default;

  PhysicalDeviceMemoryProperties(const native_type &rhs)
    : PhysicalDeviceMemoryProperties(std::bit_cast<PhysicalDeviceMemoryProperties>(rhs)) {}

  PhysicalDeviceMemoryProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMemoryProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMemoryProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t memory_type_count_ = {};
  std::array<MemoryType, VK_MAX_MEMORY_TYPES> memory_types_ = {};
  uint32_t memory_heap_count_ = {};
  std::array<MemoryHeap, VK_MAX_MEMORY_HEAPS> memory_heaps_ = {};
};

struct PresentTimeGOOGLE {

  using native_type = VkPresentTimeGOOGLE;

  PresentTimeGOOGLE(uint32_t present_id = {}, uint64_t desired_present_time = {})
    : present_id_(present_id), desired_present_time_(desired_present_time) {}

  PresentTimeGOOGLE(const native_type &rhs) : PresentTimeGOOGLE(std::bit_cast<PresentTimeGOOGLE>(rhs)) {}

  PresentTimeGOOGLE &operator=(const native_type &rhs) {
    *this = std::bit_cast<PresentTimeGOOGLE>(rhs);
    return *this;
  }

  auto operator<=>(const PresentTimeGOOGLE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t present_id_;
  uint64_t desired_present_time_;
};

struct PresentTimesInfoGOOGLE {

  static constexpr StructureType structure_type = StructureType::E_PRESENT_TIMES_INFO_GOOGLE;

  using native_type = VkPresentTimesInfoGOOGLE;

  PresentTimesInfoGOOGLE(uint32_t swapchain_count = {}, const PresentTimeGOOGLE *p_times = {}, const void *next = {})
    : swapchain_count_(swapchain_count), p_times_(p_times), next_(next) {}

  PresentTimesInfoGOOGLE(const native_type &rhs) : PresentTimesInfoGOOGLE(std::bit_cast<PresentTimesInfoGOOGLE>(rhs)) {}

  PresentTimesInfoGOOGLE &operator=(const native_type &rhs) {
    *this = std::bit_cast<PresentTimesInfoGOOGLE>(rhs);
    return *this;
  }

  auto operator<=>(const PresentTimesInfoGOOGLE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PRESENT_TIMES_INFO_GOOGLE;
  const void *next_;
  uint32_t swapchain_count_;
  const PresentTimeGOOGLE *p_times_;
};

struct Viewport {

  using native_type = VkViewport;

  Viewport(float x = {}, float y = {}, float width = {}, float height = {}, float min_depth = {}, float max_depth = {})
    : x_(x), y_(y), width_(width), height_(height), min_depth_(min_depth), max_depth_(max_depth) {}

  Viewport(const native_type &rhs) : Viewport(std::bit_cast<Viewport>(rhs)) {}

  Viewport &operator=(const native_type &rhs) {
    *this = std::bit_cast<Viewport>(rhs);
    return *this;
  }

  auto operator<=>(const Viewport &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float x_;
  float y_;
  float width_;
  float height_;
  float min_depth_;
  float max_depth_;
};

struct DisplayPropertiesKHR {

  using native_type = VkDisplayPropertiesKHR;

  DisplayPropertiesKHR() = default;

  DisplayPropertiesKHR(const native_type &rhs) : DisplayPropertiesKHR(std::bit_cast<DisplayPropertiesKHR>(rhs)) {}

  DisplayPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkDisplayKHR display_ = {};
  const char *display_name_ = {};
  Extent2D physical_dimensions_ = {};
  Extent2D physical_resolution_ = {};
  SurfaceTransformMask supported_transforms_ = {};
  bool32 plane_reorder_possible_ = {};
  bool32 persistent_content_ = {};
};

struct ImagePlaneMemoryRequirementsInfo {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;

  using native_type = VkImagePlaneMemoryRequirementsInfo;

  ImagePlaneMemoryRequirementsInfo(ImageAspectMaskBit plane_aspect = {}, const void *next = {})
    : plane_aspect_(plane_aspect), next_(next) {}

  ImagePlaneMemoryRequirementsInfo(const native_type &rhs)
    : ImagePlaneMemoryRequirementsInfo(std::bit_cast<ImagePlaneMemoryRequirementsInfo>(rhs)) {}

  ImagePlaneMemoryRequirementsInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImagePlaneMemoryRequirementsInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ImagePlaneMemoryRequirementsInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
  const void *next_;
  ImageAspectMaskBit plane_aspect_;
};

struct AllocationCallbacks {

  using native_type = VkAllocationCallbacks;

  AllocationCallbacks(void *p_user_data = {},
                      PFN_vkAllocationFunction pfn_allocation = {},
                      PFN_vkReallocationFunction pfn_reallocation = {},
                      PFN_vkFreeFunction pfn_free = {},
                      PFN_vkInternalAllocationNotification pfn_internal_allocation = {},
                      PFN_vkInternalFreeNotification pfn_internal_free = {})
    : p_user_data_(p_user_data), pfn_allocation_(pfn_allocation), pfn_reallocation_(pfn_reallocation), pfn_free_(pfn_free),
      pfn_internal_allocation_(pfn_internal_allocation), pfn_internal_free_(pfn_internal_free) {}

  AllocationCallbacks(const native_type &rhs) : AllocationCallbacks(std::bit_cast<AllocationCallbacks>(rhs)) {}

  AllocationCallbacks &operator=(const native_type &rhs) {
    *this = std::bit_cast<AllocationCallbacks>(rhs);
    return *this;
  }

  auto operator<=>(const AllocationCallbacks &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  void *p_user_data_;
  PFN_vkAllocationFunction pfn_allocation_;
  PFN_vkReallocationFunction pfn_reallocation_;
  PFN_vkFreeFunction pfn_free_;
  PFN_vkInternalAllocationNotification pfn_internal_allocation_;
  PFN_vkInternalFreeNotification pfn_internal_free_;
};

struct PhysicalDeviceDrmPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceDrmPropertiesEXT;

  PhysicalDeviceDrmPropertiesEXT() = default;

  PhysicalDeviceDrmPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceDrmPropertiesEXT(std::bit_cast<PhysicalDeviceDrmPropertiesEXT>(rhs)) {}

  PhysicalDeviceDrmPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDrmPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDrmPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;
  void *next_ = {};
  bool32 has_primary_ = {};
  bool32 has_render_ = {};
  int64_t primary_major_ = {};
  int64_t primary_minor_ = {};
  int64_t render_major_ = {};
  int64_t render_minor_ = {};
};

struct PhysicalDeviceShaderCorePropertiesAMD {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;

  using native_type = VkPhysicalDeviceShaderCorePropertiesAMD;

  PhysicalDeviceShaderCorePropertiesAMD() = default;

  PhysicalDeviceShaderCorePropertiesAMD(const native_type &rhs)
    : PhysicalDeviceShaderCorePropertiesAMD(std::bit_cast<PhysicalDeviceShaderCorePropertiesAMD>(rhs)) {}

  PhysicalDeviceShaderCorePropertiesAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderCorePropertiesAMD>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderCorePropertiesAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
  void *next_ = {};
  uint32_t shader_engine_count_ = {};
  uint32_t shader_arrays_per_engine_count_ = {};
  uint32_t compute_units_per_shader_array_ = {};
  uint32_t simd_per_compute_unit_ = {};
  uint32_t wavefronts_per_simd_ = {};
  uint32_t wavefront_size_ = {};
  uint32_t sgprs_per_simd_ = {};
  uint32_t min_sgpr_allocation_ = {};
  uint32_t max_sgpr_allocation_ = {};
  uint32_t sgpr_allocation_granularity_ = {};
  uint32_t vgprs_per_simd_ = {};
  uint32_t min_vgpr_allocation_ = {};
  uint32_t max_vgpr_allocation_ = {};
  uint32_t vgpr_allocation_granularity_ = {};
};

struct PipelineMultisampleStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;

  using native_type = VkPipelineMultisampleStateCreateInfo;

  PipelineMultisampleStateCreateInfo(PipelineMultisampleStateCreateMask flags = {},
                                     SampleCountMaskBit rasterization_samples = {},
                                     bool32 sample_shading_enable = {},
                                     float min_sample_shading = {},
                                     const SampleMask *p_sample_mask = {},
                                     bool32 alpha_to_coverage_enable = {},
                                     bool32 alpha_to_one_enable = {},
                                     const void *next = {})
    : flags_(flags), rasterization_samples_(rasterization_samples), sample_shading_enable_(sample_shading_enable),
      min_sample_shading_(min_sample_shading), p_sample_mask_(p_sample_mask), alpha_to_coverage_enable_(alpha_to_coverage_enable),
      alpha_to_one_enable_(alpha_to_one_enable), next_(next) {}

  PipelineMultisampleStateCreateInfo(const native_type &rhs)
    : PipelineMultisampleStateCreateInfo(std::bit_cast<PipelineMultisampleStateCreateInfo>(rhs)) {}

  PipelineMultisampleStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineMultisampleStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineMultisampleStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
  const void *next_;
  PipelineMultisampleStateCreateMask flags_;
  SampleCountMaskBit rasterization_samples_;
  bool32 sample_shading_enable_;
  float min_sample_shading_;
  const SampleMask *p_sample_mask_;
  bool32 alpha_to_coverage_enable_;
  bool32 alpha_to_one_enable_;
};

struct PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV;

  using native_type = VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;

  PhysicalDeviceDescriptorPoolOverallocationFeaturesNV(bool32 descriptor_pool_overallocation = {}, void *next = {})
    : descriptor_pool_overallocation_(descriptor_pool_overallocation), next_(next) {}

  PhysicalDeviceDescriptorPoolOverallocationFeaturesNV(const native_type &rhs)
    : PhysicalDeviceDescriptorPoolOverallocationFeaturesNV(std::bit_cast<PhysicalDeviceDescriptorPoolOverallocationFeaturesNV>(rhs)) {}

  PhysicalDeviceDescriptorPoolOverallocationFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorPoolOverallocationFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorPoolOverallocationFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV;
  void *next_;
  bool32 descriptor_pool_overallocation_;
};

struct CooperativeMatrixPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_COOPERATIVE_MATRIX_PROPERTIES_NV;

  using native_type = VkCooperativeMatrixPropertiesNV;

  CooperativeMatrixPropertiesNV() = default;

  CooperativeMatrixPropertiesNV(const native_type &rhs)
    : CooperativeMatrixPropertiesNV(std::bit_cast<CooperativeMatrixPropertiesNV>(rhs)) {}

  CooperativeMatrixPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CooperativeMatrixPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const CooperativeMatrixPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COOPERATIVE_MATRIX_PROPERTIES_NV;
  void *next_ = {};
  uint32_t msize_ = {};
  uint32_t nsize_ = {};
  uint32_t ksize_ = {};
  VkComponentTypeNV atype_ = {};
  VkComponentTypeNV btype_ = {};
  VkComponentTypeNV ctype_ = {};
  VkComponentTypeNV dtype_ = {};
  VkScopeNV scope_ = {};
};

struct PhysicalDeviceFeatures2 {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FEATURES_2;

  using native_type = VkPhysicalDeviceFeatures2;

  PhysicalDeviceFeatures2(PhysicalDeviceFeatures features = {}, void *next = {}) : features_(features), next_(next) {}

  PhysicalDeviceFeatures2(const native_type &rhs) : PhysicalDeviceFeatures2(std::bit_cast<PhysicalDeviceFeatures2>(rhs)) {}

  PhysicalDeviceFeatures2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFeatures2>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFeatures2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FEATURES_2;
  void *next_;
  PhysicalDeviceFeatures features_;
};

struct RenderingInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_INFO;

  using native_type = VkRenderingInfo;

  RenderingInfo(RenderingMask flags = {},
                Rect2D render_area = {},
                uint32_t layer_count = {},
                uint32_t view_mask = {},
                uint32_t color_attachment_count = {},
                const RenderingAttachmentInfo *p_color_attachments = {},
                const RenderingAttachmentInfo *p_depth_attachment = {},
                const RenderingAttachmentInfo *p_stencil_attachment = {},
                const void *next = {})
    : flags_(flags), render_area_(render_area), layer_count_(layer_count), view_mask_(view_mask),
      color_attachment_count_(color_attachment_count), p_color_attachments_(p_color_attachments), p_depth_attachment_(p_depth_attachment),
      p_stencil_attachment_(p_stencil_attachment), next_(next) {}

  RenderingInfo(const native_type &rhs) : RenderingInfo(std::bit_cast<RenderingInfo>(rhs)) {}

  RenderingInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_INFO;
  const void *next_;
  RenderingMask flags_;
  Rect2D render_area_;
  uint32_t layer_count_;
  uint32_t view_mask_;
  uint32_t color_attachment_count_;
  const RenderingAttachmentInfo *p_color_attachments_;
  const RenderingAttachmentInfo *p_depth_attachment_;
  const RenderingAttachmentInfo *p_stencil_attachment_;
};

struct PhysicalDeviceShaderAtomicFloat2FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;

  PhysicalDeviceShaderAtomicFloat2FeaturesEXT(bool32 shader_buffer_float16atomics = {},
                                              bool32 shader_buffer_float16atomic_add = {},
                                              bool32 shader_buffer_float16atomic_min_max = {},
                                              bool32 shader_buffer_float32atomic_min_max = {},
                                              bool32 shader_buffer_float64atomic_min_max = {},
                                              bool32 shader_shared_float16atomics = {},
                                              bool32 shader_shared_float16atomic_add = {},
                                              bool32 shader_shared_float16atomic_min_max = {},
                                              bool32 shader_shared_float32atomic_min_max = {},
                                              bool32 shader_shared_float64atomic_min_max = {},
                                              bool32 shader_image_float32atomic_min_max = {},
                                              bool32 sparse_image_float32atomic_min_max = {},
                                              void *next = {})
    : shader_buffer_float16atomics_(shader_buffer_float16atomics), shader_buffer_float16atomic_add_(shader_buffer_float16atomic_add),
      shader_buffer_float16atomic_min_max_(shader_buffer_float16atomic_min_max),
      shader_buffer_float32atomic_min_max_(shader_buffer_float32atomic_min_max),
      shader_buffer_float64atomic_min_max_(shader_buffer_float64atomic_min_max),
      shader_shared_float16atomics_(shader_shared_float16atomics), shader_shared_float16atomic_add_(shader_shared_float16atomic_add),
      shader_shared_float16atomic_min_max_(shader_shared_float16atomic_min_max),
      shader_shared_float32atomic_min_max_(shader_shared_float32atomic_min_max),
      shader_shared_float64atomic_min_max_(shader_shared_float64atomic_min_max),
      shader_image_float32atomic_min_max_(shader_image_float32atomic_min_max),
      sparse_image_float32atomic_min_max_(sparse_image_float32atomic_min_max), next_(next) {}

  PhysicalDeviceShaderAtomicFloat2FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderAtomicFloat2FeaturesEXT(std::bit_cast<PhysicalDeviceShaderAtomicFloat2FeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderAtomicFloat2FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderAtomicFloat2FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderAtomicFloat2FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;
  void *next_;
  bool32 shader_buffer_float16atomics_;
  bool32 shader_buffer_float16atomic_add_;
  bool32 shader_buffer_float16atomic_min_max_;
  bool32 shader_buffer_float32atomic_min_max_;
  bool32 shader_buffer_float64atomic_min_max_;
  bool32 shader_shared_float16atomics_;
  bool32 shader_shared_float16atomic_add_;
  bool32 shader_shared_float16atomic_min_max_;
  bool32 shader_shared_float32atomic_min_max_;
  bool32 shader_shared_float64atomic_min_max_;
  bool32 shader_image_float32atomic_min_max_;
  bool32 sparse_image_float32atomic_min_max_;
};

struct DebugReportCallbackCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;

  using native_type = VkDebugReportCallbackCreateInfoEXT;

  DebugReportCallbackCreateInfoEXT(DebugReportMask flags = {},
                                   PFN_vkDebugReportCallbackEXT pfn_callback = {},
                                   void *p_user_data = {},
                                   const void *next = {})
    : flags_(flags), pfn_callback_(pfn_callback), p_user_data_(p_user_data), next_(next) {}

  DebugReportCallbackCreateInfoEXT(const native_type &rhs)
    : DebugReportCallbackCreateInfoEXT(std::bit_cast<DebugReportCallbackCreateInfoEXT>(rhs)) {}

  DebugReportCallbackCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugReportCallbackCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugReportCallbackCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
  const void *next_;
  DebugReportMask flags_;
  PFN_vkDebugReportCallbackEXT pfn_callback_;
  void *p_user_data_;
};

struct PhysicalDeviceShaderObjectPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceShaderObjectPropertiesEXT;

  PhysicalDeviceShaderObjectPropertiesEXT() = default;

  PhysicalDeviceShaderObjectPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceShaderObjectPropertiesEXT(std::bit_cast<PhysicalDeviceShaderObjectPropertiesEXT>(rhs)) {}

  PhysicalDeviceShaderObjectPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderObjectPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderObjectPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT;
  void *next_ = {};
  std::array<uint8_t, VK_UUID_SIZE> shader_binary_uuid_ = {};
  uint32_t shader_binary_version_ = {};
};

struct PhysicalDeviceMaintenance7FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR;

  using native_type = VkPhysicalDeviceMaintenance7FeaturesKHR;

  PhysicalDeviceMaintenance7FeaturesKHR(bool32 maintenance7 = {}, void *next = {}) : maintenance7_(maintenance7), next_(next) {}

  PhysicalDeviceMaintenance7FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceMaintenance7FeaturesKHR(std::bit_cast<PhysicalDeviceMaintenance7FeaturesKHR>(rhs)) {}

  PhysicalDeviceMaintenance7FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance7FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance7FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR;
  void *next_;
  bool32 maintenance7_;
};

struct DescriptorBufferBindingPushDescriptorBufferHandleEXT {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT;

  using native_type = VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;

  DescriptorBufferBindingPushDescriptorBufferHandleEXT(VkBuffer buffer = {}, void *next = {}) : buffer_(buffer), next_(next) {}

  DescriptorBufferBindingPushDescriptorBufferHandleEXT(const native_type &rhs)
    : DescriptorBufferBindingPushDescriptorBufferHandleEXT(std::bit_cast<DescriptorBufferBindingPushDescriptorBufferHandleEXT>(rhs)) {}

  DescriptorBufferBindingPushDescriptorBufferHandleEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorBufferBindingPushDescriptorBufferHandleEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorBufferBindingPushDescriptorBufferHandleEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT;
  void *next_;
  VkBuffer buffer_;
};

struct ExportSemaphoreCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_EXPORT_SEMAPHORE_CREATE_INFO;

  using native_type = VkExportSemaphoreCreateInfo;

  ExportSemaphoreCreateInfo(ExternalSemaphoreHandleTypeMask handle_types = {}, const void *next = {})
    : handle_types_(handle_types), next_(next) {}

  ExportSemaphoreCreateInfo(const native_type &rhs) : ExportSemaphoreCreateInfo(std::bit_cast<ExportSemaphoreCreateInfo>(rhs)) {}

  ExportSemaphoreCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExportSemaphoreCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ExportSemaphoreCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXPORT_SEMAPHORE_CREATE_INFO;
  const void *next_;
  ExternalSemaphoreHandleTypeMask handle_types_;
};

struct MemoryRequirements {

  using native_type = VkMemoryRequirements;

  MemoryRequirements() = default;

  MemoryRequirements(const native_type &rhs) : MemoryRequirements(std::bit_cast<MemoryRequirements>(rhs)) {}

  MemoryRequirements &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryRequirements>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryRequirements &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceSize size_ = {};
  DeviceSize alignment_ = {};
  uint32_t memory_type_bits_ = {};
};

struct DeviceGroupSubmitInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_SUBMIT_INFO;

  using native_type = VkDeviceGroupSubmitInfo;

  DeviceGroupSubmitInfo(uint32_t wait_semaphore_count = {},
                        const uint32_t *p_wait_semaphore_device_indices = {},
                        uint32_t command_buffer_count = {},
                        const uint32_t *p_command_buffer_device_masks = {},
                        uint32_t signal_semaphore_count = {},
                        const uint32_t *p_signal_semaphore_device_indices = {},
                        const void *next = {})
    : wait_semaphore_count_(wait_semaphore_count), p_wait_semaphore_device_indices_(p_wait_semaphore_device_indices),
      command_buffer_count_(command_buffer_count), p_command_buffer_device_masks_(p_command_buffer_device_masks),
      signal_semaphore_count_(signal_semaphore_count), p_signal_semaphore_device_indices_(p_signal_semaphore_device_indices), next_(next) {}

  DeviceGroupSubmitInfo(const native_type &rhs) : DeviceGroupSubmitInfo(std::bit_cast<DeviceGroupSubmitInfo>(rhs)) {}

  DeviceGroupSubmitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupSubmitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupSubmitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_SUBMIT_INFO;
  const void *next_;
  uint32_t wait_semaphore_count_;
  const uint32_t *p_wait_semaphore_device_indices_;
  uint32_t command_buffer_count_;
  const uint32_t *p_command_buffer_device_masks_;
  uint32_t signal_semaphore_count_;
  const uint32_t *p_signal_semaphore_device_indices_;
};

struct VideoDecodeH264CapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H264_CAPABILITIES_KHR;

  using native_type = VkVideoDecodeH264CapabilitiesKHR;

  VideoDecodeH264CapabilitiesKHR() = default;

  VideoDecodeH264CapabilitiesKHR(const native_type &rhs)
    : VideoDecodeH264CapabilitiesKHR(std::bit_cast<VideoDecodeH264CapabilitiesKHR>(rhs)) {}

  VideoDecodeH264CapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH264CapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH264CapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H264_CAPABILITIES_KHR;
  void *next_ = {};
  StdVideoH264LevelIdc max_level_idc_ = {};
  Offset2D field_offset_granularity_ = {};
};

struct PhysicalDeviceLimits {

  using native_type = VkPhysicalDeviceLimits;

  PhysicalDeviceLimits() = default;

  PhysicalDeviceLimits(const native_type &rhs) : PhysicalDeviceLimits(std::bit_cast<PhysicalDeviceLimits>(rhs)) {}

  PhysicalDeviceLimits &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLimits>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLimits &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t max_image_dimension1d_ = {};
  uint32_t max_image_dimension2d_ = {};
  uint32_t max_image_dimension3d_ = {};
  uint32_t max_image_dimension_cube_ = {};
  uint32_t max_image_array_layers_ = {};
  uint32_t max_texel_buffer_elements_ = {};
  uint32_t max_uniform_buffer_range_ = {};
  uint32_t max_storage_buffer_range_ = {};
  uint32_t max_push_constants_size_ = {};
  uint32_t max_memory_allocation_count_ = {};
  uint32_t max_sampler_allocation_count_ = {};
  DeviceSize buffer_image_granularity_ = {};
  DeviceSize sparse_address_space_size_ = {};
  uint32_t max_bound_descriptor_sets_ = {};
  uint32_t max_per_stage_descriptor_samplers_ = {};
  uint32_t max_per_stage_descriptor_uniform_buffers_ = {};
  uint32_t max_per_stage_descriptor_storage_buffers_ = {};
  uint32_t max_per_stage_descriptor_sampled_images_ = {};
  uint32_t max_per_stage_descriptor_storage_images_ = {};
  uint32_t max_per_stage_descriptor_input_attachments_ = {};
  uint32_t max_per_stage_resources_ = {};
  uint32_t max_descriptor_set_samplers_ = {};
  uint32_t max_descriptor_set_uniform_buffers_ = {};
  uint32_t max_descriptor_set_uniform_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_storage_buffers_ = {};
  uint32_t max_descriptor_set_storage_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_sampled_images_ = {};
  uint32_t max_descriptor_set_storage_images_ = {};
  uint32_t max_descriptor_set_input_attachments_ = {};
  uint32_t max_vertex_input_attributes_ = {};
  uint32_t max_vertex_input_bindings_ = {};
  uint32_t max_vertex_input_attribute_offset_ = {};
  uint32_t max_vertex_input_binding_stride_ = {};
  uint32_t max_vertex_output_components_ = {};
  uint32_t max_tessellation_generation_level_ = {};
  uint32_t max_tessellation_patch_size_ = {};
  uint32_t max_tessellation_control_per_vertex_input_components_ = {};
  uint32_t max_tessellation_control_per_vertex_output_components_ = {};
  uint32_t max_tessellation_control_per_patch_output_components_ = {};
  uint32_t max_tessellation_control_total_output_components_ = {};
  uint32_t max_tessellation_evaluation_input_components_ = {};
  uint32_t max_tessellation_evaluation_output_components_ = {};
  uint32_t max_geometry_shader_invocations_ = {};
  uint32_t max_geometry_input_components_ = {};
  uint32_t max_geometry_output_components_ = {};
  uint32_t max_geometry_output_vertices_ = {};
  uint32_t max_geometry_total_output_components_ = {};
  uint32_t max_fragment_input_components_ = {};
  uint32_t max_fragment_output_attachments_ = {};
  uint32_t max_fragment_dual_src_attachments_ = {};
  uint32_t max_fragment_combined_output_resources_ = {};
  uint32_t max_compute_shared_memory_size_ = {};
  std::array<uint32_t, 3> max_compute_work_group_count_ = {};
  uint32_t max_compute_work_group_invocations_ = {};
  std::array<uint32_t, 3> max_compute_work_group_size_ = {};
  uint32_t sub_pixel_precision_bits_ = {};
  uint32_t sub_texel_precision_bits_ = {};
  uint32_t mipmap_precision_bits_ = {};
  uint32_t max_draw_indexed_index_value_ = {};
  uint32_t max_draw_indirect_count_ = {};
  float max_sampler_lod_bias_ = {};
  float max_sampler_anisotropy_ = {};
  uint32_t max_viewports_ = {};
  std::array<uint32_t, 2> max_viewport_dimensions_ = {};
  std::array<float, 2> viewport_bounds_range_ = {};
  uint32_t viewport_sub_pixel_bits_ = {};
  size_t min_memory_map_alignment_ = {};
  DeviceSize min_texel_buffer_offset_alignment_ = {};
  DeviceSize min_uniform_buffer_offset_alignment_ = {};
  DeviceSize min_storage_buffer_offset_alignment_ = {};
  int32_t min_texel_offset_ = {};
  uint32_t max_texel_offset_ = {};
  int32_t min_texel_gather_offset_ = {};
  uint32_t max_texel_gather_offset_ = {};
  float min_interpolation_offset_ = {};
  float max_interpolation_offset_ = {};
  uint32_t sub_pixel_interpolation_offset_bits_ = {};
  uint32_t max_framebuffer_width_ = {};
  uint32_t max_framebuffer_height_ = {};
  uint32_t max_framebuffer_layers_ = {};
  SampleCountMask framebuffer_color_sample_counts_ = {};
  SampleCountMask framebuffer_depth_sample_counts_ = {};
  SampleCountMask framebuffer_stencil_sample_counts_ = {};
  SampleCountMask framebuffer_no_attachments_sample_counts_ = {};
  uint32_t max_color_attachments_ = {};
  SampleCountMask sampled_image_color_sample_counts_ = {};
  SampleCountMask sampled_image_integer_sample_counts_ = {};
  SampleCountMask sampled_image_depth_sample_counts_ = {};
  SampleCountMask sampled_image_stencil_sample_counts_ = {};
  SampleCountMask storage_image_sample_counts_ = {};
  uint32_t max_sample_mask_words_ = {};
  bool32 timestamp_compute_and_graphics_ = {};
  float timestamp_period_ = {};
  uint32_t max_clip_distances_ = {};
  uint32_t max_cull_distances_ = {};
  uint32_t max_combined_clip_and_cull_distances_ = {};
  uint32_t discrete_queue_priorities_ = {};
  std::array<float, 2> point_size_range_ = {};
  std::array<float, 2> line_width_range_ = {};
  float point_size_granularity_ = {};
  float line_width_granularity_ = {};
  bool32 strict_lines_ = {};
  bool32 standard_sample_locations_ = {};
  DeviceSize optimal_buffer_copy_offset_alignment_ = {};
  DeviceSize optimal_buffer_copy_row_pitch_alignment_ = {};
  DeviceSize non_coherent_atom_size_ = {};
};

struct PhysicalDeviceSparseProperties {

  using native_type = VkPhysicalDeviceSparseProperties;

  PhysicalDeviceSparseProperties() = default;

  PhysicalDeviceSparseProperties(const native_type &rhs)
    : PhysicalDeviceSparseProperties(std::bit_cast<PhysicalDeviceSparseProperties>(rhs)) {}

  PhysicalDeviceSparseProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSparseProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSparseProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  bool32 residency_standard2dblock_shape_ = {};
  bool32 residency_standard2dmultisample_block_shape_ = {};
  bool32 residency_standard3dblock_shape_ = {};
  bool32 residency_aligned_mip_size_ = {};
  bool32 residency_non_resident_strict_ = {};
};

struct PhysicalDeviceProperties {

  using native_type = VkPhysicalDeviceProperties;

  PhysicalDeviceProperties() = default;

  PhysicalDeviceProperties(const native_type &rhs) : PhysicalDeviceProperties(std::bit_cast<PhysicalDeviceProperties>(rhs)) {}

  PhysicalDeviceProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t api_version_ = {};
  uint32_t driver_version_ = {};
  uint32_t vendor_id_ = {};
  uint32_t device_id_ = {};
  PhysicalDeviceType device_type_ = {};
  std::array<char, VK_MAX_PHYSICAL_DEVICE_NAME_SIZE> device_name_ = {};
  std::array<uint8_t, VK_UUID_SIZE> pipeline_cache_uuid_ = {};
  PhysicalDeviceLimits limits_ = {};
  PhysicalDeviceSparseProperties sparse_properties_ = {};
};

struct PhysicalDeviceProperties2 {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PROPERTIES_2;

  using native_type = VkPhysicalDeviceProperties2;

  PhysicalDeviceProperties2() = default;

  PhysicalDeviceProperties2(const native_type &rhs) : PhysicalDeviceProperties2(std::bit_cast<PhysicalDeviceProperties2>(rhs)) {}

  PhysicalDeviceProperties2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceProperties2>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceProperties2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PROPERTIES_2;
  void *next_ = {};
  PhysicalDeviceProperties properties_ = {};
};

struct PhysicalDeviceLayeredApiVulkanPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceLayeredApiVulkanPropertiesKHR;

  PhysicalDeviceLayeredApiVulkanPropertiesKHR() = default;

  PhysicalDeviceLayeredApiVulkanPropertiesKHR(const native_type &rhs)
    : PhysicalDeviceLayeredApiVulkanPropertiesKHR(std::bit_cast<PhysicalDeviceLayeredApiVulkanPropertiesKHR>(rhs)) {}

  PhysicalDeviceLayeredApiVulkanPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLayeredApiVulkanPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLayeredApiVulkanPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR;
  void *next_ = {};
  PhysicalDeviceProperties2 properties_ = {};
};

struct PhysicalDevicePerStageDescriptorSetFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV;

  using native_type = VkPhysicalDevicePerStageDescriptorSetFeaturesNV;

  PhysicalDevicePerStageDescriptorSetFeaturesNV(bool32 per_stage_descriptor_set = {}, bool32 dynamic_pipeline_layout = {}, void *next = {})
    : per_stage_descriptor_set_(per_stage_descriptor_set), dynamic_pipeline_layout_(dynamic_pipeline_layout), next_(next) {}

  PhysicalDevicePerStageDescriptorSetFeaturesNV(const native_type &rhs)
    : PhysicalDevicePerStageDescriptorSetFeaturesNV(std::bit_cast<PhysicalDevicePerStageDescriptorSetFeaturesNV>(rhs)) {}

  PhysicalDevicePerStageDescriptorSetFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePerStageDescriptorSetFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePerStageDescriptorSetFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV;
  void *next_;
  bool32 per_stage_descriptor_set_;
  bool32 dynamic_pipeline_layout_;
};

struct SemaphoreGetFdInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_SEMAPHORE_GET_FD_INFO_KHR;

  using native_type = VkSemaphoreGetFdInfoKHR;

  SemaphoreGetFdInfoKHR(VkSemaphore semaphore = {}, ExternalSemaphoreHandleTypeMaskBit handle_type = {}, const void *next = {})
    : semaphore_(semaphore), handle_type_(handle_type), next_(next) {}

  SemaphoreGetFdInfoKHR(const native_type &rhs) : SemaphoreGetFdInfoKHR(std::bit_cast<SemaphoreGetFdInfoKHR>(rhs)) {}

  SemaphoreGetFdInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SemaphoreGetFdInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const SemaphoreGetFdInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SEMAPHORE_GET_FD_INFO_KHR;
  const void *next_;
  VkSemaphore semaphore_;
  ExternalSemaphoreHandleTypeMaskBit handle_type_;
};

struct BindAccelerationStructureMemoryInfoNV {

  static constexpr StructureType structure_type = StructureType::E_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;

  using native_type = VkBindAccelerationStructureMemoryInfoNV;

  BindAccelerationStructureMemoryInfoNV(VkAccelerationStructureNV acceleration_structure = {},
                                        VkDeviceMemory memory = {},
                                        DeviceSize memory_offset = {},
                                        uint32_t device_index_count = {},
                                        const uint32_t *p_device_indices = {},
                                        const void *next = {})
    : acceleration_structure_(acceleration_structure), memory_(memory), memory_offset_(memory_offset),
      device_index_count_(device_index_count), p_device_indices_(p_device_indices), next_(next) {}

  BindAccelerationStructureMemoryInfoNV(const native_type &rhs)
    : BindAccelerationStructureMemoryInfoNV(std::bit_cast<BindAccelerationStructureMemoryInfoNV>(rhs)) {}

  BindAccelerationStructureMemoryInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindAccelerationStructureMemoryInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const BindAccelerationStructureMemoryInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
  const void *next_;
  VkAccelerationStructureNV acceleration_structure_;
  VkDeviceMemory memory_;
  DeviceSize memory_offset_;
  uint32_t device_index_count_;
  const uint32_t *p_device_indices_;
};

struct GeneratedCommandsMemoryRequirementsInfoNV {

  static constexpr StructureType structure_type = StructureType::E_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;

  using native_type = VkGeneratedCommandsMemoryRequirementsInfoNV;

  GeneratedCommandsMemoryRequirementsInfoNV(PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                                            VkPipeline pipeline = {},
                                            VkIndirectCommandsLayoutNV indirect_commands_layout = {},
                                            uint32_t max_sequences_count = {},
                                            const void *next = {})
    : pipeline_bind_point_(pipeline_bind_point), pipeline_(pipeline), indirect_commands_layout_(indirect_commands_layout),
      max_sequences_count_(max_sequences_count), next_(next) {}

  GeneratedCommandsMemoryRequirementsInfoNV(const native_type &rhs)
    : GeneratedCommandsMemoryRequirementsInfoNV(std::bit_cast<GeneratedCommandsMemoryRequirementsInfoNV>(rhs)) {}

  GeneratedCommandsMemoryRequirementsInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GeneratedCommandsMemoryRequirementsInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const GeneratedCommandsMemoryRequirementsInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
  const void *next_;
  PipelineBindPoint pipeline_bind_point_;
  VkPipeline pipeline_;
  VkIndirectCommandsLayoutNV indirect_commands_layout_;
  uint32_t max_sequences_count_;
};

struct CopyMemoryToAccelerationStructureInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;

  using native_type = VkCopyMemoryToAccelerationStructureInfoKHR;

  CopyMemoryToAccelerationStructureInfoKHR(VkDeviceOrHostAddressConstKHR src = {},
                                           VkAccelerationStructureKHR dst = {},
                                           CopyAccelerationStructureMode mode = CopyAccelerationStructureMode::E_CLONE_KHR,
                                           const void *next = {})
    : src_(src), dst_(dst), mode_(mode), next_(next) {}

  CopyMemoryToAccelerationStructureInfoKHR(const native_type &rhs)
    : CopyMemoryToAccelerationStructureInfoKHR(std::bit_cast<CopyMemoryToAccelerationStructureInfoKHR>(rhs)) {}

  CopyMemoryToAccelerationStructureInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMemoryToAccelerationStructureInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMemoryToAccelerationStructureInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
  const void *next_;
  VkDeviceOrHostAddressConstKHR src_;
  VkAccelerationStructureKHR dst_;
  CopyAccelerationStructureMode mode_;
};

struct DepthBiasRepresentationInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEPTH_BIAS_REPRESENTATION_INFO_EXT;

  using native_type = VkDepthBiasRepresentationInfoEXT;

  DepthBiasRepresentationInfoEXT(
    DepthBiasRepresentation depth_bias_representation = DepthBiasRepresentation::E_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT,
    bool32 depth_bias_exact = {},
    const void *next = {})
    : depth_bias_representation_(depth_bias_representation), depth_bias_exact_(depth_bias_exact), next_(next) {}

  DepthBiasRepresentationInfoEXT(const native_type &rhs)
    : DepthBiasRepresentationInfoEXT(std::bit_cast<DepthBiasRepresentationInfoEXT>(rhs)) {}

  DepthBiasRepresentationInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DepthBiasRepresentationInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DepthBiasRepresentationInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEPTH_BIAS_REPRESENTATION_INFO_EXT;
  const void *next_;
  DepthBiasRepresentation depth_bias_representation_;
  bool32 depth_bias_exact_;
};

struct SparseImageFormatProperties {

  using native_type = VkSparseImageFormatProperties;

  SparseImageFormatProperties() = default;

  SparseImageFormatProperties(const native_type &rhs) : SparseImageFormatProperties(std::bit_cast<SparseImageFormatProperties>(rhs)) {}

  SparseImageFormatProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageFormatProperties>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageFormatProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageAspectMask aspect_mask_ = {};
  Extent3D image_granularity_ = {};
  SparseImageFormatMask flags_ = {};
};

struct SparseImageMemoryRequirements {

  using native_type = VkSparseImageMemoryRequirements;

  SparseImageMemoryRequirements() = default;

  SparseImageMemoryRequirements(const native_type &rhs)
    : SparseImageMemoryRequirements(std::bit_cast<SparseImageMemoryRequirements>(rhs)) {}

  SparseImageMemoryRequirements &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageMemoryRequirements>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageMemoryRequirements &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  SparseImageFormatProperties format_properties_ = {};
  uint32_t image_mip_tail_first_lod_ = {};
  DeviceSize image_mip_tail_size_ = {};
  DeviceSize image_mip_tail_offset_ = {};
  DeviceSize image_mip_tail_stride_ = {};
};

struct DeviceGroupBindSparseInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_BIND_SPARSE_INFO;

  using native_type = VkDeviceGroupBindSparseInfo;

  DeviceGroupBindSparseInfo(uint32_t resource_device_index = {}, uint32_t memory_device_index = {}, const void *next = {})
    : resource_device_index_(resource_device_index), memory_device_index_(memory_device_index), next_(next) {}

  DeviceGroupBindSparseInfo(const native_type &rhs) : DeviceGroupBindSparseInfo(std::bit_cast<DeviceGroupBindSparseInfo>(rhs)) {}

  DeviceGroupBindSparseInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupBindSparseInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupBindSparseInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_BIND_SPARSE_INFO;
  const void *next_;
  uint32_t resource_device_index_;
  uint32_t memory_device_index_;
};

struct DeviceBufferMemoryRequirements {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_BUFFER_MEMORY_REQUIREMENTS;

  using native_type = VkDeviceBufferMemoryRequirements;

  DeviceBufferMemoryRequirements(const BufferCreateInfo *p_create_info = {}, const void *next = {})
    : p_create_info_(p_create_info), next_(next) {}

  DeviceBufferMemoryRequirements(const native_type &rhs)
    : DeviceBufferMemoryRequirements(std::bit_cast<DeviceBufferMemoryRequirements>(rhs)) {}

  DeviceBufferMemoryRequirements &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceBufferMemoryRequirements>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceBufferMemoryRequirements &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_BUFFER_MEMORY_REQUIREMENTS;
  const void *next_;
  const BufferCreateInfo *p_create_info_;
};

struct BindImageMemoryDeviceGroupInfo {

  static constexpr StructureType structure_type = StructureType::E_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;

  using native_type = VkBindImageMemoryDeviceGroupInfo;

  BindImageMemoryDeviceGroupInfo(uint32_t device_index_count = {},
                                 const uint32_t *p_device_indices = {},
                                 uint32_t split_instance_bind_region_count = {},
                                 const Rect2D *p_split_instance_bind_regions = {},
                                 const void *next = {})
    : device_index_count_(device_index_count), p_device_indices_(p_device_indices),
      split_instance_bind_region_count_(split_instance_bind_region_count), p_split_instance_bind_regions_(p_split_instance_bind_regions),
      next_(next) {}

  BindImageMemoryDeviceGroupInfo(const native_type &rhs)
    : BindImageMemoryDeviceGroupInfo(std::bit_cast<BindImageMemoryDeviceGroupInfo>(rhs)) {}

  BindImageMemoryDeviceGroupInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindImageMemoryDeviceGroupInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BindImageMemoryDeviceGroupInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
  const void *next_;
  uint32_t device_index_count_;
  const uint32_t *p_device_indices_;
  uint32_t split_instance_bind_region_count_;
  const Rect2D *p_split_instance_bind_regions_;
};

struct SubpassDependency2 {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_DEPENDENCY_2;

  using native_type = VkSubpassDependency2;

  SubpassDependency2(uint32_t src_subpass = {},
                     uint32_t dst_subpass = {},
                     PipelineStageMask src_stage_mask = {},
                     PipelineStageMask dst_stage_mask = {},
                     AccessMask src_access_mask = {},
                     AccessMask dst_access_mask = {},
                     DependencyMask dependency_flags = {},
                     int32_t view_offset = {},
                     const void *next = {})
    : src_subpass_(src_subpass), dst_subpass_(dst_subpass), src_stage_mask_(src_stage_mask), dst_stage_mask_(dst_stage_mask),
      src_access_mask_(src_access_mask), dst_access_mask_(dst_access_mask), dependency_flags_(dependency_flags), view_offset_(view_offset),
      next_(next) {}

  SubpassDependency2(const native_type &rhs) : SubpassDependency2(std::bit_cast<SubpassDependency2>(rhs)) {}

  SubpassDependency2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassDependency2>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassDependency2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_DEPENDENCY_2;
  const void *next_;
  uint32_t src_subpass_;
  uint32_t dst_subpass_;
  PipelineStageMask src_stage_mask_;
  PipelineStageMask dst_stage_mask_;
  AccessMask src_access_mask_;
  AccessMask dst_access_mask_;
  DependencyMask dependency_flags_;
  int32_t view_offset_;
};

struct DeviceGroupCommandBufferBeginInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;

  using native_type = VkDeviceGroupCommandBufferBeginInfo;

  DeviceGroupCommandBufferBeginInfo(uint32_t device_mask = {}, const void *next = {}) : device_mask_(device_mask), next_(next) {}

  DeviceGroupCommandBufferBeginInfo(const native_type &rhs)
    : DeviceGroupCommandBufferBeginInfo(std::bit_cast<DeviceGroupCommandBufferBeginInfo>(rhs)) {}

  DeviceGroupCommandBufferBeginInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupCommandBufferBeginInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupCommandBufferBeginInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
  const void *next_;
  uint32_t device_mask_;
};

struct PhysicalDeviceImageRobustnessFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;

  using native_type = VkPhysicalDeviceImageRobustnessFeatures;

  PhysicalDeviceImageRobustnessFeatures(bool32 robust_image_access = {}, void *next = {})
    : robust_image_access_(robust_image_access), next_(next) {}

  PhysicalDeviceImageRobustnessFeatures(const native_type &rhs)
    : PhysicalDeviceImageRobustnessFeatures(std::bit_cast<PhysicalDeviceImageRobustnessFeatures>(rhs)) {}

  PhysicalDeviceImageRobustnessFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageRobustnessFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageRobustnessFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
  void *next_;
  bool32 robust_image_access_;
};

struct PipelineCoverageModulationStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineCoverageModulationStateCreateInfoNV;

  PipelineCoverageModulationStateCreateInfoNV(PipelineCoverageModulationStateCreateMask flags = {},
                                              CoverageModulationMode coverage_modulation_mode = CoverageModulationMode::E_NONE_NV,
                                              bool32 coverage_modulation_table_enable = {},
                                              uint32_t coverage_modulation_table_count = {},
                                              const float *p_coverage_modulation_table = {},
                                              const void *next = {})
    : flags_(flags), coverage_modulation_mode_(coverage_modulation_mode),
      coverage_modulation_table_enable_(coverage_modulation_table_enable),
      coverage_modulation_table_count_(coverage_modulation_table_count), p_coverage_modulation_table_(p_coverage_modulation_table),
      next_(next) {}

  PipelineCoverageModulationStateCreateInfoNV(const native_type &rhs)
    : PipelineCoverageModulationStateCreateInfoNV(std::bit_cast<PipelineCoverageModulationStateCreateInfoNV>(rhs)) {}

  PipelineCoverageModulationStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCoverageModulationStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCoverageModulationStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
  const void *next_;
  PipelineCoverageModulationStateCreateMask flags_;
  CoverageModulationMode coverage_modulation_mode_;
  bool32 coverage_modulation_table_enable_;
  uint32_t coverage_modulation_table_count_;
  const float *p_coverage_modulation_table_;
};

struct PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;

  PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(bool32 shader_relaxed_extended_instruction = {}, void *next = {})
    : shader_relaxed_extended_instruction_(shader_relaxed_extended_instruction), next_(next) {}

  PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(
        std::bit_cast<PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR;
  void *next_;
  bool32 shader_relaxed_extended_instruction_;
};

struct CommandBufferAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_ALLOCATE_INFO;

  using native_type = VkCommandBufferAllocateInfo;

  CommandBufferAllocateInfo(VkCommandPool command_pool = {},
                            CommandBufferLevel level = CommandBufferLevel::E_PRIMARY,
                            uint32_t command_buffer_count = {},
                            const void *next = {})
    : command_pool_(command_pool), level_(level), command_buffer_count_(command_buffer_count), next_(next) {}

  CommandBufferAllocateInfo(const native_type &rhs) : CommandBufferAllocateInfo(std::bit_cast<CommandBufferAllocateInfo>(rhs)) {}

  CommandBufferAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_ALLOCATE_INFO;
  const void *next_;
  VkCommandPool command_pool_;
  CommandBufferLevel level_;
  uint32_t command_buffer_count_;
};

struct BaseInStructure {

  using native_type = VkBaseInStructure;

  BaseInStructure(StructureType structure_type = StructureType::E_APPLICATION_INFO, const struct BaseInStructure *next = {})
    : structure_type_(structure_type), next_(next) {}

  BaseInStructure(const native_type &rhs) : BaseInStructure(std::bit_cast<BaseInStructure>(rhs)) {}

  BaseInStructure &operator=(const native_type &rhs) {
    *this = std::bit_cast<BaseInStructure>(rhs);
    return *this;
  }

  auto operator<=>(const BaseInStructure &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_;
  const struct BaseInStructure *next_;
};

struct FenceGetFdInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_FENCE_GET_FD_INFO_KHR;

  using native_type = VkFenceGetFdInfoKHR;

  FenceGetFdInfoKHR(VkFence fence = {}, ExternalFenceHandleTypeMaskBit handle_type = {}, const void *next = {})
    : fence_(fence), handle_type_(handle_type), next_(next) {}

  FenceGetFdInfoKHR(const native_type &rhs) : FenceGetFdInfoKHR(std::bit_cast<FenceGetFdInfoKHR>(rhs)) {}

  FenceGetFdInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<FenceGetFdInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const FenceGetFdInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FENCE_GET_FD_INFO_KHR;
  const void *next_;
  VkFence fence_;
  ExternalFenceHandleTypeMaskBit handle_type_;
};

struct AccelerationStructureBuildGeometryInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;

  using native_type = VkAccelerationStructureBuildGeometryInfoKHR;

  AccelerationStructureBuildGeometryInfoKHR(AccelerationStructureType type = AccelerationStructureType::E_TOP_LEVEL_KHR,
                                            BuildAccelerationStructureMask flags = {},
                                            BuildAccelerationStructureMode mode = BuildAccelerationStructureMode::E_BUILD_KHR,
                                            VkAccelerationStructureKHR src_acceleration_structure = {},
                                            VkAccelerationStructureKHR dst_acceleration_structure = {},
                                            uint32_t geometry_count = {},
                                            const AccelerationStructureGeometryKHR *p_geometries = {},
                                            const AccelerationStructureGeometryKHR *const *pp_geometries = {},
                                            VkDeviceOrHostAddressKHR scratch_data = {},
                                            const void *next = {})
    : type_(type), flags_(flags), mode_(mode), src_acceleration_structure_(src_acceleration_structure),
      dst_acceleration_structure_(dst_acceleration_structure), geometry_count_(geometry_count), p_geometries_(p_geometries),
      pp_geometries_(pp_geometries), scratch_data_(scratch_data), next_(next) {}

  AccelerationStructureBuildGeometryInfoKHR(const native_type &rhs)
    : AccelerationStructureBuildGeometryInfoKHR(std::bit_cast<AccelerationStructureBuildGeometryInfoKHR>(rhs)) {}

  AccelerationStructureBuildGeometryInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureBuildGeometryInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureBuildGeometryInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
  const void *next_;
  AccelerationStructureType type_;
  BuildAccelerationStructureMask flags_;
  BuildAccelerationStructureMode mode_;
  VkAccelerationStructureKHR src_acceleration_structure_;
  VkAccelerationStructureKHR dst_acceleration_structure_;
  uint32_t geometry_count_;
  const AccelerationStructureGeometryKHR *p_geometries_;
  const AccelerationStructureGeometryKHR *const *pp_geometries_;
  VkDeviceOrHostAddressKHR scratch_data_;
};

struct DisplayPresentInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_PRESENT_INFO_KHR;

  using native_type = VkDisplayPresentInfoKHR;

  DisplayPresentInfoKHR(Rect2D src_rect = {}, Rect2D dst_rect = {}, bool32 persistent = {}, const void *next = {})
    : src_rect_(src_rect), dst_rect_(dst_rect), persistent_(persistent), next_(next) {}

  DisplayPresentInfoKHR(const native_type &rhs) : DisplayPresentInfoKHR(std::bit_cast<DisplayPresentInfoKHR>(rhs)) {}

  DisplayPresentInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPresentInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPresentInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_PRESENT_INFO_KHR;
  const void *next_;
  Rect2D src_rect_;
  Rect2D dst_rect_;
  bool32 persistent_;
};

struct DescriptorSetVariableDescriptorCountAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;

  using native_type = VkDescriptorSetVariableDescriptorCountAllocateInfo;

  DescriptorSetVariableDescriptorCountAllocateInfo(uint32_t descriptor_set_count = {},
                                                   const uint32_t *p_descriptor_counts = {},
                                                   const void *next = {})
    : descriptor_set_count_(descriptor_set_count), p_descriptor_counts_(p_descriptor_counts), next_(next) {}

  DescriptorSetVariableDescriptorCountAllocateInfo(const native_type &rhs)
    : DescriptorSetVariableDescriptorCountAllocateInfo(std::bit_cast<DescriptorSetVariableDescriptorCountAllocateInfo>(rhs)) {}

  DescriptorSetVariableDescriptorCountAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetVariableDescriptorCountAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetVariableDescriptorCountAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
  const void *next_;
  uint32_t descriptor_set_count_;
  const uint32_t *p_descriptor_counts_;
};

struct ApplicationInfo {

  static constexpr StructureType structure_type = StructureType::E_APPLICATION_INFO;

  using native_type = VkApplicationInfo;

  ApplicationInfo(uint32_t api_version = {},
                  const char *p_application_name = {},
                  uint32_t application_version = {},
                  const char *p_engine_name = {},
                  uint32_t engine_version = {},
                  const void *next = {})
    : api_version_(api_version), p_application_name_(p_application_name), application_version_(application_version),
      p_engine_name_(p_engine_name), engine_version_(engine_version), next_(next) {}

  ApplicationInfo(const native_type &rhs) : ApplicationInfo(std::bit_cast<ApplicationInfo>(rhs)) {}

  ApplicationInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ApplicationInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ApplicationInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_APPLICATION_INFO;
  const void *next_;
  const char *p_application_name_;
  uint32_t application_version_;
  const char *p_engine_name_;
  uint32_t engine_version_;
  uint32_t api_version_;
};

struct InstanceCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_INSTANCE_CREATE_INFO;

  using native_type = VkInstanceCreateInfo;

  InstanceCreateInfo(const ApplicationInfo *application_info = {},
                     std::span<const char *> enabled_layer_names = {},
                     std::span<const char *> enabled_extension_names = {},
                     const void *next = nullptr,
                     InstanceCreateMask mask = {})
    : next_(next), mask_(mask), application_info_(application_info), enabled_layer_count_(enabled_layer_names.size()),
      enabled_layer_names_(enabled_layer_names.data()), enabled_extension_count_(enabled_extension_names.size()),
      enabled_extension_names_(enabled_extension_names.data()) {}

  InstanceCreateInfo(const native_type &rhs) : InstanceCreateInfo(std::bit_cast<InstanceCreateInfo>(rhs)) {}

  InstanceCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<InstanceCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const InstanceCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_INSTANCE_CREATE_INFO;
  const void *next_;
  InstanceCreateMask mask_;
  const ApplicationInfo *application_info_;
  uint32_t enabled_layer_count_;
  const char *const *enabled_layer_names_;
  uint32_t enabled_extension_count_;
  const char *const *enabled_extension_names_;
};

struct PhysicalDeviceLayeredApiPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceLayeredApiPropertiesKHR;

  PhysicalDeviceLayeredApiPropertiesKHR() = default;

  PhysicalDeviceLayeredApiPropertiesKHR(const native_type &rhs)
    : PhysicalDeviceLayeredApiPropertiesKHR(std::bit_cast<PhysicalDeviceLayeredApiPropertiesKHR>(rhs)) {}

  PhysicalDeviceLayeredApiPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLayeredApiPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLayeredApiPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t vendor_id_ = {};
  uint32_t device_id_ = {};
  PhysicalDeviceLayeredApi layered_api_ = {};
  std::array<char, VK_MAX_PHYSICAL_DEVICE_NAME_SIZE> device_name_ = {};
};

struct PipelineColorBlendAttachmentState {

  using native_type = VkPipelineColorBlendAttachmentState;

  PipelineColorBlendAttachmentState(bool32 blend_enable = {},
                                    BlendFactor src_color_blend_factor = BlendFactor::E_ZERO,
                                    BlendFactor dst_color_blend_factor = BlendFactor::E_ZERO,
                                    BlendOp color_blend_op = BlendOp::E_ADD,
                                    BlendFactor src_alpha_blend_factor = BlendFactor::E_ZERO,
                                    BlendFactor dst_alpha_blend_factor = BlendFactor::E_ZERO,
                                    BlendOp alpha_blend_op = BlendOp::E_ADD,
                                    ColorComponentMask color_write_mask = {})
    : blend_enable_(blend_enable), src_color_blend_factor_(src_color_blend_factor), dst_color_blend_factor_(dst_color_blend_factor),
      color_blend_op_(color_blend_op), src_alpha_blend_factor_(src_alpha_blend_factor), dst_alpha_blend_factor_(dst_alpha_blend_factor),
      alpha_blend_op_(alpha_blend_op), color_write_mask_(color_write_mask) {}

  PipelineColorBlendAttachmentState(const native_type &rhs)
    : PipelineColorBlendAttachmentState(std::bit_cast<PipelineColorBlendAttachmentState>(rhs)) {}

  PipelineColorBlendAttachmentState &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineColorBlendAttachmentState>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineColorBlendAttachmentState &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  bool32 blend_enable_;
  BlendFactor src_color_blend_factor_;
  BlendFactor dst_color_blend_factor_;
  BlendOp color_blend_op_;
  BlendFactor src_alpha_blend_factor_;
  BlendFactor dst_alpha_blend_factor_;
  BlendOp alpha_blend_op_;
  ColorComponentMask color_write_mask_;
};

struct PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;

  using native_type = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

  PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(bool32 shader_zero_initialize_workgroup_memory = {}, void *next = {})
    : shader_zero_initialize_workgroup_memory_(shader_zero_initialize_workgroup_memory), next_(next) {}

  PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(const native_type &rhs)
    : PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(std::bit_cast<PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>(rhs)) {}

  PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;
  void *next_;
  bool32 shader_zero_initialize_workgroup_memory_;
};

struct FramebufferCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_FRAMEBUFFER_CREATE_INFO;

  using native_type = VkFramebufferCreateInfo;

  FramebufferCreateInfo(FramebufferCreateMask flags = {},
                        VkRenderPass render_pass = {},
                        uint32_t attachment_count = {},
                        const VkImageView *p_attachments = {},
                        uint32_t width = {},
                        uint32_t height = {},
                        uint32_t layers = {},
                        const void *next = {})
    : flags_(flags), render_pass_(render_pass), attachment_count_(attachment_count), p_attachments_(p_attachments), width_(width),
      height_(height), layers_(layers), next_(next) {}

  FramebufferCreateInfo(const native_type &rhs) : FramebufferCreateInfo(std::bit_cast<FramebufferCreateInfo>(rhs)) {}

  FramebufferCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<FramebufferCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const FramebufferCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FRAMEBUFFER_CREATE_INFO;
  const void *next_;
  FramebufferCreateMask flags_;
  VkRenderPass render_pass_;
  uint32_t attachment_count_;
  const VkImageView *p_attachments_;
  uint32_t width_;
  uint32_t height_;
  uint32_t layers_;
};

struct PhysicalDeviceAccelerationStructureFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;

  using native_type = VkPhysicalDeviceAccelerationStructureFeaturesKHR;

  PhysicalDeviceAccelerationStructureFeaturesKHR(bool32 acceleration_structure = {},
                                                 bool32 acceleration_structure_capture_replay = {},
                                                 bool32 acceleration_structure_indirect_build = {},
                                                 bool32 acceleration_structure_host_commands = {},
                                                 bool32 descriptor_binding_acceleration_structure_update_after_bind = {},
                                                 void *next = {})
    : acceleration_structure_(acceleration_structure), acceleration_structure_capture_replay_(acceleration_structure_capture_replay),
      acceleration_structure_indirect_build_(acceleration_structure_indirect_build),
      acceleration_structure_host_commands_(acceleration_structure_host_commands),
      descriptor_binding_acceleration_structure_update_after_bind_(descriptor_binding_acceleration_structure_update_after_bind),
      next_(next) {}

  PhysicalDeviceAccelerationStructureFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceAccelerationStructureFeaturesKHR(std::bit_cast<PhysicalDeviceAccelerationStructureFeaturesKHR>(rhs)) {}

  PhysicalDeviceAccelerationStructureFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceAccelerationStructureFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceAccelerationStructureFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
  void *next_;
  bool32 acceleration_structure_;
  bool32 acceleration_structure_capture_replay_;
  bool32 acceleration_structure_indirect_build_;
  bool32 acceleration_structure_host_commands_;
  bool32 descriptor_binding_acceleration_structure_update_after_bind_;
};

struct PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT;

  using native_type = VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;

  PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(bool32 primitives_generated_query = {},
                                                    bool32 primitives_generated_query_with_rasterizer_discard = {},
                                                    bool32 primitives_generated_query_with_non_zero_streams = {},
                                                    void *next = {})
    : primitives_generated_query_(primitives_generated_query),
      primitives_generated_query_with_rasterizer_discard_(primitives_generated_query_with_rasterizer_discard),
      primitives_generated_query_with_non_zero_streams_(primitives_generated_query_with_non_zero_streams), next_(next) {}

  PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(const native_type &rhs)
    : PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(std::bit_cast<PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>(rhs)) {}

  PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT;
  void *next_;
  bool32 primitives_generated_query_;
  bool32 primitives_generated_query_with_rasterizer_discard_;
  bool32 primitives_generated_query_with_non_zero_streams_;
};

struct SamplerYcbcrConversionCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;

  using native_type = VkSamplerYcbcrConversionCreateInfo;

  SamplerYcbcrConversionCreateInfo(Format format = Format::E_UNDEFINED,
                                   SamplerYcbcrModelConversion ycbcr_model = SamplerYcbcrModelConversion::E_RGB_IDENTITY,
                                   SamplerYcbcrRange ycbcr_range = SamplerYcbcrRange::E_ITU_FULL,
                                   ComponentMapping components = {},
                                   ChromaLocation x_chroma_offset = ChromaLocation::E_COSITED_EVEN,
                                   ChromaLocation y_chroma_offset = ChromaLocation::E_COSITED_EVEN,
                                   Filter chroma_filter = Filter::E_NEAREST,
                                   bool32 force_explicit_reconstruction = {},
                                   const void *next = {})
    : format_(format), ycbcr_model_(ycbcr_model), ycbcr_range_(ycbcr_range), components_(components), x_chroma_offset_(x_chroma_offset),
      y_chroma_offset_(y_chroma_offset), chroma_filter_(chroma_filter), force_explicit_reconstruction_(force_explicit_reconstruction),
      next_(next) {}

  SamplerYcbcrConversionCreateInfo(const native_type &rhs)
    : SamplerYcbcrConversionCreateInfo(std::bit_cast<SamplerYcbcrConversionCreateInfo>(rhs)) {}

  SamplerYcbcrConversionCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerYcbcrConversionCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerYcbcrConversionCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
  const void *next_;
  Format format_;
  SamplerYcbcrModelConversion ycbcr_model_;
  SamplerYcbcrRange ycbcr_range_;
  ComponentMapping components_;
  ChromaLocation x_chroma_offset_;
  ChromaLocation y_chroma_offset_;
  Filter chroma_filter_;
  bool32 force_explicit_reconstruction_;
};

struct PhysicalDeviceShaderSMBuiltinsPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;

  PhysicalDeviceShaderSMBuiltinsPropertiesNV() = default;

  PhysicalDeviceShaderSMBuiltinsPropertiesNV(const native_type &rhs)
    : PhysicalDeviceShaderSMBuiltinsPropertiesNV(std::bit_cast<PhysicalDeviceShaderSMBuiltinsPropertiesNV>(rhs)) {}

  PhysicalDeviceShaderSMBuiltinsPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderSMBuiltinsPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderSMBuiltinsPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
  void *next_ = {};
  uint32_t shader_smcount_ = {};
  uint32_t shader_warps_per_sm_ = {};
};

struct MultiDrawIndexedInfoEXT {

  using native_type = VkMultiDrawIndexedInfoEXT;

  MultiDrawIndexedInfoEXT(uint32_t first_index = {}, uint32_t index_count = {}, int32_t vertex_offset = {})
    : first_index_(first_index), index_count_(index_count), vertex_offset_(vertex_offset) {}

  MultiDrawIndexedInfoEXT(const native_type &rhs) : MultiDrawIndexedInfoEXT(std::bit_cast<MultiDrawIndexedInfoEXT>(rhs)) {}

  MultiDrawIndexedInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MultiDrawIndexedInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MultiDrawIndexedInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t first_index_;
  uint32_t index_count_;
  int32_t vertex_offset_;
};

struct ExternalSemaphoreProperties {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_SEMAPHORE_PROPERTIES;

  using native_type = VkExternalSemaphoreProperties;

  ExternalSemaphoreProperties() = default;

  ExternalSemaphoreProperties(const native_type &rhs) : ExternalSemaphoreProperties(std::bit_cast<ExternalSemaphoreProperties>(rhs)) {}

  ExternalSemaphoreProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalSemaphoreProperties>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalSemaphoreProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_SEMAPHORE_PROPERTIES;
  void *next_ = {};
  ExternalSemaphoreHandleTypeMask export_from_imported_handle_types_ = {};
  ExternalSemaphoreHandleTypeMask compatible_handle_types_ = {};
  ExternalSemaphoreFeatureMask external_semaphore_features_ = {};
};

struct DescriptorUpdateTemplateEntry {

  using native_type = VkDescriptorUpdateTemplateEntry;

  DescriptorUpdateTemplateEntry(uint32_t dst_binding = {},
                                uint32_t dst_array_element = {},
                                uint32_t descriptor_count = {},
                                DescriptorType descriptor_type = DescriptorType::E_SAMPLER,
                                size_t offset = {},
                                size_t stride = {})
    : dst_binding_(dst_binding), dst_array_element_(dst_array_element), descriptor_count_(descriptor_count),
      descriptor_type_(descriptor_type), offset_(offset), stride_(stride) {}

  DescriptorUpdateTemplateEntry(const native_type &rhs)
    : DescriptorUpdateTemplateEntry(std::bit_cast<DescriptorUpdateTemplateEntry>(rhs)) {}

  DescriptorUpdateTemplateEntry &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorUpdateTemplateEntry>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorUpdateTemplateEntry &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t dst_binding_;
  uint32_t dst_array_element_;
  uint32_t descriptor_count_;
  DescriptorType descriptor_type_;
  size_t offset_;
  size_t stride_;
};

struct DescriptorUpdateTemplateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;

  using native_type = VkDescriptorUpdateTemplateCreateInfo;

  DescriptorUpdateTemplateCreateInfo(DescriptorUpdateTemplateCreateMask flags = {},
                                     uint32_t descriptor_update_entry_count = {},
                                     const DescriptorUpdateTemplateEntry *p_descriptor_update_entries = {},
                                     DescriptorUpdateTemplateType template_type = DescriptorUpdateTemplateType::E_DESCRIPTOR_SET,
                                     VkDescriptorSetLayout descriptor_set_layout = {},
                                     PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                                     VkPipelineLayout pipeline_layout = {},
                                     uint32_t set = {},
                                     const void *next = {})
    : flags_(flags), descriptor_update_entry_count_(descriptor_update_entry_count),
      p_descriptor_update_entries_(p_descriptor_update_entries), template_type_(template_type),
      descriptor_set_layout_(descriptor_set_layout), pipeline_bind_point_(pipeline_bind_point), pipeline_layout_(pipeline_layout),
      set_(set), next_(next) {}

  DescriptorUpdateTemplateCreateInfo(const native_type &rhs)
    : DescriptorUpdateTemplateCreateInfo(std::bit_cast<DescriptorUpdateTemplateCreateInfo>(rhs)) {}

  DescriptorUpdateTemplateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorUpdateTemplateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorUpdateTemplateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
  const void *next_;
  DescriptorUpdateTemplateCreateMask flags_;
  uint32_t descriptor_update_entry_count_;
  const DescriptorUpdateTemplateEntry *p_descriptor_update_entries_;
  DescriptorUpdateTemplateType template_type_;
  VkDescriptorSetLayout descriptor_set_layout_;
  PipelineBindPoint pipeline_bind_point_;
  VkPipelineLayout pipeline_layout_;
  uint32_t set_;
};

struct WriteDescriptorSetAccelerationStructureNV {

  static constexpr StructureType structure_type = StructureType::E_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;

  using native_type = VkWriteDescriptorSetAccelerationStructureNV;

  WriteDescriptorSetAccelerationStructureNV(uint32_t acceleration_structure_count = {},
                                            const VkAccelerationStructureNV *p_acceleration_structures = {},
                                            const void *next = {})
    : acceleration_structure_count_(acceleration_structure_count), p_acceleration_structures_(p_acceleration_structures), next_(next) {}

  WriteDescriptorSetAccelerationStructureNV(const native_type &rhs)
    : WriteDescriptorSetAccelerationStructureNV(std::bit_cast<WriteDescriptorSetAccelerationStructureNV>(rhs)) {}

  WriteDescriptorSetAccelerationStructureNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<WriteDescriptorSetAccelerationStructureNV>(rhs);
    return *this;
  }

  auto operator<=>(const WriteDescriptorSetAccelerationStructureNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
  const void *next_;
  uint32_t acceleration_structure_count_;
  const VkAccelerationStructureNV *p_acceleration_structures_;
};

struct PhysicalDeviceTimelineSemaphoreProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;

  using native_type = VkPhysicalDeviceTimelineSemaphoreProperties;

  PhysicalDeviceTimelineSemaphoreProperties() = default;

  PhysicalDeviceTimelineSemaphoreProperties(const native_type &rhs)
    : PhysicalDeviceTimelineSemaphoreProperties(std::bit_cast<PhysicalDeviceTimelineSemaphoreProperties>(rhs)) {}

  PhysicalDeviceTimelineSemaphoreProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTimelineSemaphoreProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTimelineSemaphoreProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
  void *next_ = {};
  uint64_t max_timeline_semaphore_value_difference_ = {};
};

struct CommandBufferInheritanceInfo {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_INHERITANCE_INFO;

  using native_type = VkCommandBufferInheritanceInfo;

  CommandBufferInheritanceInfo(VkRenderPass render_pass = {},
                               uint32_t subpass = {},
                               VkFramebuffer framebuffer = {},
                               bool32 occlusion_query_enable = {},
                               QueryControlMask query_flags = {},
                               QueryPipelineStatisticMask pipeline_statistics = {},
                               const void *next = {})
    : render_pass_(render_pass), subpass_(subpass), framebuffer_(framebuffer), occlusion_query_enable_(occlusion_query_enable),
      query_flags_(query_flags), pipeline_statistics_(pipeline_statistics), next_(next) {}

  CommandBufferInheritanceInfo(const native_type &rhs) : CommandBufferInheritanceInfo(std::bit_cast<CommandBufferInheritanceInfo>(rhs)) {}

  CommandBufferInheritanceInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferInheritanceInfo>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferInheritanceInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_INHERITANCE_INFO;
  const void *next_;
  VkRenderPass render_pass_;
  uint32_t subpass_;
  VkFramebuffer framebuffer_;
  bool32 occlusion_query_enable_;
  QueryControlMask query_flags_;
  QueryPipelineStatisticMask pipeline_statistics_;
};

struct MappedMemoryRange {

  static constexpr StructureType structure_type = StructureType::E_MAPPED_MEMORY_RANGE;

  using native_type = VkMappedMemoryRange;

  MappedMemoryRange(VkDeviceMemory memory = {}, DeviceSize offset = {}, DeviceSize size = {}, const void *next = {})
    : memory_(memory), offset_(offset), size_(size), next_(next) {}

  MappedMemoryRange(const native_type &rhs) : MappedMemoryRange(std::bit_cast<MappedMemoryRange>(rhs)) {}

  MappedMemoryRange &operator=(const native_type &rhs) {
    *this = std::bit_cast<MappedMemoryRange>(rhs);
    return *this;
  }

  auto operator<=>(const MappedMemoryRange &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MAPPED_MEMORY_RANGE;
  const void *next_;
  VkDeviceMemory memory_;
  DeviceSize offset_;
  DeviceSize size_;
};

struct RayTracingShaderGroupCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;

  using native_type = VkRayTracingShaderGroupCreateInfoKHR;

  RayTracingShaderGroupCreateInfoKHR(RayTracingShaderGroupType type = RayTracingShaderGroupType::E_GENERAL_KHR,
                                     uint32_t general_shader = {},
                                     uint32_t closest_hit_shader = {},
                                     uint32_t any_hit_shader = {},
                                     uint32_t intersection_shader = {},
                                     const void *p_shader_group_capture_replay_handle = {},
                                     const void *next = {})
    : type_(type), general_shader_(general_shader), closest_hit_shader_(closest_hit_shader), any_hit_shader_(any_hit_shader),
      intersection_shader_(intersection_shader), p_shader_group_capture_replay_handle_(p_shader_group_capture_replay_handle), next_(next) {}

  RayTracingShaderGroupCreateInfoKHR(const native_type &rhs)
    : RayTracingShaderGroupCreateInfoKHR(std::bit_cast<RayTracingShaderGroupCreateInfoKHR>(rhs)) {}

  RayTracingShaderGroupCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RayTracingShaderGroupCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RayTracingShaderGroupCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
  const void *next_;
  RayTracingShaderGroupType type_;
  uint32_t general_shader_;
  uint32_t closest_hit_shader_;
  uint32_t any_hit_shader_;
  uint32_t intersection_shader_;
  const void *p_shader_group_capture_replay_handle_;
};

struct PipelineViewportStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_STATE_CREATE_INFO;

  using native_type = VkPipelineViewportStateCreateInfo;

  PipelineViewportStateCreateInfo(PipelineViewportStateCreateMask flags = {},
                                  uint32_t viewport_count = {},
                                  const Viewport *p_viewports = {},
                                  uint32_t scissor_count = {},
                                  const Rect2D *p_scissors = {},
                                  const void *next = {})
    : flags_(flags), viewport_count_(viewport_count), p_viewports_(p_viewports), scissor_count_(scissor_count), p_scissors_(p_scissors),
      next_(next) {}

  PipelineViewportStateCreateInfo(const native_type &rhs)
    : PipelineViewportStateCreateInfo(std::bit_cast<PipelineViewportStateCreateInfo>(rhs)) {}

  PipelineViewportStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
  const void *next_;
  PipelineViewportStateCreateMask flags_;
  uint32_t viewport_count_;
  const Viewport *p_viewports_;
  uint32_t scissor_count_;
  const Rect2D *p_scissors_;
};

struct PipelineRasterizationStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;

  using native_type = VkPipelineRasterizationStateCreateInfo;

  PipelineRasterizationStateCreateInfo(PipelineRasterizationStateCreateMask flags = {},
                                       bool32 depth_clamp_enable = {},
                                       bool32 rasterizer_discard_enable = {},
                                       PolygonMode polygon_mode = PolygonMode::E_FILL,
                                       CullModeMask cull_mode = {},
                                       FrontFace front_face = FrontFace::E_COUNTER_CLOCKWISE,
                                       bool32 depth_bias_enable = {},
                                       float depth_bias_constant_factor = {},
                                       float depth_bias_clamp = {},
                                       float depth_bias_slope_factor = {},
                                       float line_width = {},
                                       const void *next = {})
    : flags_(flags), depth_clamp_enable_(depth_clamp_enable), rasterizer_discard_enable_(rasterizer_discard_enable),
      polygon_mode_(polygon_mode), cull_mode_(cull_mode), front_face_(front_face), depth_bias_enable_(depth_bias_enable),
      depth_bias_constant_factor_(depth_bias_constant_factor), depth_bias_clamp_(depth_bias_clamp),
      depth_bias_slope_factor_(depth_bias_slope_factor), line_width_(line_width), next_(next) {}

  PipelineRasterizationStateCreateInfo(const native_type &rhs)
    : PipelineRasterizationStateCreateInfo(std::bit_cast<PipelineRasterizationStateCreateInfo>(rhs)) {}

  PipelineRasterizationStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
  const void *next_;
  PipelineRasterizationStateCreateMask flags_;
  bool32 depth_clamp_enable_;
  bool32 rasterizer_discard_enable_;
  PolygonMode polygon_mode_;
  CullModeMask cull_mode_;
  FrontFace front_face_;
  bool32 depth_bias_enable_;
  float depth_bias_constant_factor_;
  float depth_bias_clamp_;
  float depth_bias_slope_factor_;
  float line_width_;
};

struct StencilOpState {

  using native_type = VkStencilOpState;

  StencilOpState(StencilOp fail_op = StencilOp::E_KEEP,
                 StencilOp pass_op = StencilOp::E_KEEP,
                 StencilOp depth_fail_op = StencilOp::E_KEEP,
                 CompareOp compare_op = CompareOp::E_NEVER,
                 uint32_t compare_mask = {},
                 uint32_t write_mask = {},
                 uint32_t reference = {})
    : fail_op_(fail_op), pass_op_(pass_op), depth_fail_op_(depth_fail_op), compare_op_(compare_op), compare_mask_(compare_mask),
      write_mask_(write_mask), reference_(reference) {}

  StencilOpState(const native_type &rhs) : StencilOpState(std::bit_cast<StencilOpState>(rhs)) {}

  StencilOpState &operator=(const native_type &rhs) {
    *this = std::bit_cast<StencilOpState>(rhs);
    return *this;
  }

  auto operator<=>(const StencilOpState &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StencilOp fail_op_;
  StencilOp pass_op_;
  StencilOp depth_fail_op_;
  CompareOp compare_op_;
  uint32_t compare_mask_;
  uint32_t write_mask_;
  uint32_t reference_;
};

struct PipelineDepthStencilStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;

  using native_type = VkPipelineDepthStencilStateCreateInfo;

  PipelineDepthStencilStateCreateInfo(PipelineDepthStencilStateCreateMask flags = {},
                                      bool32 depth_test_enable = {},
                                      bool32 depth_write_enable = {},
                                      CompareOp depth_compare_op = CompareOp::E_NEVER,
                                      bool32 depth_bounds_test_enable = {},
                                      bool32 stencil_test_enable = {},
                                      StencilOpState front = {},
                                      StencilOpState back = {},
                                      float min_depth_bounds = {},
                                      float max_depth_bounds = {},
                                      const void *next = {})
    : flags_(flags), depth_test_enable_(depth_test_enable), depth_write_enable_(depth_write_enable), depth_compare_op_(depth_compare_op),
      depth_bounds_test_enable_(depth_bounds_test_enable), stencil_test_enable_(stencil_test_enable), front_(front), back_(back),
      min_depth_bounds_(min_depth_bounds), max_depth_bounds_(max_depth_bounds), next_(next) {}

  PipelineDepthStencilStateCreateInfo(const native_type &rhs)
    : PipelineDepthStencilStateCreateInfo(std::bit_cast<PipelineDepthStencilStateCreateInfo>(rhs)) {}

  PipelineDepthStencilStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineDepthStencilStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineDepthStencilStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
  const void *next_;
  PipelineDepthStencilStateCreateMask flags_;
  bool32 depth_test_enable_;
  bool32 depth_write_enable_;
  CompareOp depth_compare_op_;
  bool32 depth_bounds_test_enable_;
  bool32 stencil_test_enable_;
  StencilOpState front_;
  StencilOpState back_;
  float min_depth_bounds_;
  float max_depth_bounds_;
};

struct PipelineColorBlendStateCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;

  using native_type = VkPipelineColorBlendStateCreateInfo;

  PipelineColorBlendStateCreateInfo(PipelineColorBlendStateCreateMask flags = {},
                                    bool32 logic_op_enable = {},
                                    LogicOp logic_op = LogicOp::E_CLEAR,
                                    uint32_t attachment_count = {},
                                    const PipelineColorBlendAttachmentState *p_attachments = {},
                                    const std::array<float, 4> &blend_constants = {},
                                    const void *next = {})
    : flags_(flags), logic_op_enable_(logic_op_enable), logic_op_(logic_op), attachment_count_(attachment_count),
      p_attachments_(p_attachments), blend_constants_(blend_constants), next_(next) {}

  PipelineColorBlendStateCreateInfo(const native_type &rhs)
    : PipelineColorBlendStateCreateInfo(std::bit_cast<PipelineColorBlendStateCreateInfo>(rhs)) {}

  PipelineColorBlendStateCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineColorBlendStateCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineColorBlendStateCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
  const void *next_;
  PipelineColorBlendStateCreateMask flags_;
  bool32 logic_op_enable_;
  LogicOp logic_op_;
  uint32_t attachment_count_;
  const PipelineColorBlendAttachmentState *p_attachments_;
  std::array<float, 4> blend_constants_;
};

struct GraphicsPipelineCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_GRAPHICS_PIPELINE_CREATE_INFO;

  using native_type = VkGraphicsPipelineCreateInfo;

  GraphicsPipelineCreateInfo(PipelineCreateMask flags = {},
                             uint32_t stage_count = {},
                             const PipelineShaderStageCreateInfo *p_stages = {},
                             const PipelineVertexInputStateCreateInfo *p_vertex_input_state = {},
                             const PipelineInputAssemblyStateCreateInfo *p_input_assembly_state = {},
                             const PipelineTessellationStateCreateInfo *p_tessellation_state = {},
                             const PipelineViewportStateCreateInfo *p_viewport_state = {},
                             const PipelineRasterizationStateCreateInfo *p_rasterization_state = {},
                             const PipelineMultisampleStateCreateInfo *p_multisample_state = {},
                             const PipelineDepthStencilStateCreateInfo *p_depth_stencil_state = {},
                             const PipelineColorBlendStateCreateInfo *p_color_blend_state = {},
                             const PipelineDynamicStateCreateInfo *p_dynamic_state = {},
                             VkPipelineLayout layout = {},
                             VkRenderPass render_pass = {},
                             uint32_t subpass = {},
                             VkPipeline base_pipeline_handle = {},
                             int32_t base_pipeline_index = {},
                             const void *next = {})
    : flags_(flags), stage_count_(stage_count), p_stages_(p_stages), p_vertex_input_state_(p_vertex_input_state),
      p_input_assembly_state_(p_input_assembly_state), p_tessellation_state_(p_tessellation_state), p_viewport_state_(p_viewport_state),
      p_rasterization_state_(p_rasterization_state), p_multisample_state_(p_multisample_state),
      p_depth_stencil_state_(p_depth_stencil_state), p_color_blend_state_(p_color_blend_state), p_dynamic_state_(p_dynamic_state),
      layout_(layout), render_pass_(render_pass), subpass_(subpass), base_pipeline_handle_(base_pipeline_handle),
      base_pipeline_index_(base_pipeline_index), next_(next) {}

  GraphicsPipelineCreateInfo(const native_type &rhs) : GraphicsPipelineCreateInfo(std::bit_cast<GraphicsPipelineCreateInfo>(rhs)) {}

  GraphicsPipelineCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<GraphicsPipelineCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const GraphicsPipelineCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GRAPHICS_PIPELINE_CREATE_INFO;
  const void *next_;
  PipelineCreateMask flags_;
  uint32_t stage_count_;
  const PipelineShaderStageCreateInfo *p_stages_;
  const PipelineVertexInputStateCreateInfo *p_vertex_input_state_;
  const PipelineInputAssemblyStateCreateInfo *p_input_assembly_state_;
  const PipelineTessellationStateCreateInfo *p_tessellation_state_;
  const PipelineViewportStateCreateInfo *p_viewport_state_;
  const PipelineRasterizationStateCreateInfo *p_rasterization_state_;
  const PipelineMultisampleStateCreateInfo *p_multisample_state_;
  const PipelineDepthStencilStateCreateInfo *p_depth_stencil_state_;
  const PipelineColorBlendStateCreateInfo *p_color_blend_state_;
  const PipelineDynamicStateCreateInfo *p_dynamic_state_;
  VkPipelineLayout layout_;
  VkRenderPass render_pass_;
  uint32_t subpass_;
  VkPipeline base_pipeline_handle_;
  int32_t base_pipeline_index_;
};

struct SparseImageFormatProperties2 {

  static constexpr StructureType structure_type = StructureType::E_SPARSE_IMAGE_FORMAT_PROPERTIES_2;

  using native_type = VkSparseImageFormatProperties2;

  SparseImageFormatProperties2() = default;

  SparseImageFormatProperties2(const native_type &rhs) : SparseImageFormatProperties2(std::bit_cast<SparseImageFormatProperties2>(rhs)) {}

  SparseImageFormatProperties2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageFormatProperties2>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageFormatProperties2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
  void *next_ = {};
  SparseImageFormatProperties properties_ = {};
};

struct DisplaySurfaceCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_SURFACE_CREATE_INFO_KHR;

  using native_type = VkDisplaySurfaceCreateInfoKHR;

  DisplaySurfaceCreateInfoKHR(DisplaySurfaceCreateMask flags = {},
                              VkDisplayModeKHR display_mode = {},
                              uint32_t plane_index = {},
                              uint32_t plane_stack_index = {},
                              SurfaceTransformMaskBit transform = {},
                              float global_alpha = {},
                              DisplayPlaneAlphaMaskBit alpha_mode = {},
                              Extent2D image_extent = {},
                              const void *next = {})
    : flags_(flags), display_mode_(display_mode), plane_index_(plane_index), plane_stack_index_(plane_stack_index), transform_(transform),
      global_alpha_(global_alpha), alpha_mode_(alpha_mode), image_extent_(image_extent), next_(next) {}

  DisplaySurfaceCreateInfoKHR(const native_type &rhs) : DisplaySurfaceCreateInfoKHR(std::bit_cast<DisplaySurfaceCreateInfoKHR>(rhs)) {}

  DisplaySurfaceCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplaySurfaceCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplaySurfaceCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_SURFACE_CREATE_INFO_KHR;
  const void *next_;
  DisplaySurfaceCreateMask flags_;
  VkDisplayModeKHR display_mode_;
  uint32_t plane_index_;
  uint32_t plane_stack_index_;
  SurfaceTransformMaskBit transform_;
  float global_alpha_;
  DisplayPlaneAlphaMaskBit alpha_mode_;
  Extent2D image_extent_;
};

struct PhysicalDeviceRayQueryFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;

  using native_type = VkPhysicalDeviceRayQueryFeaturesKHR;

  PhysicalDeviceRayQueryFeaturesKHR(bool32 ray_query = {}, void *next = {}) : ray_query_(ray_query), next_(next) {}

  PhysicalDeviceRayQueryFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceRayQueryFeaturesKHR(std::bit_cast<PhysicalDeviceRayQueryFeaturesKHR>(rhs)) {}

  PhysicalDeviceRayQueryFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayQueryFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayQueryFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
  void *next_;
  bool32 ray_query_;
};

struct PipelineIndirectDeviceAddressInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV;

  using native_type = VkPipelineIndirectDeviceAddressInfoNV;

  PipelineIndirectDeviceAddressInfoNV(PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                                      VkPipeline pipeline = {},
                                      const void *next = {})
    : pipeline_bind_point_(pipeline_bind_point), pipeline_(pipeline), next_(next) {}

  PipelineIndirectDeviceAddressInfoNV(const native_type &rhs)
    : PipelineIndirectDeviceAddressInfoNV(std::bit_cast<PipelineIndirectDeviceAddressInfoNV>(rhs)) {}

  PipelineIndirectDeviceAddressInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineIndirectDeviceAddressInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineIndirectDeviceAddressInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV;
  const void *next_;
  PipelineBindPoint pipeline_bind_point_;
  VkPipeline pipeline_;
};

struct PipelineCacheHeaderVersionOne {

  using native_type = VkPipelineCacheHeaderVersionOne;

  PipelineCacheHeaderVersionOne(uint32_t header_size = {},
                                PipelineCacheHeaderVersion header_version = {},
                                uint32_t vendor_id = {},
                                uint32_t device_id = {},
                                const std::array<uint8_t, VK_UUID_SIZE> &pipeline_cache_uuid = {})
    : header_size_(header_size), header_version_(header_version), vendor_id_(vendor_id), device_id_(device_id),
      pipeline_cache_uuid_(pipeline_cache_uuid) {}

  PipelineCacheHeaderVersionOne(const native_type &rhs)
    : PipelineCacheHeaderVersionOne(std::bit_cast<PipelineCacheHeaderVersionOne>(rhs)) {}

  PipelineCacheHeaderVersionOne &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCacheHeaderVersionOne>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCacheHeaderVersionOne &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t header_size_;
  PipelineCacheHeaderVersion header_version_;
  uint32_t vendor_id_;
  uint32_t device_id_;
  std::array<uint8_t, VK_UUID_SIZE> pipeline_cache_uuid_;
};

struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;

  using native_type = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

  PhysicalDeviceSeparateDepthStencilLayoutsFeatures(bool32 separate_depth_stencil_layouts = {}, void *next = {})
    : separate_depth_stencil_layouts_(separate_depth_stencil_layouts), next_(next) {}

  PhysicalDeviceSeparateDepthStencilLayoutsFeatures(const native_type &rhs)
    : PhysicalDeviceSeparateDepthStencilLayoutsFeatures(std::bit_cast<PhysicalDeviceSeparateDepthStencilLayoutsFeatures>(rhs)) {}

  PhysicalDeviceSeparateDepthStencilLayoutsFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSeparateDepthStencilLayoutsFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSeparateDepthStencilLayoutsFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
  void *next_;
  bool32 separate_depth_stencil_layouts_;
};

struct PhysicalDeviceCooperativeMatrixPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceCooperativeMatrixPropertiesNV;

  PhysicalDeviceCooperativeMatrixPropertiesNV() = default;

  PhysicalDeviceCooperativeMatrixPropertiesNV(const native_type &rhs)
    : PhysicalDeviceCooperativeMatrixPropertiesNV(std::bit_cast<PhysicalDeviceCooperativeMatrixPropertiesNV>(rhs)) {}

  PhysicalDeviceCooperativeMatrixPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCooperativeMatrixPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCooperativeMatrixPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
  void *next_ = {};
  ShaderStageMask cooperative_matrix_supported_stages_ = {};
};

struct DescriptorPoolSize {

  using native_type = VkDescriptorPoolSize;

  DescriptorPoolSize(DescriptorType type = DescriptorType::E_SAMPLER, uint32_t descriptor_count = {})
    : type_(type), descriptor_count_(descriptor_count) {}

  DescriptorPoolSize(const native_type &rhs) : DescriptorPoolSize(std::bit_cast<DescriptorPoolSize>(rhs)) {}

  DescriptorPoolSize &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorPoolSize>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorPoolSize &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DescriptorType type_;
  uint32_t descriptor_count_;
};

struct DescriptorPoolCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_POOL_CREATE_INFO;

  using native_type = VkDescriptorPoolCreateInfo;

  DescriptorPoolCreateInfo(DescriptorPoolCreateMask flags = {},
                           uint32_t max_sets = {},
                           uint32_t pool_size_count = {},
                           const DescriptorPoolSize *p_pool_sizes = {},
                           const void *next = {})
    : flags_(flags), max_sets_(max_sets), pool_size_count_(pool_size_count), p_pool_sizes_(p_pool_sizes), next_(next) {}

  DescriptorPoolCreateInfo(const native_type &rhs) : DescriptorPoolCreateInfo(std::bit_cast<DescriptorPoolCreateInfo>(rhs)) {}

  DescriptorPoolCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorPoolCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorPoolCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_POOL_CREATE_INFO;
  const void *next_;
  DescriptorPoolCreateMask flags_;
  uint32_t max_sets_;
  uint32_t pool_size_count_;
  const DescriptorPoolSize *p_pool_sizes_;
};

struct ImportMemoryFdInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_IMPORT_MEMORY_FD_INFO_KHR;

  using native_type = VkImportMemoryFdInfoKHR;

  ImportMemoryFdInfoKHR(ExternalMemoryHandleTypeMaskBit handle_type = {}, int fd = {}, const void *next = {})
    : handle_type_(handle_type), fd_(fd), next_(next) {}

  ImportMemoryFdInfoKHR(const native_type &rhs) : ImportMemoryFdInfoKHR(std::bit_cast<ImportMemoryFdInfoKHR>(rhs)) {}

  ImportMemoryFdInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImportMemoryFdInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const ImportMemoryFdInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMPORT_MEMORY_FD_INFO_KHR;
  const void *next_;
  ExternalMemoryHandleTypeMaskBit handle_type_;
  int fd_;
};

struct PhysicalDeviceExternalMemoryHostPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceExternalMemoryHostPropertiesEXT;

  PhysicalDeviceExternalMemoryHostPropertiesEXT() = default;

  PhysicalDeviceExternalMemoryHostPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceExternalMemoryHostPropertiesEXT(std::bit_cast<PhysicalDeviceExternalMemoryHostPropertiesEXT>(rhs)) {}

  PhysicalDeviceExternalMemoryHostPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExternalMemoryHostPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExternalMemoryHostPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
  void *next_ = {};
  DeviceSize min_imported_host_pointer_alignment_ = {};
};

struct WriteDescriptorSetInlineUniformBlock {

  static constexpr StructureType structure_type = StructureType::E_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;

  using native_type = VkWriteDescriptorSetInlineUniformBlock;

  WriteDescriptorSetInlineUniformBlock(uint32_t data_size = {}, const void *p_data = {}, const void *next = {})
    : data_size_(data_size), p_data_(p_data), next_(next) {}

  WriteDescriptorSetInlineUniformBlock(const native_type &rhs)
    : WriteDescriptorSetInlineUniformBlock(std::bit_cast<WriteDescriptorSetInlineUniformBlock>(rhs)) {}

  WriteDescriptorSetInlineUniformBlock &operator=(const native_type &rhs) {
    *this = std::bit_cast<WriteDescriptorSetInlineUniformBlock>(rhs);
    return *this;
  }

  auto operator<=>(const WriteDescriptorSetInlineUniformBlock &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
  const void *next_;
  uint32_t data_size_;
  const void *p_data_;
};

struct VideoEncodeH264GopRemainingFrameInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR;

  using native_type = VkVideoEncodeH264GopRemainingFrameInfoKHR;

  VideoEncodeH264GopRemainingFrameInfoKHR(bool32 use_gop_remaining_frames = {},
                                          uint32_t gop_remaining_i = {},
                                          uint32_t gop_remaining_p = {},
                                          uint32_t gop_remaining_b = {},
                                          const void *next = {})
    : use_gop_remaining_frames_(use_gop_remaining_frames), gop_remaining_i_(gop_remaining_i), gop_remaining_p_(gop_remaining_p),
      gop_remaining_b_(gop_remaining_b), next_(next) {}

  VideoEncodeH264GopRemainingFrameInfoKHR(const native_type &rhs)
    : VideoEncodeH264GopRemainingFrameInfoKHR(std::bit_cast<VideoEncodeH264GopRemainingFrameInfoKHR>(rhs)) {}

  VideoEncodeH264GopRemainingFrameInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264GopRemainingFrameInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264GopRemainingFrameInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR;
  const void *next_;
  bool32 use_gop_remaining_frames_;
  uint32_t gop_remaining_i_;
  uint32_t gop_remaining_p_;
  uint32_t gop_remaining_b_;
};

struct GeometryAABBNV {

  static constexpr StructureType structure_type = StructureType::E_GEOMETRY_AABB_NV;

  using native_type = VkGeometryAABBNV;

  GeometryAABBNV(VkBuffer aabb_data = {}, uint32_t num_aabbs = {}, uint32_t stride = {}, DeviceSize offset = {}, const void *next = {})
    : aabb_data_(aabb_data), num_aabbs_(num_aabbs), stride_(stride), offset_(offset), next_(next) {}

  GeometryAABBNV(const native_type &rhs) : GeometryAABBNV(std::bit_cast<GeometryAABBNV>(rhs)) {}

  GeometryAABBNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GeometryAABBNV>(rhs);
    return *this;
  }

  auto operator<=>(const GeometryAABBNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GEOMETRY_AABB_NV;
  const void *next_;
  VkBuffer aabb_data_;
  uint32_t num_aabbs_;
  uint32_t stride_;
  DeviceSize offset_;
};

struct GeometryDataNV {

  using native_type = VkGeometryDataNV;

  GeometryDataNV(GeometryTrianglesNV triangles = {}, GeometryAABBNV aabbs = {}) : triangles_(triangles), aabbs_(aabbs) {}

  GeometryDataNV(const native_type &rhs) : GeometryDataNV(std::bit_cast<GeometryDataNV>(rhs)) {}

  GeometryDataNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GeometryDataNV>(rhs);
    return *this;
  }

  auto operator<=>(const GeometryDataNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  GeometryTrianglesNV triangles_;
  GeometryAABBNV aabbs_;
};

struct GeometryNV {

  static constexpr StructureType structure_type = StructureType::E_GEOMETRY_NV;

  using native_type = VkGeometryNV;

  GeometryNV(GeometryType geometry_type = GeometryType::E_TRIANGLES_KHR,
             GeometryDataNV geometry = {},
             GeometryMask flags = {},
             const void *next = {})
    : geometry_type_(geometry_type), geometry_(geometry), flags_(flags), next_(next) {}

  GeometryNV(const native_type &rhs) : GeometryNV(std::bit_cast<GeometryNV>(rhs)) {}

  GeometryNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GeometryNV>(rhs);
    return *this;
  }

  auto operator<=>(const GeometryNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GEOMETRY_NV;
  const void *next_;
  GeometryType geometry_type_;
  GeometryDataNV geometry_;
  GeometryMask flags_;
};

struct AccelerationStructureInfoNV {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_INFO_NV;

  using native_type = VkAccelerationStructureInfoNV;

  AccelerationStructureInfoNV(VkAccelerationStructureTypeNV type = {},
                              VkBuildAccelerationStructureFlagsNV flags = {},
                              uint32_t instance_count = {},
                              uint32_t geometry_count = {},
                              const GeometryNV *p_geometries = {},
                              const void *next = {})
    : type_(type), flags_(flags), instance_count_(instance_count), geometry_count_(geometry_count), p_geometries_(p_geometries),
      next_(next) {}

  AccelerationStructureInfoNV(const native_type &rhs) : AccelerationStructureInfoNV(std::bit_cast<AccelerationStructureInfoNV>(rhs)) {}

  AccelerationStructureInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_INFO_NV;
  const void *next_;
  VkAccelerationStructureTypeNV type_;
  VkBuildAccelerationStructureFlagsNV flags_;
  uint32_t instance_count_;
  uint32_t geometry_count_;
  const GeometryNV *p_geometries_;
};

struct AccelerationStructureCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_CREATE_INFO_NV;

  using native_type = VkAccelerationStructureCreateInfoNV;

  AccelerationStructureCreateInfoNV(DeviceSize compacted_size = {}, AccelerationStructureInfoNV info = {}, const void *next = {})
    : compacted_size_(compacted_size), info_(info), next_(next) {}

  AccelerationStructureCreateInfoNV(const native_type &rhs)
    : AccelerationStructureCreateInfoNV(std::bit_cast<AccelerationStructureCreateInfoNV>(rhs)) {}

  AccelerationStructureCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
  const void *next_;
  DeviceSize compacted_size_;
  AccelerationStructureInfoNV info_;
};

struct PhysicalDeviceFaultFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FAULT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceFaultFeaturesEXT;

  PhysicalDeviceFaultFeaturesEXT(bool32 device_fault = {}, bool32 device_fault_vendor_binary = {}, void *next = {})
    : device_fault_(device_fault), device_fault_vendor_binary_(device_fault_vendor_binary), next_(next) {}

  PhysicalDeviceFaultFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceFaultFeaturesEXT(std::bit_cast<PhysicalDeviceFaultFeaturesEXT>(rhs)) {}

  PhysicalDeviceFaultFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFaultFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFaultFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FAULT_FEATURES_EXT;
  void *next_;
  bool32 device_fault_;
  bool32 device_fault_vendor_binary_;
};

struct ImageDrmFormatModifierListCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;

  using native_type = VkImageDrmFormatModifierListCreateInfoEXT;

  ImageDrmFormatModifierListCreateInfoEXT(uint32_t drm_format_modifier_count = {},
                                          const uint64_t *p_drm_format_modifiers = {},
                                          const void *next = {})
    : drm_format_modifier_count_(drm_format_modifier_count), p_drm_format_modifiers_(p_drm_format_modifiers), next_(next) {}

  ImageDrmFormatModifierListCreateInfoEXT(const native_type &rhs)
    : ImageDrmFormatModifierListCreateInfoEXT(std::bit_cast<ImageDrmFormatModifierListCreateInfoEXT>(rhs)) {}

  ImageDrmFormatModifierListCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageDrmFormatModifierListCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageDrmFormatModifierListCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
  const void *next_;
  uint32_t drm_format_modifier_count_;
  const uint64_t *p_drm_format_modifiers_;
};

struct PhysicalDeviceTextureCompressionASTCHDRFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;

  using native_type = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

  PhysicalDeviceTextureCompressionASTCHDRFeatures(bool32 texture_compression_astc_hdr = {}, void *next = {})
    : texture_compression_astc_hdr_(texture_compression_astc_hdr), next_(next) {}

  PhysicalDeviceTextureCompressionASTCHDRFeatures(const native_type &rhs)
    : PhysicalDeviceTextureCompressionASTCHDRFeatures(std::bit_cast<PhysicalDeviceTextureCompressionASTCHDRFeatures>(rhs)) {}

  PhysicalDeviceTextureCompressionASTCHDRFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTextureCompressionASTCHDRFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTextureCompressionASTCHDRFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
  void *next_;
  bool32 texture_compression_astc_hdr_;
};

struct BaseOutStructure {

  using native_type = VkBaseOutStructure;

  BaseOutStructure(StructureType structure_type = StructureType::E_APPLICATION_INFO, struct BaseOutStructure *next = {})
    : structure_type_(structure_type), next_(next) {}

  BaseOutStructure(const native_type &rhs) : BaseOutStructure(std::bit_cast<BaseOutStructure>(rhs)) {}

  BaseOutStructure &operator=(const native_type &rhs) {
    *this = std::bit_cast<BaseOutStructure>(rhs);
    return *this;
  }

  auto operator<=>(const BaseOutStructure &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_;
  struct BaseOutStructure *next_;
};

struct MemoryToImageCopyEXT {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_TO_IMAGE_COPY_EXT;

  using native_type = VkMemoryToImageCopyEXT;

  MemoryToImageCopyEXT(const void *p_host_pointer = {},
                       uint32_t memory_row_length = {},
                       uint32_t memory_image_height = {},
                       ImageSubresourceLayers image_subresource = {},
                       Offset3D image_offset = {},
                       Extent3D image_extent = {},
                       const void *next = {})
    : p_host_pointer_(p_host_pointer), memory_row_length_(memory_row_length), memory_image_height_(memory_image_height),
      image_subresource_(image_subresource), image_offset_(image_offset), image_extent_(image_extent), next_(next) {}

  MemoryToImageCopyEXT(const native_type &rhs) : MemoryToImageCopyEXT(std::bit_cast<MemoryToImageCopyEXT>(rhs)) {}

  MemoryToImageCopyEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryToImageCopyEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryToImageCopyEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_TO_IMAGE_COPY_EXT;
  const void *next_;
  const void *p_host_pointer_;
  uint32_t memory_row_length_;
  uint32_t memory_image_height_;
  ImageSubresourceLayers image_subresource_;
  Offset3D image_offset_;
  Extent3D image_extent_;
};

struct PhysicalDeviceRawAccessChainsFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV;

  using native_type = VkPhysicalDeviceRawAccessChainsFeaturesNV;

  PhysicalDeviceRawAccessChainsFeaturesNV(bool32 shader_raw_access_chains = {}, void *next = {})
    : shader_raw_access_chains_(shader_raw_access_chains), next_(next) {}

  PhysicalDeviceRawAccessChainsFeaturesNV(const native_type &rhs)
    : PhysicalDeviceRawAccessChainsFeaturesNV(std::bit_cast<PhysicalDeviceRawAccessChainsFeaturesNV>(rhs)) {}

  PhysicalDeviceRawAccessChainsFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRawAccessChainsFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRawAccessChainsFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV;
  void *next_;
  bool32 shader_raw_access_chains_;
};

struct PhysicalDeviceVideoFormatInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR;

  using native_type = VkPhysicalDeviceVideoFormatInfoKHR;

  PhysicalDeviceVideoFormatInfoKHR(ImageUsageMask image_usage = {}, const void *next = {}) : image_usage_(image_usage), next_(next) {}

  PhysicalDeviceVideoFormatInfoKHR(const native_type &rhs)
    : PhysicalDeviceVideoFormatInfoKHR(std::bit_cast<PhysicalDeviceVideoFormatInfoKHR>(rhs)) {}

  PhysicalDeviceVideoFormatInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVideoFormatInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVideoFormatInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR;
  const void *next_;
  ImageUsageMask image_usage_;
};

struct SurfaceCapabilities2EXT {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_CAPABILITIES_2_EXT;

  using native_type = VkSurfaceCapabilities2EXT;

  SurfaceCapabilities2EXT() = default;

  SurfaceCapabilities2EXT(const native_type &rhs) : SurfaceCapabilities2EXT(std::bit_cast<SurfaceCapabilities2EXT>(rhs)) {}

  SurfaceCapabilities2EXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceCapabilities2EXT>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceCapabilities2EXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_CAPABILITIES_2_EXT;
  void *next_ = {};
  uint32_t min_image_count_ = {};
  uint32_t max_image_count_ = {};
  Extent2D current_extent_ = {};
  Extent2D min_image_extent_ = {};
  Extent2D max_image_extent_ = {};
  uint32_t max_image_array_layers_ = {};
  SurfaceTransformMask supported_transforms_ = {};
  SurfaceTransformMaskBit current_transform_ = {};
  CompositeAlphaMask supported_composite_alpha_ = {};
  ImageUsageMask supported_usage_flags_ = {};
  SurfaceCounterMask supported_surface_counters_ = {};
};

struct VideoDecodeCapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_CAPABILITIES_KHR;

  using native_type = VkVideoDecodeCapabilitiesKHR;

  VideoDecodeCapabilitiesKHR() = default;

  VideoDecodeCapabilitiesKHR(const native_type &rhs) : VideoDecodeCapabilitiesKHR(std::bit_cast<VideoDecodeCapabilitiesKHR>(rhs)) {}

  VideoDecodeCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_CAPABILITIES_KHR;
  void *next_ = {};
  VideoDecodeCapabilityMask flags_ = {};
};

struct VideoProfileListInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_PROFILE_LIST_INFO_KHR;

  using native_type = VkVideoProfileListInfoKHR;

  VideoProfileListInfoKHR(uint32_t profile_count = {}, const VideoProfileInfoKHR *p_profiles = {}, const void *next = {})
    : profile_count_(profile_count), p_profiles_(p_profiles), next_(next) {}

  VideoProfileListInfoKHR(const native_type &rhs) : VideoProfileListInfoKHR(std::bit_cast<VideoProfileListInfoKHR>(rhs)) {}

  VideoProfileListInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoProfileListInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoProfileListInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_PROFILE_LIST_INFO_KHR;
  const void *next_;
  uint32_t profile_count_;
  const VideoProfileInfoKHR *p_profiles_;
};

struct BindVideoSessionMemoryInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_BIND_VIDEO_SESSION_MEMORY_INFO_KHR;

  using native_type = VkBindVideoSessionMemoryInfoKHR;

  BindVideoSessionMemoryInfoKHR(uint32_t memory_bind_index = {},
                                VkDeviceMemory memory = {},
                                DeviceSize memory_offset = {},
                                DeviceSize memory_size = {},
                                const void *next = {})
    : memory_bind_index_(memory_bind_index), memory_(memory), memory_offset_(memory_offset), memory_size_(memory_size), next_(next) {}

  BindVideoSessionMemoryInfoKHR(const native_type &rhs)
    : BindVideoSessionMemoryInfoKHR(std::bit_cast<BindVideoSessionMemoryInfoKHR>(rhs)) {}

  BindVideoSessionMemoryInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindVideoSessionMemoryInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const BindVideoSessionMemoryInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_VIDEO_SESSION_MEMORY_INFO_KHR;
  const void *next_;
  uint32_t memory_bind_index_;
  VkDeviceMemory memory_;
  DeviceSize memory_offset_;
  DeviceSize memory_size_;
};

struct PhysicalDeviceConservativeRasterizationPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceConservativeRasterizationPropertiesEXT;

  PhysicalDeviceConservativeRasterizationPropertiesEXT() = default;

  PhysicalDeviceConservativeRasterizationPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceConservativeRasterizationPropertiesEXT(std::bit_cast<PhysicalDeviceConservativeRasterizationPropertiesEXT>(rhs)) {}

  PhysicalDeviceConservativeRasterizationPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceConservativeRasterizationPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceConservativeRasterizationPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
  void *next_ = {};
  float primitive_overestimation_size_ = {};
  float max_extra_primitive_overestimation_size_ = {};
  float extra_primitive_overestimation_size_granularity_ = {};
  bool32 primitive_underestimation_ = {};
  bool32 conservative_point_and_line_rasterization_ = {};
  bool32 degenerate_triangles_rasterized_ = {};
  bool32 degenerate_lines_rasterized_ = {};
  bool32 fully_covered_fragment_shader_input_variable_ = {};
  bool32 conservative_rasterization_post_depth_coverage_ = {};
};

struct FilterCubicImageViewImageFormatPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;

  using native_type = VkFilterCubicImageViewImageFormatPropertiesEXT;

  FilterCubicImageViewImageFormatPropertiesEXT() = default;

  FilterCubicImageViewImageFormatPropertiesEXT(const native_type &rhs)
    : FilterCubicImageViewImageFormatPropertiesEXT(std::bit_cast<FilterCubicImageViewImageFormatPropertiesEXT>(rhs)) {}

  FilterCubicImageViewImageFormatPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<FilterCubicImageViewImageFormatPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const FilterCubicImageViewImageFormatPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
  void *next_ = {};
  bool32 filter_cubic_ = {};
  bool32 filter_cubic_minmax_ = {};
};

struct DrawIndirectCommand {

  using native_type = VkDrawIndirectCommand;

  DrawIndirectCommand(uint32_t vertex_count = {}, uint32_t instance_count = {}, uint32_t first_vertex = {}, uint32_t first_instance = {})
    : vertex_count_(vertex_count), instance_count_(instance_count), first_vertex_(first_vertex), first_instance_(first_instance) {}

  DrawIndirectCommand(const native_type &rhs) : DrawIndirectCommand(std::bit_cast<DrawIndirectCommand>(rhs)) {}

  DrawIndirectCommand &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrawIndirectCommand>(rhs);
    return *this;
  }

  auto operator<=>(const DrawIndirectCommand &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t vertex_count_;
  uint32_t instance_count_;
  uint32_t first_vertex_;
  uint32_t first_instance_;
};

struct ClearAttachment {

  using native_type = VkClearAttachment;

  ClearAttachment(ImageAspectMask aspect_mask = {}, uint32_t color_attachment = {}, VkClearValue clear_value = {})
    : aspect_mask_(aspect_mask), color_attachment_(color_attachment), clear_value_(clear_value) {}

  ClearAttachment(const native_type &rhs) : ClearAttachment(std::bit_cast<ClearAttachment>(rhs)) {}

  ClearAttachment &operator=(const native_type &rhs) {
    *this = std::bit_cast<ClearAttachment>(rhs);
    return *this;
  }

  auto operator<=>(const ClearAttachment &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageAspectMask aspect_mask_;
  uint32_t color_attachment_;
  VkClearValue clear_value_;
};

struct GetLatencyMarkerInfoNV {

  static constexpr StructureType structure_type = StructureType::E_GET_LATENCY_MARKER_INFO_NV;

  using native_type = VkGetLatencyMarkerInfoNV;

  GetLatencyMarkerInfoNV(uint32_t timing_count = {}, LatencyTimingsFrameReportNV *p_timings = {}, const void *next = {})
    : timing_count_(timing_count), p_timings_(p_timings), next_(next) {}

  GetLatencyMarkerInfoNV(const native_type &rhs) : GetLatencyMarkerInfoNV(std::bit_cast<GetLatencyMarkerInfoNV>(rhs)) {}

  GetLatencyMarkerInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<GetLatencyMarkerInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const GetLatencyMarkerInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GET_LATENCY_MARKER_INFO_NV;
  const void *next_;
  uint32_t timing_count_;
  LatencyTimingsFrameReportNV *p_timings_;
};

struct DeviceMemoryOverallocationCreateInfoAMD {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;

  using native_type = VkDeviceMemoryOverallocationCreateInfoAMD;

  DeviceMemoryOverallocationCreateInfoAMD(
    MemoryOverallocationBehavior overallocation_behavior = MemoryOverallocationBehavior::E_DEFAULT_AMD, const void *next = {})
    : overallocation_behavior_(overallocation_behavior), next_(next) {}

  DeviceMemoryOverallocationCreateInfoAMD(const native_type &rhs)
    : DeviceMemoryOverallocationCreateInfoAMD(std::bit_cast<DeviceMemoryOverallocationCreateInfoAMD>(rhs)) {}

  DeviceMemoryOverallocationCreateInfoAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceMemoryOverallocationCreateInfoAMD>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceMemoryOverallocationCreateInfoAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
  const void *next_;
  MemoryOverallocationBehavior overallocation_behavior_;
};

struct OpaqueCaptureDescriptorDataCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT;

  using native_type = VkOpaqueCaptureDescriptorDataCreateInfoEXT;

  OpaqueCaptureDescriptorDataCreateInfoEXT(const void *opaque_capture_descriptor_data = {}, const void *next = {})
    : opaque_capture_descriptor_data_(opaque_capture_descriptor_data), next_(next) {}

  OpaqueCaptureDescriptorDataCreateInfoEXT(const native_type &rhs)
    : OpaqueCaptureDescriptorDataCreateInfoEXT(std::bit_cast<OpaqueCaptureDescriptorDataCreateInfoEXT>(rhs)) {}

  OpaqueCaptureDescriptorDataCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<OpaqueCaptureDescriptorDataCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const OpaqueCaptureDescriptorDataCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT;
  const void *next_;
  const void *opaque_capture_descriptor_data_;
};

struct PipelineFragmentShadingRateStateCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;

  using native_type = VkPipelineFragmentShadingRateStateCreateInfoKHR;

  PipelineFragmentShadingRateStateCreateInfoKHR(Extent2D fragment_size = {},
                                                const std::array<FragmentShadingRateCombinerOp, 2> &combiner_ops = {},
                                                const void *next = {})
    : fragment_size_(fragment_size), combiner_ops_(combiner_ops), next_(next) {}

  PipelineFragmentShadingRateStateCreateInfoKHR(const native_type &rhs)
    : PipelineFragmentShadingRateStateCreateInfoKHR(std::bit_cast<PipelineFragmentShadingRateStateCreateInfoKHR>(rhs)) {}

  PipelineFragmentShadingRateStateCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineFragmentShadingRateStateCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineFragmentShadingRateStateCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
  const void *next_;
  Extent2D fragment_size_;
  std::array<FragmentShadingRateCombinerOp, 2> combiner_ops_;
};

struct PipelineRasterizationDepthClipStateCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;

  using native_type = VkPipelineRasterizationDepthClipStateCreateInfoEXT;

  PipelineRasterizationDepthClipStateCreateInfoEXT(PipelineRasterizationDepthClipStateCreateMask flags = {},
                                                   bool32 depth_clip_enable = {},
                                                   const void *next = {})
    : flags_(flags), depth_clip_enable_(depth_clip_enable), next_(next) {}

  PipelineRasterizationDepthClipStateCreateInfoEXT(const native_type &rhs)
    : PipelineRasterizationDepthClipStateCreateInfoEXT(std::bit_cast<PipelineRasterizationDepthClipStateCreateInfoEXT>(rhs)) {}

  PipelineRasterizationDepthClipStateCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationDepthClipStateCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationDepthClipStateCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
  const void *next_;
  PipelineRasterizationDepthClipStateCreateMask flags_;
  bool32 depth_clip_enable_;
};

struct SamplerYcbcrConversionInfo {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_YCBCR_CONVERSION_INFO;

  using native_type = VkSamplerYcbcrConversionInfo;

  SamplerYcbcrConversionInfo(VkSamplerYcbcrConversion conversion = {}, const void *next = {}) : conversion_(conversion), next_(next) {}

  SamplerYcbcrConversionInfo(const native_type &rhs) : SamplerYcbcrConversionInfo(std::bit_cast<SamplerYcbcrConversionInfo>(rhs)) {}

  SamplerYcbcrConversionInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerYcbcrConversionInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerYcbcrConversionInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_YCBCR_CONVERSION_INFO;
  const void *next_;
  VkSamplerYcbcrConversion conversion_;
};

struct ProtectedSubmitInfo {

  static constexpr StructureType structure_type = StructureType::E_PROTECTED_SUBMIT_INFO;

  using native_type = VkProtectedSubmitInfo;

  ProtectedSubmitInfo(bool32 protected_submit = {}, const void *next = {}) : protected_submit_(protected_submit), next_(next) {}

  ProtectedSubmitInfo(const native_type &rhs) : ProtectedSubmitInfo(std::bit_cast<ProtectedSubmitInfo>(rhs)) {}

  ProtectedSubmitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ProtectedSubmitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ProtectedSubmitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PROTECTED_SUBMIT_INFO;
  const void *next_;
  bool32 protected_submit_;
};

struct DisplayPowerInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_POWER_INFO_EXT;

  using native_type = VkDisplayPowerInfoEXT;

  DisplayPowerInfoEXT(DisplayPowerState power_state = DisplayPowerState::E_OFF_EXT, const void *next = {})
    : power_state_(power_state), next_(next) {}

  DisplayPowerInfoEXT(const native_type &rhs) : DisplayPowerInfoEXT(std::bit_cast<DisplayPowerInfoEXT>(rhs)) {}

  DisplayPowerInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPowerInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPowerInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_POWER_INFO_EXT;
  const void *next_;
  DisplayPowerState power_state_;
};

struct ValidationFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_VALIDATION_FEATURES_EXT;

  using native_type = VkValidationFeaturesEXT;

  ValidationFeaturesEXT(uint32_t enabled_validation_feature_count = {},
                        const ValidationFeatureEnable *p_enabled_validation_features = {},
                        uint32_t disabled_validation_feature_count = {},
                        const ValidationFeatureDisable *p_disabled_validation_features = {},
                        const void *next = {})
    : enabled_validation_feature_count_(enabled_validation_feature_count), p_enabled_validation_features_(p_enabled_validation_features),
      disabled_validation_feature_count_(disabled_validation_feature_count),
      p_disabled_validation_features_(p_disabled_validation_features), next_(next) {}

  ValidationFeaturesEXT(const native_type &rhs) : ValidationFeaturesEXT(std::bit_cast<ValidationFeaturesEXT>(rhs)) {}

  ValidationFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ValidationFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ValidationFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VALIDATION_FEATURES_EXT;
  const void *next_;
  uint32_t enabled_validation_feature_count_;
  const ValidationFeatureEnable *p_enabled_validation_features_;
  uint32_t disabled_validation_feature_count_;
  const ValidationFeatureDisable *p_disabled_validation_features_;
};

struct PerformanceCounterDescriptionKHR {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_COUNTER_DESCRIPTION_KHR;

  using native_type = VkPerformanceCounterDescriptionKHR;

  PerformanceCounterDescriptionKHR() = default;

  PerformanceCounterDescriptionKHR(const native_type &rhs)
    : PerformanceCounterDescriptionKHR(std::bit_cast<PerformanceCounterDescriptionKHR>(rhs)) {}

  PerformanceCounterDescriptionKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceCounterDescriptionKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceCounterDescriptionKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
  void *next_ = {};
  PerformanceCounterDescriptionMask flags_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> name_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> category_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
};

struct PipelineCacheCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_CACHE_CREATE_INFO;

  using native_type = VkPipelineCacheCreateInfo;

  PipelineCacheCreateInfo(PipelineCacheCreateMask flags = {},
                          size_t initial_data_size = {},
                          const void *p_initial_data = {},
                          const void *next = {})
    : flags_(flags), initial_data_size_(initial_data_size), p_initial_data_(p_initial_data), next_(next) {}

  PipelineCacheCreateInfo(const native_type &rhs) : PipelineCacheCreateInfo(std::bit_cast<PipelineCacheCreateInfo>(rhs)) {}

  PipelineCacheCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCacheCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCacheCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_CACHE_CREATE_INFO;
  const void *next_;
  PipelineCacheCreateMask flags_;
  size_t initial_data_size_;
  const void *p_initial_data_;
};

struct PhysicalDeviceMemoryProperties2 {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;

  using native_type = VkPhysicalDeviceMemoryProperties2;

  PhysicalDeviceMemoryProperties2() = default;

  PhysicalDeviceMemoryProperties2(const native_type &rhs)
    : PhysicalDeviceMemoryProperties2(std::bit_cast<PhysicalDeviceMemoryProperties2>(rhs)) {}

  PhysicalDeviceMemoryProperties2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMemoryProperties2>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMemoryProperties2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
  void *next_ = {};
  PhysicalDeviceMemoryProperties memory_properties_ = {};
};

struct CopyDescriptorSet {

  static constexpr StructureType structure_type = StructureType::E_COPY_DESCRIPTOR_SET;

  using native_type = VkCopyDescriptorSet;

  CopyDescriptorSet(VkDescriptorSet src_set = {},
                    uint32_t src_binding = {},
                    uint32_t src_array_element = {},
                    VkDescriptorSet dst_set = {},
                    uint32_t dst_binding = {},
                    uint32_t dst_array_element = {},
                    uint32_t descriptor_count = {},
                    const void *next = {})
    : src_set_(src_set), src_binding_(src_binding), src_array_element_(src_array_element), dst_set_(dst_set), dst_binding_(dst_binding),
      dst_array_element_(dst_array_element), descriptor_count_(descriptor_count), next_(next) {}

  CopyDescriptorSet(const native_type &rhs) : CopyDescriptorSet(std::bit_cast<CopyDescriptorSet>(rhs)) {}

  CopyDescriptorSet &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyDescriptorSet>(rhs);
    return *this;
  }

  auto operator<=>(const CopyDescriptorSet &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_DESCRIPTOR_SET;
  const void *next_;
  VkDescriptorSet src_set_;
  uint32_t src_binding_;
  uint32_t src_array_element_;
  VkDescriptorSet dst_set_;
  uint32_t dst_binding_;
  uint32_t dst_array_element_;
  uint32_t descriptor_count_;
};

struct ImageViewCaptureDescriptorDataInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;

  using native_type = VkImageViewCaptureDescriptorDataInfoEXT;

  ImageViewCaptureDescriptorDataInfoEXT(VkImageView image_view = {}, const void *next = {}) : image_view_(image_view), next_(next) {}

  ImageViewCaptureDescriptorDataInfoEXT(const native_type &rhs)
    : ImageViewCaptureDescriptorDataInfoEXT(std::bit_cast<ImageViewCaptureDescriptorDataInfoEXT>(rhs)) {}

  ImageViewCaptureDescriptorDataInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewCaptureDescriptorDataInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewCaptureDescriptorDataInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
  const void *next_;
  VkImageView image_view_;
};

struct DispatchIndirectCommand {

  using native_type = VkDispatchIndirectCommand;

  DispatchIndirectCommand(uint32_t x = {}, uint32_t y = {}, uint32_t z = {}) : x_(x), y_(y), z_(z) {}

  DispatchIndirectCommand(const native_type &rhs) : DispatchIndirectCommand(std::bit_cast<DispatchIndirectCommand>(rhs)) {}

  DispatchIndirectCommand &operator=(const native_type &rhs) {
    *this = std::bit_cast<DispatchIndirectCommand>(rhs);
    return *this;
  }

  auto operator<=>(const DispatchIndirectCommand &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t x_;
  uint32_t y_;
  uint32_t z_;
};

struct PushDescriptorSetWithTemplateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR;

  using native_type = VkPushDescriptorSetWithTemplateInfoKHR;

  PushDescriptorSetWithTemplateInfoKHR(VkDescriptorUpdateTemplate descriptor_update_template = {},
                                       VkPipelineLayout layout = {},
                                       uint32_t set = {},
                                       const void *p_data = {},
                                       const void *next = {})
    : descriptor_update_template_(descriptor_update_template), layout_(layout), set_(set), p_data_(p_data), next_(next) {}

  PushDescriptorSetWithTemplateInfoKHR(const native_type &rhs)
    : PushDescriptorSetWithTemplateInfoKHR(std::bit_cast<PushDescriptorSetWithTemplateInfoKHR>(rhs)) {}

  PushDescriptorSetWithTemplateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PushDescriptorSetWithTemplateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PushDescriptorSetWithTemplateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR;
  const void *next_;
  VkDescriptorUpdateTemplate descriptor_update_template_;
  VkPipelineLayout layout_;
  uint32_t set_;
  const void *p_data_;
};

struct PhysicalDeviceShaderDemoteToHelperInvocationFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;

  using native_type = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

  PhysicalDeviceShaderDemoteToHelperInvocationFeatures(bool32 shader_demote_to_helper_invocation = {}, void *next = {})
    : shader_demote_to_helper_invocation_(shader_demote_to_helper_invocation), next_(next) {}

  PhysicalDeviceShaderDemoteToHelperInvocationFeatures(const native_type &rhs)
    : PhysicalDeviceShaderDemoteToHelperInvocationFeatures(std::bit_cast<PhysicalDeviceShaderDemoteToHelperInvocationFeatures>(rhs)) {}

  PhysicalDeviceShaderDemoteToHelperInvocationFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderDemoteToHelperInvocationFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderDemoteToHelperInvocationFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;
  void *next_;
  bool32 shader_demote_to_helper_invocation_;
};

struct PipelineLayoutCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_LAYOUT_CREATE_INFO;

  using native_type = VkPipelineLayoutCreateInfo;

  PipelineLayoutCreateInfo(PipelineLayoutCreateMask flags = {},
                           uint32_t set_layout_count = {},
                           const VkDescriptorSetLayout *p_set_layouts = {},
                           uint32_t push_constant_range_count = {},
                           const PushConstantRange *p_push_constant_ranges = {},
                           const void *next = {})
    : flags_(flags), set_layout_count_(set_layout_count), p_set_layouts_(p_set_layouts),
      push_constant_range_count_(push_constant_range_count), p_push_constant_ranges_(p_push_constant_ranges), next_(next) {}

  PipelineLayoutCreateInfo(const native_type &rhs) : PipelineLayoutCreateInfo(std::bit_cast<PipelineLayoutCreateInfo>(rhs)) {}

  PipelineLayoutCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineLayoutCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineLayoutCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_LAYOUT_CREATE_INFO;
  const void *next_;
  PipelineLayoutCreateMask flags_;
  uint32_t set_layout_count_;
  const VkDescriptorSetLayout *p_set_layouts_;
  uint32_t push_constant_range_count_;
  const PushConstantRange *p_push_constant_ranges_;
};

struct SamplerCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_CREATE_INFO;

  using native_type = VkSamplerCreateInfo;

  SamplerCreateInfo(SamplerCreateMask flags = {},
                    Filter mag_filter = Filter::E_NEAREST,
                    Filter min_filter = Filter::E_NEAREST,
                    SamplerMipmapMode mipmap_mode = SamplerMipmapMode::E_NEAREST,
                    SamplerAddressMode address_mode_u = SamplerAddressMode::E_REPEAT,
                    SamplerAddressMode address_mode_v = SamplerAddressMode::E_REPEAT,
                    SamplerAddressMode address_mode_w = SamplerAddressMode::E_REPEAT,
                    float mip_lod_bias = {},
                    bool32 anisotropy_enable = {},
                    float max_anisotropy = {},
                    bool32 compare_enable = {},
                    CompareOp compare_op = CompareOp::E_NEVER,
                    float min_lod = {},
                    float max_lod = {},
                    BorderColor border_color = BorderColor::E_FLOAT_TRANSPARENT_BLACK,
                    bool32 unnormalized_coordinates = {},
                    const void *next = {})
    : flags_(flags), mag_filter_(mag_filter), min_filter_(min_filter), mipmap_mode_(mipmap_mode), address_mode_u_(address_mode_u),
      address_mode_v_(address_mode_v), address_mode_w_(address_mode_w), mip_lod_bias_(mip_lod_bias), anisotropy_enable_(anisotropy_enable),
      max_anisotropy_(max_anisotropy), compare_enable_(compare_enable), compare_op_(compare_op), min_lod_(min_lod), max_lod_(max_lod),
      border_color_(border_color), unnormalized_coordinates_(unnormalized_coordinates), next_(next) {}

  SamplerCreateInfo(const native_type &rhs) : SamplerCreateInfo(std::bit_cast<SamplerCreateInfo>(rhs)) {}

  SamplerCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_CREATE_INFO;
  const void *next_;
  SamplerCreateMask flags_;
  Filter mag_filter_;
  Filter min_filter_;
  SamplerMipmapMode mipmap_mode_;
  SamplerAddressMode address_mode_u_;
  SamplerAddressMode address_mode_v_;
  SamplerAddressMode address_mode_w_;
  float mip_lod_bias_;
  bool32 anisotropy_enable_;
  float max_anisotropy_;
  bool32 compare_enable_;
  CompareOp compare_op_;
  float min_lod_;
  float max_lod_;
  BorderColor border_color_;
  bool32 unnormalized_coordinates_;
};

struct PhysicalDeviceSubgroupSizeControlProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;

  using native_type = VkPhysicalDeviceSubgroupSizeControlProperties;

  PhysicalDeviceSubgroupSizeControlProperties() = default;

  PhysicalDeviceSubgroupSizeControlProperties(const native_type &rhs)
    : PhysicalDeviceSubgroupSizeControlProperties(std::bit_cast<PhysicalDeviceSubgroupSizeControlProperties>(rhs)) {}

  PhysicalDeviceSubgroupSizeControlProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSubgroupSizeControlProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSubgroupSizeControlProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
  void *next_ = {};
  uint32_t min_subgroup_size_ = {};
  uint32_t max_subgroup_size_ = {};
  uint32_t max_compute_workgroup_subgroups_ = {};
  ShaderStageMask required_subgroup_size_stages_ = {};
};

struct PhysicalDeviceFragmentDensityMapFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;

  using native_type = VkPhysicalDeviceFragmentDensityMapFeaturesEXT;

  PhysicalDeviceFragmentDensityMapFeaturesEXT(bool32 fragment_density_map = {},
                                              bool32 fragment_density_map_dynamic = {},
                                              bool32 fragment_density_map_non_subsampled_images = {},
                                              void *next = {})
    : fragment_density_map_(fragment_density_map), fragment_density_map_dynamic_(fragment_density_map_dynamic),
      fragment_density_map_non_subsampled_images_(fragment_density_map_non_subsampled_images), next_(next) {}

  PhysicalDeviceFragmentDensityMapFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceFragmentDensityMapFeaturesEXT(std::bit_cast<PhysicalDeviceFragmentDensityMapFeaturesEXT>(rhs)) {}

  PhysicalDeviceFragmentDensityMapFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentDensityMapFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentDensityMapFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
  void *next_;
  bool32 fragment_density_map_;
  bool32 fragment_density_map_dynamic_;
  bool32 fragment_density_map_non_subsampled_images_;
};

struct VertexInputBindingDescription2EXT {

  static constexpr StructureType structure_type = StructureType::E_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;

  using native_type = VkVertexInputBindingDescription2EXT;

  VertexInputBindingDescription2EXT(uint32_t binding = {},
                                    uint32_t stride = {},
                                    VertexInputRate input_rate = VertexInputRate::E_VERTEX,
                                    uint32_t divisor = {},
                                    void *next = {})
    : binding_(binding), stride_(stride), input_rate_(input_rate), divisor_(divisor), next_(next) {}

  VertexInputBindingDescription2EXT(const native_type &rhs)
    : VertexInputBindingDescription2EXT(std::bit_cast<VertexInputBindingDescription2EXT>(rhs)) {}

  VertexInputBindingDescription2EXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<VertexInputBindingDescription2EXT>(rhs);
    return *this;
  }

  auto operator<=>(const VertexInputBindingDescription2EXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
  void *next_;
  uint32_t binding_;
  uint32_t stride_;
  VertexInputRate input_rate_;
  uint32_t divisor_;
};

struct CommandPoolCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_POOL_CREATE_INFO;

  using native_type = VkCommandPoolCreateInfo;

  CommandPoolCreateInfo(CommandPoolCreateMask flags = {}, uint32_t queue_family_index = {}, const void *next = {})
    : flags_(flags), queue_family_index_(queue_family_index), next_(next) {}

  CommandPoolCreateInfo(const native_type &rhs) : CommandPoolCreateInfo(std::bit_cast<CommandPoolCreateInfo>(rhs)) {}

  CommandPoolCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandPoolCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const CommandPoolCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_POOL_CREATE_INFO;
  const void *next_;
  CommandPoolCreateMask flags_;
  uint32_t queue_family_index_;
};

struct CommandBufferBeginInfo {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_BEGIN_INFO;

  using native_type = VkCommandBufferBeginInfo;

  CommandBufferBeginInfo(CommandBufferUsageMask flags = {},
                         const CommandBufferInheritanceInfo *p_inheritance_info = {},
                         const void *next = {})
    : flags_(flags), p_inheritance_info_(p_inheritance_info), next_(next) {}

  CommandBufferBeginInfo(const native_type &rhs) : CommandBufferBeginInfo(std::bit_cast<CommandBufferBeginInfo>(rhs)) {}

  CommandBufferBeginInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferBeginInfo>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferBeginInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_BEGIN_INFO;
  const void *next_;
  CommandBufferUsageMask flags_;
  const CommandBufferInheritanceInfo *p_inheritance_info_;
};

struct BindVertexBufferIndirectCommandNV {

  using native_type = VkBindVertexBufferIndirectCommandNV;

  BindVertexBufferIndirectCommandNV(DeviceAddress buffer_address = {}, uint32_t size = {}, uint32_t stride = {})
    : buffer_address_(buffer_address), size_(size), stride_(stride) {}

  BindVertexBufferIndirectCommandNV(const native_type &rhs)
    : BindVertexBufferIndirectCommandNV(std::bit_cast<BindVertexBufferIndirectCommandNV>(rhs)) {}

  BindVertexBufferIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindVertexBufferIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const BindVertexBufferIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress buffer_address_;
  uint32_t size_;
  uint32_t stride_;
};

struct DrmFormatModifierPropertiesEXT {

  using native_type = VkDrmFormatModifierPropertiesEXT;

  DrmFormatModifierPropertiesEXT() = default;

  DrmFormatModifierPropertiesEXT(const native_type &rhs)
    : DrmFormatModifierPropertiesEXT(std::bit_cast<DrmFormatModifierPropertiesEXT>(rhs)) {}

  DrmFormatModifierPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrmFormatModifierPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DrmFormatModifierPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint64_t drm_format_modifier_ = {};
  uint32_t drm_format_modifier_plane_count_ = {};
  FormatFeatureMask drm_format_modifier_tiling_features_ = {};
};

struct PhysicalDeviceShaderSubgroupRotateFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR;

  PhysicalDeviceShaderSubgroupRotateFeaturesKHR(bool32 shader_subgroup_rotate = {},
                                                bool32 shader_subgroup_rotate_clustered = {},
                                                void *next = {})
    : shader_subgroup_rotate_(shader_subgroup_rotate), shader_subgroup_rotate_clustered_(shader_subgroup_rotate_clustered), next_(next) {}

  PhysicalDeviceShaderSubgroupRotateFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderSubgroupRotateFeaturesKHR(std::bit_cast<PhysicalDeviceShaderSubgroupRotateFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderSubgroupRotateFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderSubgroupRotateFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderSubgroupRotateFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR;
  void *next_;
  bool32 shader_subgroup_rotate_;
  bool32 shader_subgroup_rotate_clustered_;
};

struct SurfaceCapabilitiesPresentBarrierNV {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV;

  using native_type = VkSurfaceCapabilitiesPresentBarrierNV;

  SurfaceCapabilitiesPresentBarrierNV() = default;

  SurfaceCapabilitiesPresentBarrierNV(const native_type &rhs)
    : SurfaceCapabilitiesPresentBarrierNV(std::bit_cast<SurfaceCapabilitiesPresentBarrierNV>(rhs)) {}

  SurfaceCapabilitiesPresentBarrierNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceCapabilitiesPresentBarrierNV>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceCapabilitiesPresentBarrierNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV;
  void *next_ = {};
  bool32 present_barrier_supported_ = {};
};

struct BindBufferMemoryDeviceGroupInfo {

  static constexpr StructureType structure_type = StructureType::E_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;

  using native_type = VkBindBufferMemoryDeviceGroupInfo;

  BindBufferMemoryDeviceGroupInfo(uint32_t device_index_count = {}, const uint32_t *p_device_indices = {}, const void *next = {})
    : device_index_count_(device_index_count), p_device_indices_(p_device_indices), next_(next) {}

  BindBufferMemoryDeviceGroupInfo(const native_type &rhs)
    : BindBufferMemoryDeviceGroupInfo(std::bit_cast<BindBufferMemoryDeviceGroupInfo>(rhs)) {}

  BindBufferMemoryDeviceGroupInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindBufferMemoryDeviceGroupInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BindBufferMemoryDeviceGroupInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
  const void *next_;
  uint32_t device_index_count_;
  const uint32_t *p_device_indices_;
};

struct AttachmentDescription {

  using native_type = VkAttachmentDescription;

  AttachmentDescription(AttachmentDescriptionMask flags = {},
                        Format format = Format::E_UNDEFINED,
                        SampleCountMaskBit samples = {},
                        AttachmentLoadOp load_op = AttachmentLoadOp::E_LOAD,
                        AttachmentStoreOp store_op = AttachmentStoreOp::E_STORE,
                        AttachmentLoadOp stencil_load_op = AttachmentLoadOp::E_LOAD,
                        AttachmentStoreOp stencil_store_op = AttachmentStoreOp::E_STORE,
                        ImageLayout initial_layout = ImageLayout::E_UNDEFINED,
                        ImageLayout final_layout = ImageLayout::E_UNDEFINED)
    : flags_(flags), format_(format), samples_(samples), load_op_(load_op), store_op_(store_op), stencil_load_op_(stencil_load_op),
      stencil_store_op_(stencil_store_op), initial_layout_(initial_layout), final_layout_(final_layout) {}

  AttachmentDescription(const native_type &rhs) : AttachmentDescription(std::bit_cast<AttachmentDescription>(rhs)) {}

  AttachmentDescription &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentDescription>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentDescription &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  AttachmentDescriptionMask flags_;
  Format format_;
  SampleCountMaskBit samples_;
  AttachmentLoadOp load_op_;
  AttachmentStoreOp store_op_;
  AttachmentLoadOp stencil_load_op_;
  AttachmentStoreOp stencil_store_op_;
  ImageLayout initial_layout_;
  ImageLayout final_layout_;
};

struct PhysicalDeviceRayTracingInvocationReorderFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV;

  using native_type = VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;

  PhysicalDeviceRayTracingInvocationReorderFeaturesNV(bool32 ray_tracing_invocation_reorder = {}, void *next = {})
    : ray_tracing_invocation_reorder_(ray_tracing_invocation_reorder), next_(next) {}

  PhysicalDeviceRayTracingInvocationReorderFeaturesNV(const native_type &rhs)
    : PhysicalDeviceRayTracingInvocationReorderFeaturesNV(std::bit_cast<PhysicalDeviceRayTracingInvocationReorderFeaturesNV>(rhs)) {}

  PhysicalDeviceRayTracingInvocationReorderFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingInvocationReorderFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingInvocationReorderFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV;
  void *next_;
  bool32 ray_tracing_invocation_reorder_;
};

struct AccelerationStructureBuildSizesInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;

  using native_type = VkAccelerationStructureBuildSizesInfoKHR;

  AccelerationStructureBuildSizesInfoKHR() = default;

  AccelerationStructureBuildSizesInfoKHR(const native_type &rhs)
    : AccelerationStructureBuildSizesInfoKHR(std::bit_cast<AccelerationStructureBuildSizesInfoKHR>(rhs)) {}

  AccelerationStructureBuildSizesInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureBuildSizesInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureBuildSizesInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
  const void *next_ = {};
  DeviceSize acceleration_structure_size_ = {};
  DeviceSize update_scratch_size_ = {};
  DeviceSize build_scratch_size_ = {};
};

struct CopyMemoryIndirectCommandNV {

  using native_type = VkCopyMemoryIndirectCommandNV;

  CopyMemoryIndirectCommandNV(DeviceAddress src_address = {}, DeviceAddress dst_address = {}, DeviceSize size = {})
    : src_address_(src_address), dst_address_(dst_address), size_(size) {}

  CopyMemoryIndirectCommandNV(const native_type &rhs) : CopyMemoryIndirectCommandNV(std::bit_cast<CopyMemoryIndirectCommandNV>(rhs)) {}

  CopyMemoryIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMemoryIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMemoryIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress src_address_;
  DeviceAddress dst_address_;
  DeviceSize size_;
};

struct CalibratedTimestampInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_CALIBRATED_TIMESTAMP_INFO_KHR;

  using native_type = VkCalibratedTimestampInfoKHR;

  CalibratedTimestampInfoKHR(TimeDomain time_domain = TimeDomain::E_DEVICE_KHR, const void *next = {})
    : time_domain_(time_domain), next_(next) {}

  CalibratedTimestampInfoKHR(const native_type &rhs) : CalibratedTimestampInfoKHR(std::bit_cast<CalibratedTimestampInfoKHR>(rhs)) {}

  CalibratedTimestampInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<CalibratedTimestampInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const CalibratedTimestampInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CALIBRATED_TIMESTAMP_INFO_KHR;
  const void *next_;
  TimeDomain time_domain_;
};

struct RenderPassBeginInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_BEGIN_INFO;

  using native_type = VkRenderPassBeginInfo;

  RenderPassBeginInfo(VkRenderPass render_pass = {},
                      VkFramebuffer framebuffer = {},
                      Rect2D render_area = {},
                      uint32_t clear_value_count = {},
                      const VkClearValue *p_clear_values = {},
                      const void *next = {})
    : render_pass_(render_pass), framebuffer_(framebuffer), render_area_(render_area), clear_value_count_(clear_value_count),
      p_clear_values_(p_clear_values), next_(next) {}

  RenderPassBeginInfo(const native_type &rhs) : RenderPassBeginInfo(std::bit_cast<RenderPassBeginInfo>(rhs)) {}

  RenderPassBeginInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassBeginInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassBeginInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_BEGIN_INFO;
  const void *next_;
  VkRenderPass render_pass_;
  VkFramebuffer framebuffer_;
  Rect2D render_area_;
  uint32_t clear_value_count_;
  const VkClearValue *p_clear_values_;
};

struct SubpassDependency {

  using native_type = VkSubpassDependency;

  SubpassDependency(uint32_t src_subpass = {},
                    uint32_t dst_subpass = {},
                    PipelineStageMask src_stage_mask = {},
                    PipelineStageMask dst_stage_mask = {},
                    AccessMask src_access_mask = {},
                    AccessMask dst_access_mask = {},
                    DependencyMask dependency_flags = {})
    : src_subpass_(src_subpass), dst_subpass_(dst_subpass), src_stage_mask_(src_stage_mask), dst_stage_mask_(dst_stage_mask),
      src_access_mask_(src_access_mask), dst_access_mask_(dst_access_mask), dependency_flags_(dependency_flags) {}

  SubpassDependency(const native_type &rhs) : SubpassDependency(std::bit_cast<SubpassDependency>(rhs)) {}

  SubpassDependency &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassDependency>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassDependency &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t src_subpass_;
  uint32_t dst_subpass_;
  PipelineStageMask src_stage_mask_;
  PipelineStageMask dst_stage_mask_;
  AccessMask src_access_mask_;
  AccessMask dst_access_mask_;
  DependencyMask dependency_flags_;
};

struct RenderPassCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_CREATE_INFO;

  using native_type = VkRenderPassCreateInfo;

  RenderPassCreateInfo(RenderPassCreateMask flags = {},
                       uint32_t attachment_count = {},
                       const AttachmentDescription *p_attachments = {},
                       uint32_t subpass_count = {},
                       const SubpassDescription *p_subpasses = {},
                       uint32_t dependency_count = {},
                       const SubpassDependency *p_dependencies = {},
                       const void *next = {})
    : flags_(flags), attachment_count_(attachment_count), p_attachments_(p_attachments), subpass_count_(subpass_count),
      p_subpasses_(p_subpasses), dependency_count_(dependency_count), p_dependencies_(p_dependencies), next_(next) {}

  RenderPassCreateInfo(const native_type &rhs) : RenderPassCreateInfo(std::bit_cast<RenderPassCreateInfo>(rhs)) {}

  RenderPassCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_CREATE_INFO;
  const void *next_;
  RenderPassCreateMask flags_;
  uint32_t attachment_count_;
  const AttachmentDescription *p_attachments_;
  uint32_t subpass_count_;
  const SubpassDescription *p_subpasses_;
  uint32_t dependency_count_;
  const SubpassDependency *p_dependencies_;
};

struct SetLatencyMarkerInfoNV {

  static constexpr StructureType structure_type = StructureType::E_SET_LATENCY_MARKER_INFO_NV;

  using native_type = VkSetLatencyMarkerInfoNV;

  SetLatencyMarkerInfoNV(uint64_t present_id = {}, LatencyMarker marker = LatencyMarker::E_SIMULATION_START_NV, const void *next = {})
    : present_id_(present_id), marker_(marker), next_(next) {}

  SetLatencyMarkerInfoNV(const native_type &rhs) : SetLatencyMarkerInfoNV(std::bit_cast<SetLatencyMarkerInfoNV>(rhs)) {}

  SetLatencyMarkerInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<SetLatencyMarkerInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const SetLatencyMarkerInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SET_LATENCY_MARKER_INFO_NV;
  const void *next_;
  uint64_t present_id_;
  LatencyMarker marker_;
};

struct MultiviewPerViewAttributesInfoNVX {

  static constexpr StructureType structure_type = StructureType::E_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;

  using native_type = VkMultiviewPerViewAttributesInfoNVX;

  MultiviewPerViewAttributesInfoNVX(bool32 per_view_attributes = {}, bool32 per_view_attributes_position_xonly = {}, const void *next = {})
    : per_view_attributes_(per_view_attributes), per_view_attributes_position_xonly_(per_view_attributes_position_xonly), next_(next) {}

  MultiviewPerViewAttributesInfoNVX(const native_type &rhs)
    : MultiviewPerViewAttributesInfoNVX(std::bit_cast<MultiviewPerViewAttributesInfoNVX>(rhs)) {}

  MultiviewPerViewAttributesInfoNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<MultiviewPerViewAttributesInfoNVX>(rhs);
    return *this;
  }

  auto operator<=>(const MultiviewPerViewAttributesInfoNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;
  const void *next_;
  bool32 per_view_attributes_;
  bool32 per_view_attributes_position_xonly_;
};

struct PipelineRasterizationStateStreamCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;

  using native_type = VkPipelineRasterizationStateStreamCreateInfoEXT;

  PipelineRasterizationStateStreamCreateInfoEXT(PipelineRasterizationStateStreamCreateMask flags = {},
                                                uint32_t rasterization_stream = {},
                                                const void *next = {})
    : flags_(flags), rasterization_stream_(rasterization_stream), next_(next) {}

  PipelineRasterizationStateStreamCreateInfoEXT(const native_type &rhs)
    : PipelineRasterizationStateStreamCreateInfoEXT(std::bit_cast<PipelineRasterizationStateStreamCreateInfoEXT>(rhs)) {}

  PipelineRasterizationStateStreamCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationStateStreamCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationStateStreamCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
  const void *next_;
  PipelineRasterizationStateStreamCreateMask flags_;
  uint32_t rasterization_stream_;
};

struct MemoryAllocateFlagsInfo {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_ALLOCATE_FLAGS_INFO;

  using native_type = VkMemoryAllocateFlagsInfo;

  MemoryAllocateFlagsInfo(MemoryAllocateMask flags = {}, uint32_t device_mask = {}, const void *next = {})
    : flags_(flags), device_mask_(device_mask), next_(next) {}

  MemoryAllocateFlagsInfo(const native_type &rhs) : MemoryAllocateFlagsInfo(std::bit_cast<MemoryAllocateFlagsInfo>(rhs)) {}

  MemoryAllocateFlagsInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryAllocateFlagsInfo>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryAllocateFlagsInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_ALLOCATE_FLAGS_INFO;
  const void *next_;
  MemoryAllocateMask flags_;
  uint32_t device_mask_;
};

struct EventCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_EVENT_CREATE_INFO;

  using native_type = VkEventCreateInfo;

  EventCreateInfo(EventCreateMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  EventCreateInfo(const native_type &rhs) : EventCreateInfo(std::bit_cast<EventCreateInfo>(rhs)) {}

  EventCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<EventCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const EventCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EVENT_CREATE_INFO;
  const void *next_;
  EventCreateMask flags_;
};

struct PhysicalDeviceDiscardRectanglePropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceDiscardRectanglePropertiesEXT;

  PhysicalDeviceDiscardRectanglePropertiesEXT() = default;

  PhysicalDeviceDiscardRectanglePropertiesEXT(const native_type &rhs)
    : PhysicalDeviceDiscardRectanglePropertiesEXT(std::bit_cast<PhysicalDeviceDiscardRectanglePropertiesEXT>(rhs)) {}

  PhysicalDeviceDiscardRectanglePropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDiscardRectanglePropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDiscardRectanglePropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_discard_rectangles_ = {};
};

struct PhysicalDeviceVulkan12Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;

  using native_type = VkPhysicalDeviceVulkan12Features;

  PhysicalDeviceVulkan12Features(bool32 sampler_mirror_clamp_to_edge = {},
                                 bool32 draw_indirect_count = {},
                                 bool32 storage_buffer8bit_access = {},
                                 bool32 uniform_and_storage_buffer8bit_access = {},
                                 bool32 storage_push_constant8 = {},
                                 bool32 shader_buffer_int64atomics = {},
                                 bool32 shader_shared_int64atomics = {},
                                 bool32 shader_float16 = {},
                                 bool32 shader_int8 = {},
                                 bool32 descriptor_indexing = {},
                                 bool32 shader_input_attachment_array_dynamic_indexing = {},
                                 bool32 shader_uniform_texel_buffer_array_dynamic_indexing = {},
                                 bool32 shader_storage_texel_buffer_array_dynamic_indexing = {},
                                 bool32 shader_uniform_buffer_array_non_uniform_indexing = {},
                                 bool32 shader_sampled_image_array_non_uniform_indexing = {},
                                 bool32 shader_storage_buffer_array_non_uniform_indexing = {},
                                 bool32 shader_storage_image_array_non_uniform_indexing = {},
                                 bool32 shader_input_attachment_array_non_uniform_indexing = {},
                                 bool32 shader_uniform_texel_buffer_array_non_uniform_indexing = {},
                                 bool32 shader_storage_texel_buffer_array_non_uniform_indexing = {},
                                 bool32 descriptor_binding_uniform_buffer_update_after_bind = {},
                                 bool32 descriptor_binding_sampled_image_update_after_bind = {},
                                 bool32 descriptor_binding_storage_image_update_after_bind = {},
                                 bool32 descriptor_binding_storage_buffer_update_after_bind = {},
                                 bool32 descriptor_binding_uniform_texel_buffer_update_after_bind = {},
                                 bool32 descriptor_binding_storage_texel_buffer_update_after_bind = {},
                                 bool32 descriptor_binding_update_unused_while_pending = {},
                                 bool32 descriptor_binding_partially_bound = {},
                                 bool32 descriptor_binding_variable_descriptor_count = {},
                                 bool32 runtime_descriptor_array = {},
                                 bool32 sampler_filter_minmax = {},
                                 bool32 scalar_block_layout = {},
                                 bool32 imageless_framebuffer = {},
                                 bool32 uniform_buffer_standard_layout = {},
                                 bool32 shader_subgroup_extended_types = {},
                                 bool32 separate_depth_stencil_layouts = {},
                                 bool32 host_query_reset = {},
                                 bool32 timeline_semaphore = {},
                                 bool32 buffer_device_address = {},
                                 bool32 buffer_device_address_capture_replay = {},
                                 bool32 buffer_device_address_multi_device = {},
                                 bool32 vulkan_memory_model = {},
                                 bool32 vulkan_memory_model_device_scope = {},
                                 bool32 vulkan_memory_model_availability_visibility_chains = {},
                                 bool32 shader_output_viewport_index = {},
                                 bool32 shader_output_layer = {},
                                 bool32 subgroup_broadcast_dynamic_id = {},
                                 void *next = {})
    : sampler_mirror_clamp_to_edge_(sampler_mirror_clamp_to_edge), draw_indirect_count_(draw_indirect_count),
      storage_buffer8bit_access_(storage_buffer8bit_access), uniform_and_storage_buffer8bit_access_(uniform_and_storage_buffer8bit_access),
      storage_push_constant8_(storage_push_constant8), shader_buffer_int64atomics_(shader_buffer_int64atomics),
      shader_shared_int64atomics_(shader_shared_int64atomics), shader_float16_(shader_float16), shader_int8_(shader_int8),
      descriptor_indexing_(descriptor_indexing),
      shader_input_attachment_array_dynamic_indexing_(shader_input_attachment_array_dynamic_indexing),
      shader_uniform_texel_buffer_array_dynamic_indexing_(shader_uniform_texel_buffer_array_dynamic_indexing),
      shader_storage_texel_buffer_array_dynamic_indexing_(shader_storage_texel_buffer_array_dynamic_indexing),
      shader_uniform_buffer_array_non_uniform_indexing_(shader_uniform_buffer_array_non_uniform_indexing),
      shader_sampled_image_array_non_uniform_indexing_(shader_sampled_image_array_non_uniform_indexing),
      shader_storage_buffer_array_non_uniform_indexing_(shader_storage_buffer_array_non_uniform_indexing),
      shader_storage_image_array_non_uniform_indexing_(shader_storage_image_array_non_uniform_indexing),
      shader_input_attachment_array_non_uniform_indexing_(shader_input_attachment_array_non_uniform_indexing),
      shader_uniform_texel_buffer_array_non_uniform_indexing_(shader_uniform_texel_buffer_array_non_uniform_indexing),
      shader_storage_texel_buffer_array_non_uniform_indexing_(shader_storage_texel_buffer_array_non_uniform_indexing),
      descriptor_binding_uniform_buffer_update_after_bind_(descriptor_binding_uniform_buffer_update_after_bind),
      descriptor_binding_sampled_image_update_after_bind_(descriptor_binding_sampled_image_update_after_bind),
      descriptor_binding_storage_image_update_after_bind_(descriptor_binding_storage_image_update_after_bind),
      descriptor_binding_storage_buffer_update_after_bind_(descriptor_binding_storage_buffer_update_after_bind),
      descriptor_binding_uniform_texel_buffer_update_after_bind_(descriptor_binding_uniform_texel_buffer_update_after_bind),
      descriptor_binding_storage_texel_buffer_update_after_bind_(descriptor_binding_storage_texel_buffer_update_after_bind),
      descriptor_binding_update_unused_while_pending_(descriptor_binding_update_unused_while_pending),
      descriptor_binding_partially_bound_(descriptor_binding_partially_bound),
      descriptor_binding_variable_descriptor_count_(descriptor_binding_variable_descriptor_count),
      runtime_descriptor_array_(runtime_descriptor_array), sampler_filter_minmax_(sampler_filter_minmax),
      scalar_block_layout_(scalar_block_layout), imageless_framebuffer_(imageless_framebuffer),
      uniform_buffer_standard_layout_(uniform_buffer_standard_layout), shader_subgroup_extended_types_(shader_subgroup_extended_types),
      separate_depth_stencil_layouts_(separate_depth_stencil_layouts), host_query_reset_(host_query_reset),
      timeline_semaphore_(timeline_semaphore), buffer_device_address_(buffer_device_address),
      buffer_device_address_capture_replay_(buffer_device_address_capture_replay),
      buffer_device_address_multi_device_(buffer_device_address_multi_device), vulkan_memory_model_(vulkan_memory_model),
      vulkan_memory_model_device_scope_(vulkan_memory_model_device_scope),
      vulkan_memory_model_availability_visibility_chains_(vulkan_memory_model_availability_visibility_chains),
      shader_output_viewport_index_(shader_output_viewport_index), shader_output_layer_(shader_output_layer),
      subgroup_broadcast_dynamic_id_(subgroup_broadcast_dynamic_id), next_(next) {}

  PhysicalDeviceVulkan12Features(const native_type &rhs)
    : PhysicalDeviceVulkan12Features(std::bit_cast<PhysicalDeviceVulkan12Features>(rhs)) {}

  PhysicalDeviceVulkan12Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkan12Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkan12Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
  void *next_;
  bool32 sampler_mirror_clamp_to_edge_;
  bool32 draw_indirect_count_;
  bool32 storage_buffer8bit_access_;
  bool32 uniform_and_storage_buffer8bit_access_;
  bool32 storage_push_constant8_;
  bool32 shader_buffer_int64atomics_;
  bool32 shader_shared_int64atomics_;
  bool32 shader_float16_;
  bool32 shader_int8_;
  bool32 descriptor_indexing_;
  bool32 shader_input_attachment_array_dynamic_indexing_;
  bool32 shader_uniform_texel_buffer_array_dynamic_indexing_;
  bool32 shader_storage_texel_buffer_array_dynamic_indexing_;
  bool32 shader_uniform_buffer_array_non_uniform_indexing_;
  bool32 shader_sampled_image_array_non_uniform_indexing_;
  bool32 shader_storage_buffer_array_non_uniform_indexing_;
  bool32 shader_storage_image_array_non_uniform_indexing_;
  bool32 shader_input_attachment_array_non_uniform_indexing_;
  bool32 shader_uniform_texel_buffer_array_non_uniform_indexing_;
  bool32 shader_storage_texel_buffer_array_non_uniform_indexing_;
  bool32 descriptor_binding_uniform_buffer_update_after_bind_;
  bool32 descriptor_binding_sampled_image_update_after_bind_;
  bool32 descriptor_binding_storage_image_update_after_bind_;
  bool32 descriptor_binding_storage_buffer_update_after_bind_;
  bool32 descriptor_binding_uniform_texel_buffer_update_after_bind_;
  bool32 descriptor_binding_storage_texel_buffer_update_after_bind_;
  bool32 descriptor_binding_update_unused_while_pending_;
  bool32 descriptor_binding_partially_bound_;
  bool32 descriptor_binding_variable_descriptor_count_;
  bool32 runtime_descriptor_array_;
  bool32 sampler_filter_minmax_;
  bool32 scalar_block_layout_;
  bool32 imageless_framebuffer_;
  bool32 uniform_buffer_standard_layout_;
  bool32 shader_subgroup_extended_types_;
  bool32 separate_depth_stencil_layouts_;
  bool32 host_query_reset_;
  bool32 timeline_semaphore_;
  bool32 buffer_device_address_;
  bool32 buffer_device_address_capture_replay_;
  bool32 buffer_device_address_multi_device_;
  bool32 vulkan_memory_model_;
  bool32 vulkan_memory_model_device_scope_;
  bool32 vulkan_memory_model_availability_visibility_chains_;
  bool32 shader_output_viewport_index_;
  bool32 shader_output_layer_;
  bool32 subgroup_broadcast_dynamic_id_;
};

struct FenceCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_FENCE_CREATE_INFO;

  using native_type = VkFenceCreateInfo;

  FenceCreateInfo(FenceCreateMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  FenceCreateInfo(const native_type &rhs) : FenceCreateInfo(std::bit_cast<FenceCreateInfo>(rhs)) {}

  FenceCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<FenceCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const FenceCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FENCE_CREATE_INFO;
  const void *next_;
  FenceCreateMask flags_;
};

struct BufferDeviceAddressInfo {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_DEVICE_ADDRESS_INFO;

  using native_type = VkBufferDeviceAddressInfo;

  BufferDeviceAddressInfo(VkBuffer buffer = {}, const void *next = {}) : buffer_(buffer), next_(next) {}

  BufferDeviceAddressInfo(const native_type &rhs) : BufferDeviceAddressInfo(std::bit_cast<BufferDeviceAddressInfo>(rhs)) {}

  BufferDeviceAddressInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferDeviceAddressInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BufferDeviceAddressInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_DEVICE_ADDRESS_INFO;
  const void *next_;
  VkBuffer buffer_;
};

struct QueryPoolCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_QUERY_POOL_CREATE_INFO;

  using native_type = VkQueryPoolCreateInfo;

  QueryPoolCreateInfo(QueryPoolCreateMask flags = {},
                      QueryType query_type = QueryType::E_OCCLUSION,
                      uint32_t query_count = {},
                      QueryPipelineStatisticMask pipeline_statistics = {},
                      const void *next = {})
    : flags_(flags), query_type_(query_type), query_count_(query_count), pipeline_statistics_(pipeline_statistics), next_(next) {}

  QueryPoolCreateInfo(const native_type &rhs) : QueryPoolCreateInfo(std::bit_cast<QueryPoolCreateInfo>(rhs)) {}

  QueryPoolCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueryPoolCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const QueryPoolCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUERY_POOL_CREATE_INFO;
  const void *next_;
  QueryPoolCreateMask flags_;
  QueryType query_type_;
  uint32_t query_count_;
  QueryPipelineStatisticMask pipeline_statistics_;
};

struct MultiDrawInfoEXT {

  using native_type = VkMultiDrawInfoEXT;

  MultiDrawInfoEXT(uint32_t first_vertex = {}, uint32_t vertex_count = {}) : first_vertex_(first_vertex), vertex_count_(vertex_count) {}

  MultiDrawInfoEXT(const native_type &rhs) : MultiDrawInfoEXT(std::bit_cast<MultiDrawInfoEXT>(rhs)) {}

  MultiDrawInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MultiDrawInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MultiDrawInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t first_vertex_;
  uint32_t vertex_count_;
};

struct ExportMemoryAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_EXPORT_MEMORY_ALLOCATE_INFO;

  using native_type = VkExportMemoryAllocateInfo;

  ExportMemoryAllocateInfo(ExternalMemoryHandleTypeMask handle_types = {}, const void *next = {})
    : handle_types_(handle_types), next_(next) {}

  ExportMemoryAllocateInfo(const native_type &rhs) : ExportMemoryAllocateInfo(std::bit_cast<ExportMemoryAllocateInfo>(rhs)) {}

  ExportMemoryAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExportMemoryAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ExportMemoryAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXPORT_MEMORY_ALLOCATE_INFO;
  const void *next_;
  ExternalMemoryHandleTypeMask handle_types_;
};

struct AccelerationStructureSRTMotionInstanceNV {

  using native_type = VkAccelerationStructureSRTMotionInstanceNV;

  AccelerationStructureSRTMotionInstanceNV(SRTDataNV transform_t0 = {},
                                           SRTDataNV transform_t1 = {},
                                           uint32_t instance_custom_index = {},
                                           uint32_t mask = {},
                                           uint32_t instance_shader_binding_table_record_offset = {},
                                           GeometryInstanceMask flags = {},
                                           uint64_t acceleration_structure_reference = {})
    : transform_t0_(transform_t0), transform_t1_(transform_t1), instance_custom_index_(instance_custom_index), mask_(mask),
      instance_shader_binding_table_record_offset_(instance_shader_binding_table_record_offset), flags_(flags),
      acceleration_structure_reference_(acceleration_structure_reference) {}

  AccelerationStructureSRTMotionInstanceNV(const native_type &rhs)
    : AccelerationStructureSRTMotionInstanceNV(std::bit_cast<AccelerationStructureSRTMotionInstanceNV>(rhs)) {}

  AccelerationStructureSRTMotionInstanceNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureSRTMotionInstanceNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureSRTMotionInstanceNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  SRTDataNV transform_t0_;
  SRTDataNV transform_t1_;
  uint32_t instance_custom_index_ : 24;
  uint32_t mask_ : 8;
  uint32_t instance_shader_binding_table_record_offset_ : 24;
  GeometryInstanceMask flags_ : 8;
  uint64_t acceleration_structure_reference_;
};

struct PhysicalDeviceRobustness2FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;

  using native_type = VkPhysicalDeviceRobustness2FeaturesEXT;

  PhysicalDeviceRobustness2FeaturesEXT(bool32 robust_buffer_access2 = {},
                                       bool32 robust_image_access2 = {},
                                       bool32 null_descriptor = {},
                                       void *next = {})
    : robust_buffer_access2_(robust_buffer_access2), robust_image_access2_(robust_image_access2), null_descriptor_(null_descriptor),
      next_(next) {}

  PhysicalDeviceRobustness2FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceRobustness2FeaturesEXT(std::bit_cast<PhysicalDeviceRobustness2FeaturesEXT>(rhs)) {}

  PhysicalDeviceRobustness2FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRobustness2FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRobustness2FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
  void *next_;
  bool32 robust_buffer_access2_;
  bool32 robust_image_access2_;
  bool32 null_descriptor_;
};

struct PipelineRasterizationStateRasterizationOrderAMD {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;

  using native_type = VkPipelineRasterizationStateRasterizationOrderAMD;

  PipelineRasterizationStateRasterizationOrderAMD(RasterizationOrder rasterization_order = RasterizationOrder::E_STRICT_AMD,
                                                  const void *next = {})
    : rasterization_order_(rasterization_order), next_(next) {}

  PipelineRasterizationStateRasterizationOrderAMD(const native_type &rhs)
    : PipelineRasterizationStateRasterizationOrderAMD(std::bit_cast<PipelineRasterizationStateRasterizationOrderAMD>(rhs)) {}

  PipelineRasterizationStateRasterizationOrderAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationStateRasterizationOrderAMD>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationStateRasterizationOrderAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
  const void *next_;
  RasterizationOrder rasterization_order_;
};

struct VideoEncodeQualityLevelInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR;

  using native_type = VkVideoEncodeQualityLevelInfoKHR;

  VideoEncodeQualityLevelInfoKHR(uint32_t quality_level = {}, const void *next = {}) : quality_level_(quality_level), next_(next) {}

  VideoEncodeQualityLevelInfoKHR(const native_type &rhs)
    : VideoEncodeQualityLevelInfoKHR(std::bit_cast<VideoEncodeQualityLevelInfoKHR>(rhs)) {}

  VideoEncodeQualityLevelInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeQualityLevelInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeQualityLevelInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR;
  const void *next_;
  uint32_t quality_level_;
};

struct DisplayModeParametersKHR {

  using native_type = VkDisplayModeParametersKHR;

  DisplayModeParametersKHR(Extent2D visible_region = {}, uint32_t refresh_rate = {})
    : visible_region_(visible_region), refresh_rate_(refresh_rate) {}

  DisplayModeParametersKHR(const native_type &rhs) : DisplayModeParametersKHR(std::bit_cast<DisplayModeParametersKHR>(rhs)) {}

  DisplayModeParametersKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayModeParametersKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayModeParametersKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  Extent2D visible_region_;
  uint32_t refresh_rate_;
};

struct ShaderModuleIdentifierEXT {

  static constexpr StructureType structure_type = StructureType::E_SHADER_MODULE_IDENTIFIER_EXT;

  using native_type = VkShaderModuleIdentifierEXT;

  ShaderModuleIdentifierEXT() = default;

  ShaderModuleIdentifierEXT(const native_type &rhs) : ShaderModuleIdentifierEXT(std::bit_cast<ShaderModuleIdentifierEXT>(rhs)) {}

  ShaderModuleIdentifierEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShaderModuleIdentifierEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ShaderModuleIdentifierEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SHADER_MODULE_IDENTIFIER_EXT;
  void *next_ = {};
  uint32_t identifier_size_ = {};
  std::array<uint8_t, VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT> identifier_ = {};
};

struct BindImageMemoryInfo {

  static constexpr StructureType structure_type = StructureType::E_BIND_IMAGE_MEMORY_INFO;

  using native_type = VkBindImageMemoryInfo;

  BindImageMemoryInfo(VkImage image = {}, VkDeviceMemory memory = {}, DeviceSize memory_offset = {}, const void *next = {})
    : image_(image), memory_(memory), memory_offset_(memory_offset), next_(next) {}

  BindImageMemoryInfo(const native_type &rhs) : BindImageMemoryInfo(std::bit_cast<BindImageMemoryInfo>(rhs)) {}

  BindImageMemoryInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindImageMemoryInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BindImageMemoryInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_IMAGE_MEMORY_INFO;
  const void *next_;
  VkImage image_;
  VkDeviceMemory memory_;
  DeviceSize memory_offset_;
};

struct ExternalMemoryImageCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;

  using native_type = VkExternalMemoryImageCreateInfoNV;

  ExternalMemoryImageCreateInfoNV(ExternalMemoryHandleTypeMask handle_types = {}, const void *next = {})
    : handle_types_(handle_types), next_(next) {}

  ExternalMemoryImageCreateInfoNV(const native_type &rhs)
    : ExternalMemoryImageCreateInfoNV(std::bit_cast<ExternalMemoryImageCreateInfoNV>(rhs)) {}

  ExternalMemoryImageCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<ExternalMemoryImageCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const ExternalMemoryImageCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
  const void *next_;
  ExternalMemoryHandleTypeMask handle_types_;
};

struct ValidationFlagsEXT {

  static constexpr StructureType structure_type = StructureType::E_VALIDATION_FLAGS_EXT;

  using native_type = VkValidationFlagsEXT;

  ValidationFlagsEXT(uint32_t disabled_validation_check_count = {},
                     const ValidationCheck *p_disabled_validation_checks = {},
                     const void *next = {})
    : disabled_validation_check_count_(disabled_validation_check_count), p_disabled_validation_checks_(p_disabled_validation_checks),
      next_(next) {}

  ValidationFlagsEXT(const native_type &rhs) : ValidationFlagsEXT(std::bit_cast<ValidationFlagsEXT>(rhs)) {}

  ValidationFlagsEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ValidationFlagsEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ValidationFlagsEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VALIDATION_FLAGS_EXT;
  const void *next_;
  uint32_t disabled_validation_check_count_;
  const ValidationCheck *p_disabled_validation_checks_;
};

struct SwapchainDisplayNativeHdrCreateInfoAMD {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;

  using native_type = VkSwapchainDisplayNativeHdrCreateInfoAMD;

  SwapchainDisplayNativeHdrCreateInfoAMD(bool32 local_dimming_enable = {}, const void *next = {})
    : local_dimming_enable_(local_dimming_enable), next_(next) {}

  SwapchainDisplayNativeHdrCreateInfoAMD(const native_type &rhs)
    : SwapchainDisplayNativeHdrCreateInfoAMD(std::bit_cast<SwapchainDisplayNativeHdrCreateInfoAMD>(rhs)) {}

  SwapchainDisplayNativeHdrCreateInfoAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainDisplayNativeHdrCreateInfoAMD>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainDisplayNativeHdrCreateInfoAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
  const void *next_;
  bool32 local_dimming_enable_;
};

struct XYColorEXT {

  using native_type = VkXYColorEXT;

  XYColorEXT(float x = {}, float y = {}) : x_(x), y_(y) {}

  XYColorEXT(const native_type &rhs) : XYColorEXT(std::bit_cast<XYColorEXT>(rhs)) {}

  XYColorEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<XYColorEXT>(rhs);
    return *this;
  }

  auto operator<=>(const XYColorEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float x_;
  float y_;
};

struct PhysicalDevicePresentIdFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;

  using native_type = VkPhysicalDevicePresentIdFeaturesKHR;

  PhysicalDevicePresentIdFeaturesKHR(bool32 present_id = {}, void *next = {}) : present_id_(present_id), next_(next) {}

  PhysicalDevicePresentIdFeaturesKHR(const native_type &rhs)
    : PhysicalDevicePresentIdFeaturesKHR(std::bit_cast<PhysicalDevicePresentIdFeaturesKHR>(rhs)) {}

  PhysicalDevicePresentIdFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePresentIdFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePresentIdFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;
  void *next_;
  bool32 present_id_;
};

struct PhysicalDeviceShaderDrawParametersFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;

  using native_type = VkPhysicalDeviceShaderDrawParametersFeatures;

  PhysicalDeviceShaderDrawParametersFeatures(bool32 shader_draw_parameters = {}, void *next = {})
    : shader_draw_parameters_(shader_draw_parameters), next_(next) {}

  PhysicalDeviceShaderDrawParametersFeatures(const native_type &rhs)
    : PhysicalDeviceShaderDrawParametersFeatures(std::bit_cast<PhysicalDeviceShaderDrawParametersFeatures>(rhs)) {}

  PhysicalDeviceShaderDrawParametersFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderDrawParametersFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderDrawParametersFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
  void *next_;
  bool32 shader_draw_parameters_;
};

struct HdrMetadataEXT {

  static constexpr StructureType structure_type = StructureType::E_HDR_METADATA_EXT;

  using native_type = VkHdrMetadataEXT;

  HdrMetadataEXT(XYColorEXT display_primary_red = {},
                 XYColorEXT display_primary_green = {},
                 XYColorEXT display_primary_blue = {},
                 XYColorEXT white_point = {},
                 float max_luminance = {},
                 float min_luminance = {},
                 float max_content_light_level = {},
                 float max_frame_average_light_level = {},
                 const void *next = {})
    : display_primary_red_(display_primary_red), display_primary_green_(display_primary_green), display_primary_blue_(display_primary_blue),
      white_point_(white_point), max_luminance_(max_luminance), min_luminance_(min_luminance),
      max_content_light_level_(max_content_light_level), max_frame_average_light_level_(max_frame_average_light_level), next_(next) {}

  HdrMetadataEXT(const native_type &rhs) : HdrMetadataEXT(std::bit_cast<HdrMetadataEXT>(rhs)) {}

  HdrMetadataEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<HdrMetadataEXT>(rhs);
    return *this;
  }

  auto operator<=>(const HdrMetadataEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_HDR_METADATA_EXT;
  const void *next_;
  XYColorEXT display_primary_red_;
  XYColorEXT display_primary_green_;
  XYColorEXT display_primary_blue_;
  XYColorEXT white_point_;
  float max_luminance_;
  float min_luminance_;
  float max_content_light_level_;
  float max_frame_average_light_level_;
};

struct PhysicalDeviceCopyMemoryIndirectPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;

  PhysicalDeviceCopyMemoryIndirectPropertiesNV() = default;

  PhysicalDeviceCopyMemoryIndirectPropertiesNV(const native_type &rhs)
    : PhysicalDeviceCopyMemoryIndirectPropertiesNV(std::bit_cast<PhysicalDeviceCopyMemoryIndirectPropertiesNV>(rhs)) {}

  PhysicalDeviceCopyMemoryIndirectPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCopyMemoryIndirectPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCopyMemoryIndirectPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV;
  void *next_ = {};
  QueueMask supported_queues_ = {};
};

struct PhysicalDeviceSubpassShadingFeaturesHUAWEI {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;

  using native_type = VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;

  PhysicalDeviceSubpassShadingFeaturesHUAWEI(bool32 subpass_shading = {}, void *next = {})
    : subpass_shading_(subpass_shading), next_(next) {}

  PhysicalDeviceSubpassShadingFeaturesHUAWEI(const native_type &rhs)
    : PhysicalDeviceSubpassShadingFeaturesHUAWEI(std::bit_cast<PhysicalDeviceSubpassShadingFeaturesHUAWEI>(rhs)) {}

  PhysicalDeviceSubpassShadingFeaturesHUAWEI &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSubpassShadingFeaturesHUAWEI>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSubpassShadingFeaturesHUAWEI &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;
  void *next_;
  bool32 subpass_shading_;
};

struct PhysicalDevicePresentWaitFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;

  using native_type = VkPhysicalDevicePresentWaitFeaturesKHR;

  PhysicalDevicePresentWaitFeaturesKHR(bool32 present_wait = {}, void *next = {}) : present_wait_(present_wait), next_(next) {}

  PhysicalDevicePresentWaitFeaturesKHR(const native_type &rhs)
    : PhysicalDevicePresentWaitFeaturesKHR(std::bit_cast<PhysicalDevicePresentWaitFeaturesKHR>(rhs)) {}

  PhysicalDevicePresentWaitFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePresentWaitFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePresentWaitFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
  void *next_;
  bool32 present_wait_;
};

struct RefreshCycleDurationGOOGLE {

  using native_type = VkRefreshCycleDurationGOOGLE;

  RefreshCycleDurationGOOGLE() = default;

  RefreshCycleDurationGOOGLE(const native_type &rhs) : RefreshCycleDurationGOOGLE(std::bit_cast<RefreshCycleDurationGOOGLE>(rhs)) {}

  RefreshCycleDurationGOOGLE &operator=(const native_type &rhs) {
    *this = std::bit_cast<RefreshCycleDurationGOOGLE>(rhs);
    return *this;
  }

  auto operator<=>(const RefreshCycleDurationGOOGLE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint64_t refresh_duration_ = {};
};

struct DisplayNativeHdrSurfaceCapabilitiesAMD {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;

  using native_type = VkDisplayNativeHdrSurfaceCapabilitiesAMD;

  DisplayNativeHdrSurfaceCapabilitiesAMD() = default;

  DisplayNativeHdrSurfaceCapabilitiesAMD(const native_type &rhs)
    : DisplayNativeHdrSurfaceCapabilitiesAMD(std::bit_cast<DisplayNativeHdrSurfaceCapabilitiesAMD>(rhs)) {}

  DisplayNativeHdrSurfaceCapabilitiesAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayNativeHdrSurfaceCapabilitiesAMD>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayNativeHdrSurfaceCapabilitiesAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
  void *next_ = {};
  bool32 local_dimming_support_ = {};
};

struct PhysicalDeviceDescriptorIndexingProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;

  using native_type = VkPhysicalDeviceDescriptorIndexingProperties;

  PhysicalDeviceDescriptorIndexingProperties() = default;

  PhysicalDeviceDescriptorIndexingProperties(const native_type &rhs)
    : PhysicalDeviceDescriptorIndexingProperties(std::bit_cast<PhysicalDeviceDescriptorIndexingProperties>(rhs)) {}

  PhysicalDeviceDescriptorIndexingProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorIndexingProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorIndexingProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
  void *next_ = {};
  uint32_t max_update_after_bind_descriptors_in_all_pools_ = {};
  bool32 shader_uniform_buffer_array_non_uniform_indexing_native_ = {};
  bool32 shader_sampled_image_array_non_uniform_indexing_native_ = {};
  bool32 shader_storage_buffer_array_non_uniform_indexing_native_ = {};
  bool32 shader_storage_image_array_non_uniform_indexing_native_ = {};
  bool32 shader_input_attachment_array_non_uniform_indexing_native_ = {};
  bool32 robust_buffer_access_update_after_bind_ = {};
  bool32 quad_divergent_implicit_lod_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_samplers_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_uniform_buffers_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_storage_buffers_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_sampled_images_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_storage_images_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_input_attachments_ = {};
  uint32_t max_per_stage_update_after_bind_resources_ = {};
  uint32_t max_descriptor_set_update_after_bind_samplers_ = {};
  uint32_t max_descriptor_set_update_after_bind_uniform_buffers_ = {};
  uint32_t max_descriptor_set_update_after_bind_uniform_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_storage_buffers_ = {};
  uint32_t max_descriptor_set_update_after_bind_storage_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_sampled_images_ = {};
  uint32_t max_descriptor_set_update_after_bind_storage_images_ = {};
  uint32_t max_descriptor_set_update_after_bind_input_attachments_ = {};
};

struct PastPresentationTimingGOOGLE {

  using native_type = VkPastPresentationTimingGOOGLE;

  PastPresentationTimingGOOGLE() = default;

  PastPresentationTimingGOOGLE(const native_type &rhs) : PastPresentationTimingGOOGLE(std::bit_cast<PastPresentationTimingGOOGLE>(rhs)) {}

  PastPresentationTimingGOOGLE &operator=(const native_type &rhs) {
    *this = std::bit_cast<PastPresentationTimingGOOGLE>(rhs);
    return *this;
  }

  auto operator<=>(const PastPresentationTimingGOOGLE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t present_id_ = {};
  uint64_t desired_present_time_ = {};
  uint64_t actual_present_time_ = {};
  uint64_t earliest_present_time_ = {};
  uint64_t present_margin_ = {};
};

struct PhysicalDeviceImageAlignmentControlPropertiesMESA {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA;

  using native_type = VkPhysicalDeviceImageAlignmentControlPropertiesMESA;

  PhysicalDeviceImageAlignmentControlPropertiesMESA(uint32_t supported_image_alignment_mask = {}, void *next = {})
    : supported_image_alignment_mask_(supported_image_alignment_mask), next_(next) {}

  PhysicalDeviceImageAlignmentControlPropertiesMESA(const native_type &rhs)
    : PhysicalDeviceImageAlignmentControlPropertiesMESA(std::bit_cast<PhysicalDeviceImageAlignmentControlPropertiesMESA>(rhs)) {}

  PhysicalDeviceImageAlignmentControlPropertiesMESA &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageAlignmentControlPropertiesMESA>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageAlignmentControlPropertiesMESA &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA;
  void *next_;
  uint32_t supported_image_alignment_mask_;
};

struct CudaLaunchInfoNV {

  static constexpr StructureType structure_type = StructureType::E_CUDA_LAUNCH_INFO_NV;

  using native_type = VkCudaLaunchInfoNV;

  CudaLaunchInfoNV(VkCudaFunctionNV function = {},
                   uint32_t grid_dim_x = {},
                   uint32_t grid_dim_y = {},
                   uint32_t grid_dim_z = {},
                   uint32_t block_dim_x = {},
                   uint32_t block_dim_y = {},
                   uint32_t block_dim_z = {},
                   uint32_t shared_mem_bytes = {},
                   size_t param_count = {},
                   const void *const *p_params = {},
                   size_t extra_count = {},
                   const void *const *p_extras = {},
                   const void *next = {})
    : function_(function), grid_dim_x_(grid_dim_x), grid_dim_y_(grid_dim_y), grid_dim_z_(grid_dim_z), block_dim_x_(block_dim_x),
      block_dim_y_(block_dim_y), block_dim_z_(block_dim_z), shared_mem_bytes_(shared_mem_bytes), param_count_(param_count),
      p_params_(p_params), extra_count_(extra_count), p_extras_(p_extras), next_(next) {}

  CudaLaunchInfoNV(const native_type &rhs) : CudaLaunchInfoNV(std::bit_cast<CudaLaunchInfoNV>(rhs)) {}

  CudaLaunchInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CudaLaunchInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const CudaLaunchInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CUDA_LAUNCH_INFO_NV;
  const void *next_;
  VkCudaFunctionNV function_;
  uint32_t grid_dim_x_;
  uint32_t grid_dim_y_;
  uint32_t grid_dim_z_;
  uint32_t block_dim_x_;
  uint32_t block_dim_y_;
  uint32_t block_dim_z_;
  uint32_t shared_mem_bytes_;
  size_t param_count_;
  const void *const *p_params_;
  size_t extra_count_;
  const void *const *p_extras_;
};

struct SurfaceProtectedCapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_PROTECTED_CAPABILITIES_KHR;

  using native_type = VkSurfaceProtectedCapabilitiesKHR;

  SurfaceProtectedCapabilitiesKHR() = default;

  SurfaceProtectedCapabilitiesKHR(const native_type &rhs)
    : SurfaceProtectedCapabilitiesKHR(std::bit_cast<SurfaceProtectedCapabilitiesKHR>(rhs)) {}

  SurfaceProtectedCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceProtectedCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceProtectedCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_PROTECTED_CAPABILITIES_KHR;
  const void *next_ = {};
  bool32 supports_protected_ = {};
};

struct CuFunctionCreateInfoNVX {

  static constexpr StructureType structure_type = StructureType::E_CU_FUNCTION_CREATE_INFO_NVX;

  using native_type = VkCuFunctionCreateInfoNVX;

  CuFunctionCreateInfoNVX(VkCuModuleNVX module = {}, const char *p_name = {}, const void *next = {})
    : module_(module), p_name_(p_name), next_(next) {}

  CuFunctionCreateInfoNVX(const native_type &rhs) : CuFunctionCreateInfoNVX(std::bit_cast<CuFunctionCreateInfoNVX>(rhs)) {}

  CuFunctionCreateInfoNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<CuFunctionCreateInfoNVX>(rhs);
    return *this;
  }

  auto operator<=>(const CuFunctionCreateInfoNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CU_FUNCTION_CREATE_INFO_NVX;
  const void *next_;
  VkCuModuleNVX module_;
  const char *p_name_;
};

struct PhysicalDeviceCubicClampFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceCubicClampFeaturesQCOM;

  PhysicalDeviceCubicClampFeaturesQCOM(bool32 cubic_range_clamp = {}, void *next = {})
    : cubic_range_clamp_(cubic_range_clamp), next_(next) {}

  PhysicalDeviceCubicClampFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceCubicClampFeaturesQCOM(std::bit_cast<PhysicalDeviceCubicClampFeaturesQCOM>(rhs)) {}

  PhysicalDeviceCubicClampFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCubicClampFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCubicClampFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM;
  void *next_;
  bool32 cubic_range_clamp_;
};

struct AccelerationStructureCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;

  using native_type = VkAccelerationStructureCreateInfoKHR;

  AccelerationStructureCreateInfoKHR(AccelerationStructureCreateMask create_flags = {},
                                     VkBuffer buffer = {},
                                     DeviceSize offset = {},
                                     DeviceSize size = {},
                                     AccelerationStructureType type = AccelerationStructureType::E_TOP_LEVEL_KHR,
                                     DeviceAddress device_address = {},
                                     const void *next = {})
    : create_flags_(create_flags), buffer_(buffer), offset_(offset), size_(size), type_(type), device_address_(device_address),
      next_(next) {}

  AccelerationStructureCreateInfoKHR(const native_type &rhs)
    : AccelerationStructureCreateInfoKHR(std::bit_cast<AccelerationStructureCreateInfoKHR>(rhs)) {}

  AccelerationStructureCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
  const void *next_;
  AccelerationStructureCreateMask create_flags_;
  VkBuffer buffer_;
  DeviceSize offset_;
  DeviceSize size_;
  AccelerationStructureType type_;
  DeviceAddress device_address_;
};

struct BindImagePlaneMemoryInfo {

  static constexpr StructureType structure_type = StructureType::E_BIND_IMAGE_PLANE_MEMORY_INFO;

  using native_type = VkBindImagePlaneMemoryInfo;

  BindImagePlaneMemoryInfo(ImageAspectMaskBit plane_aspect = {}, const void *next = {}) : plane_aspect_(plane_aspect), next_(next) {}

  BindImagePlaneMemoryInfo(const native_type &rhs) : BindImagePlaneMemoryInfo(std::bit_cast<BindImagePlaneMemoryInfo>(rhs)) {}

  BindImagePlaneMemoryInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BindImagePlaneMemoryInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BindImagePlaneMemoryInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BIND_IMAGE_PLANE_MEMORY_INFO;
  const void *next_;
  ImageAspectMaskBit plane_aspect_;
};

struct PipelineViewportSwizzleStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineViewportSwizzleStateCreateInfoNV;

  PipelineViewportSwizzleStateCreateInfoNV(PipelineViewportSwizzleStateCreateMask flags = {},
                                           uint32_t viewport_count = {},
                                           const ViewportSwizzleNV *p_viewport_swizzles = {},
                                           const void *next = {})
    : flags_(flags), viewport_count_(viewport_count), p_viewport_swizzles_(p_viewport_swizzles), next_(next) {}

  PipelineViewportSwizzleStateCreateInfoNV(const native_type &rhs)
    : PipelineViewportSwizzleStateCreateInfoNV(std::bit_cast<PipelineViewportSwizzleStateCreateInfoNV>(rhs)) {}

  PipelineViewportSwizzleStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportSwizzleStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportSwizzleStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
  const void *next_;
  PipelineViewportSwizzleStateCreateMask flags_;
  uint32_t viewport_count_;
  const ViewportSwizzleNV *p_viewport_swizzles_;
};

struct PipelineDiscardRectangleStateCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;

  using native_type = VkPipelineDiscardRectangleStateCreateInfoEXT;

  PipelineDiscardRectangleStateCreateInfoEXT(PipelineDiscardRectangleStateCreateMask flags = {},
                                             DiscardRectangleMode discard_rectangle_mode = DiscardRectangleMode::E_INCLUSIVE_EXT,
                                             uint32_t discard_rectangle_count = {},
                                             const Rect2D *p_discard_rectangles = {},
                                             const void *next = {})
    : flags_(flags), discard_rectangle_mode_(discard_rectangle_mode), discard_rectangle_count_(discard_rectangle_count),
      p_discard_rectangles_(p_discard_rectangles), next_(next) {}

  PipelineDiscardRectangleStateCreateInfoEXT(const native_type &rhs)
    : PipelineDiscardRectangleStateCreateInfoEXT(std::bit_cast<PipelineDiscardRectangleStateCreateInfoEXT>(rhs)) {}

  PipelineDiscardRectangleStateCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineDiscardRectangleStateCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineDiscardRectangleStateCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
  const void *next_;
  PipelineDiscardRectangleStateCreateMask flags_;
  DiscardRectangleMode discard_rectangle_mode_;
  uint32_t discard_rectangle_count_;
  const Rect2D *p_discard_rectangles_;
};

struct PipelineCreationFeedback {

  using native_type = VkPipelineCreationFeedback;

  PipelineCreationFeedback() = default;

  PipelineCreationFeedback(const native_type &rhs) : PipelineCreationFeedback(std::bit_cast<PipelineCreationFeedback>(rhs)) {}

  PipelineCreationFeedback &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCreationFeedback>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCreationFeedback &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  PipelineCreationFeedbackMask flags_ = {};
  uint64_t duration_ = {};
};

struct PipelineCreationFeedbackCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_CREATION_FEEDBACK_CREATE_INFO;

  using native_type = VkPipelineCreationFeedbackCreateInfo;

  PipelineCreationFeedbackCreateInfo(PipelineCreationFeedback *p_pipeline_creation_feedback = {},
                                     uint32_t pipeline_stage_creation_feedback_count = {},
                                     PipelineCreationFeedback *p_pipeline_stage_creation_feedbacks = {},
                                     const void *next = {})
    : p_pipeline_creation_feedback_(p_pipeline_creation_feedback),
      pipeline_stage_creation_feedback_count_(pipeline_stage_creation_feedback_count),
      p_pipeline_stage_creation_feedbacks_(p_pipeline_stage_creation_feedbacks), next_(next) {}

  PipelineCreationFeedbackCreateInfo(const native_type &rhs)
    : PipelineCreationFeedbackCreateInfo(std::bit_cast<PipelineCreationFeedbackCreateInfo>(rhs)) {}

  PipelineCreationFeedbackCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCreationFeedbackCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCreationFeedbackCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
  const void *next_;
  PipelineCreationFeedback *p_pipeline_creation_feedback_;
  uint32_t pipeline_stage_creation_feedback_count_;
  PipelineCreationFeedback *p_pipeline_stage_creation_feedbacks_;
};

struct BlitImageCubicWeightsInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM;

  using native_type = VkBlitImageCubicWeightsInfoQCOM;

  BlitImageCubicWeightsInfoQCOM(CubicFilterWeights cubic_weights = CubicFilterWeights::E_CATMULL_ROM_QCOM, const void *next = {})
    : cubic_weights_(cubic_weights), next_(next) {}

  BlitImageCubicWeightsInfoQCOM(const native_type &rhs)
    : BlitImageCubicWeightsInfoQCOM(std::bit_cast<BlitImageCubicWeightsInfoQCOM>(rhs)) {}

  BlitImageCubicWeightsInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<BlitImageCubicWeightsInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const BlitImageCubicWeightsInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM;
  const void *next_;
  CubicFilterWeights cubic_weights_;
};

struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;

  using native_type = VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

  PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX() = default;

  PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(const native_type &rhs)
    : PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(std::bit_cast<PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(rhs)) {}

  PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
  void *next_ = {};
  bool32 per_view_position_all_components_ = {};
};

struct SamplerBorderColorComponentMappingCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT;

  using native_type = VkSamplerBorderColorComponentMappingCreateInfoEXT;

  SamplerBorderColorComponentMappingCreateInfoEXT(ComponentMapping components = {}, bool32 srgb = {}, const void *next = {})
    : components_(components), srgb_(srgb), next_(next) {}

  SamplerBorderColorComponentMappingCreateInfoEXT(const native_type &rhs)
    : SamplerBorderColorComponentMappingCreateInfoEXT(std::bit_cast<SamplerBorderColorComponentMappingCreateInfoEXT>(rhs)) {}

  SamplerBorderColorComponentMappingCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerBorderColorComponentMappingCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerBorderColorComponentMappingCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT;
  const void *next_;
  ComponentMapping components_;
  bool32 srgb_;
};

struct PhysicalDeviceShadingRateImageFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;

  using native_type = VkPhysicalDeviceShadingRateImageFeaturesNV;

  PhysicalDeviceShadingRateImageFeaturesNV(bool32 shading_rate_image = {}, bool32 shading_rate_coarse_sample_order = {}, void *next = {})
    : shading_rate_image_(shading_rate_image), shading_rate_coarse_sample_order_(shading_rate_coarse_sample_order), next_(next) {}

  PhysicalDeviceShadingRateImageFeaturesNV(const native_type &rhs)
    : PhysicalDeviceShadingRateImageFeaturesNV(std::bit_cast<PhysicalDeviceShadingRateImageFeaturesNV>(rhs)) {}

  PhysicalDeviceShadingRateImageFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShadingRateImageFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShadingRateImageFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
  void *next_;
  bool32 shading_rate_image_;
  bool32 shading_rate_coarse_sample_order_;
};

struct PhysicalDeviceSurfaceInfo2KHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;

  using native_type = VkPhysicalDeviceSurfaceInfo2KHR;

  PhysicalDeviceSurfaceInfo2KHR(VkSurfaceKHR surface = {}, const void *next = {}) : surface_(surface), next_(next) {}

  PhysicalDeviceSurfaceInfo2KHR(const native_type &rhs)
    : PhysicalDeviceSurfaceInfo2KHR(std::bit_cast<PhysicalDeviceSurfaceInfo2KHR>(rhs)) {}

  PhysicalDeviceSurfaceInfo2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSurfaceInfo2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSurfaceInfo2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
  const void *next_;
  VkSurfaceKHR surface_;
};

struct SurfaceCapabilities2KHR {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_CAPABILITIES_2_KHR;

  using native_type = VkSurfaceCapabilities2KHR;

  SurfaceCapabilities2KHR() = default;

  SurfaceCapabilities2KHR(const native_type &rhs) : SurfaceCapabilities2KHR(std::bit_cast<SurfaceCapabilities2KHR>(rhs)) {}

  SurfaceCapabilities2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceCapabilities2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceCapabilities2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_CAPABILITIES_2_KHR;
  void *next_ = {};
  SurfaceCapabilitiesKHR surface_capabilities_ = {};
};

struct AccelerationStructureGeometryMotionTrianglesDataNV {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;

  using native_type = VkAccelerationStructureGeometryMotionTrianglesDataNV;

  AccelerationStructureGeometryMotionTrianglesDataNV(VkDeviceOrHostAddressConstKHR vertex_data = {}, const void *next = {})
    : vertex_data_(vertex_data), next_(next) {}

  AccelerationStructureGeometryMotionTrianglesDataNV(const native_type &rhs)
    : AccelerationStructureGeometryMotionTrianglesDataNV(std::bit_cast<AccelerationStructureGeometryMotionTrianglesDataNV>(rhs)) {}

  AccelerationStructureGeometryMotionTrianglesDataNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureGeometryMotionTrianglesDataNV>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureGeometryMotionTrianglesDataNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;
  const void *next_;
  VkDeviceOrHostAddressConstKHR vertex_data_;
};

struct PipelineCoverageToColorStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineCoverageToColorStateCreateInfoNV;

  PipelineCoverageToColorStateCreateInfoNV(PipelineCoverageToColorStateCreateMask flags = {},
                                           bool32 coverage_to_color_enable = {},
                                           uint32_t coverage_to_color_location = {},
                                           const void *next = {})
    : flags_(flags), coverage_to_color_enable_(coverage_to_color_enable), coverage_to_color_location_(coverage_to_color_location),
      next_(next) {}

  PipelineCoverageToColorStateCreateInfoNV(const native_type &rhs)
    : PipelineCoverageToColorStateCreateInfoNV(std::bit_cast<PipelineCoverageToColorStateCreateInfoNV>(rhs)) {}

  PipelineCoverageToColorStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineCoverageToColorStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineCoverageToColorStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
  const void *next_;
  PipelineCoverageToColorStateCreateMask flags_;
  bool32 coverage_to_color_enable_;
  uint32_t coverage_to_color_location_;
};

struct SurfaceFormat2KHR {

  static constexpr StructureType structure_type = StructureType::E_SURFACE_FORMAT_2_KHR;

  using native_type = VkSurfaceFormat2KHR;

  SurfaceFormat2KHR() = default;

  SurfaceFormat2KHR(const native_type &rhs) : SurfaceFormat2KHR(std::bit_cast<SurfaceFormat2KHR>(rhs)) {}

  SurfaceFormat2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SurfaceFormat2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const SurfaceFormat2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SURFACE_FORMAT_2_KHR;
  void *next_ = {};
  SurfaceFormatKHR surface_format_ = {};
};

struct TimelineSemaphoreSubmitInfo {

  static constexpr StructureType structure_type = StructureType::E_TIMELINE_SEMAPHORE_SUBMIT_INFO;

  using native_type = VkTimelineSemaphoreSubmitInfo;

  TimelineSemaphoreSubmitInfo(uint32_t wait_semaphore_value_count = {},
                              const uint64_t *p_wait_semaphore_values = {},
                              uint32_t signal_semaphore_value_count = {},
                              const uint64_t *p_signal_semaphore_values = {},
                              const void *next = {})
    : wait_semaphore_value_count_(wait_semaphore_value_count), p_wait_semaphore_values_(p_wait_semaphore_values),
      signal_semaphore_value_count_(signal_semaphore_value_count), p_signal_semaphore_values_(p_signal_semaphore_values), next_(next) {}

  TimelineSemaphoreSubmitInfo(const native_type &rhs) : TimelineSemaphoreSubmitInfo(std::bit_cast<TimelineSemaphoreSubmitInfo>(rhs)) {}

  TimelineSemaphoreSubmitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<TimelineSemaphoreSubmitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const TimelineSemaphoreSubmitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_TIMELINE_SEMAPHORE_SUBMIT_INFO;
  const void *next_;
  uint32_t wait_semaphore_value_count_;
  const uint64_t *p_wait_semaphore_values_;
  uint32_t signal_semaphore_value_count_;
  const uint64_t *p_signal_semaphore_values_;
};

struct MemoryDedicatedAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_DEDICATED_ALLOCATE_INFO;

  using native_type = VkMemoryDedicatedAllocateInfo;

  MemoryDedicatedAllocateInfo(VkImage image = {}, VkBuffer buffer = {}, const void *next = {})
    : image_(image), buffer_(buffer), next_(next) {}

  MemoryDedicatedAllocateInfo(const native_type &rhs) : MemoryDedicatedAllocateInfo(std::bit_cast<MemoryDedicatedAllocateInfo>(rhs)) {}

  MemoryDedicatedAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryDedicatedAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryDedicatedAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_DEDICATED_ALLOCATE_INFO;
  const void *next_;
  VkImage image_;
  VkBuffer buffer_;
};

struct DisplayModePropertiesKHR {

  using native_type = VkDisplayModePropertiesKHR;

  DisplayModePropertiesKHR() = default;

  DisplayModePropertiesKHR(const native_type &rhs) : DisplayModePropertiesKHR(std::bit_cast<DisplayModePropertiesKHR>(rhs)) {}

  DisplayModePropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayModePropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayModePropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  VkDisplayModeKHR display_mode_ = {};
  DisplayModeParametersKHR parameters_ = {};
};

struct DisplayModeProperties2KHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_MODE_PROPERTIES_2_KHR;

  using native_type = VkDisplayModeProperties2KHR;

  DisplayModeProperties2KHR() = default;

  DisplayModeProperties2KHR(const native_type &rhs) : DisplayModeProperties2KHR(std::bit_cast<DisplayModeProperties2KHR>(rhs)) {}

  DisplayModeProperties2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayModeProperties2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayModeProperties2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_MODE_PROPERTIES_2_KHR;
  void *next_ = {};
  DisplayModePropertiesKHR display_mode_properties_ = {};
};

struct PhysicalDeviceExclusiveScissorFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;

  using native_type = VkPhysicalDeviceExclusiveScissorFeaturesNV;

  PhysicalDeviceExclusiveScissorFeaturesNV(bool32 exclusive_scissor = {}, void *next = {})
    : exclusive_scissor_(exclusive_scissor), next_(next) {}

  PhysicalDeviceExclusiveScissorFeaturesNV(const native_type &rhs)
    : PhysicalDeviceExclusiveScissorFeaturesNV(std::bit_cast<PhysicalDeviceExclusiveScissorFeaturesNV>(rhs)) {}

  PhysicalDeviceExclusiveScissorFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceExclusiveScissorFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceExclusiveScissorFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
  void *next_;
  bool32 exclusive_scissor_;
};

struct PhysicalDevicePushDescriptorPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;

  using native_type = VkPhysicalDevicePushDescriptorPropertiesKHR;

  PhysicalDevicePushDescriptorPropertiesKHR() = default;

  PhysicalDevicePushDescriptorPropertiesKHR(const native_type &rhs)
    : PhysicalDevicePushDescriptorPropertiesKHR(std::bit_cast<PhysicalDevicePushDescriptorPropertiesKHR>(rhs)) {}

  PhysicalDevicePushDescriptorPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePushDescriptorPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePushDescriptorPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t max_push_descriptors_ = {};
};

struct CommandBufferInheritanceConditionalRenderingInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;

  using native_type = VkCommandBufferInheritanceConditionalRenderingInfoEXT;

  CommandBufferInheritanceConditionalRenderingInfoEXT(bool32 conditional_rendering_enable = {}, const void *next = {})
    : conditional_rendering_enable_(conditional_rendering_enable), next_(next) {}

  CommandBufferInheritanceConditionalRenderingInfoEXT(const native_type &rhs)
    : CommandBufferInheritanceConditionalRenderingInfoEXT(std::bit_cast<CommandBufferInheritanceConditionalRenderingInfoEXT>(rhs)) {}

  CommandBufferInheritanceConditionalRenderingInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferInheritanceConditionalRenderingInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferInheritanceConditionalRenderingInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
  const void *next_;
  bool32 conditional_rendering_enable_;
};

struct DisplayPlaneInfo2KHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_PLANE_INFO_2_KHR;

  using native_type = VkDisplayPlaneInfo2KHR;

  DisplayPlaneInfo2KHR(VkDisplayModeKHR mode = {}, uint32_t plane_index = {}, const void *next = {})
    : mode_(mode), plane_index_(plane_index), next_(next) {}

  DisplayPlaneInfo2KHR(const native_type &rhs) : DisplayPlaneInfo2KHR(std::bit_cast<DisplayPlaneInfo2KHR>(rhs)) {}

  DisplayPlaneInfo2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPlaneInfo2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPlaneInfo2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_PLANE_INFO_2_KHR;
  const void *next_;
  VkDisplayModeKHR mode_;
  uint32_t plane_index_;
};

struct DepthBiasInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEPTH_BIAS_INFO_EXT;

  using native_type = VkDepthBiasInfoEXT;

  DepthBiasInfoEXT(float depth_bias_constant_factor = {},
                   float depth_bias_clamp = {},
                   float depth_bias_slope_factor = {},
                   const void *next = {})
    : depth_bias_constant_factor_(depth_bias_constant_factor), depth_bias_clamp_(depth_bias_clamp),
      depth_bias_slope_factor_(depth_bias_slope_factor), next_(next) {}

  DepthBiasInfoEXT(const native_type &rhs) : DepthBiasInfoEXT(std::bit_cast<DepthBiasInfoEXT>(rhs)) {}

  DepthBiasInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DepthBiasInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DepthBiasInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEPTH_BIAS_INFO_EXT;
  const void *next_;
  float depth_bias_constant_factor_;
  float depth_bias_clamp_;
  float depth_bias_slope_factor_;
};

struct PhysicalDeviceDiagnosticsConfigFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;

  using native_type = VkPhysicalDeviceDiagnosticsConfigFeaturesNV;

  PhysicalDeviceDiagnosticsConfigFeaturesNV(bool32 diagnostics_config = {}, void *next = {})
    : diagnostics_config_(diagnostics_config), next_(next) {}

  PhysicalDeviceDiagnosticsConfigFeaturesNV(const native_type &rhs)
    : PhysicalDeviceDiagnosticsConfigFeaturesNV(std::bit_cast<PhysicalDeviceDiagnosticsConfigFeaturesNV>(rhs)) {}

  PhysicalDeviceDiagnosticsConfigFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDiagnosticsConfigFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDiagnosticsConfigFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
  void *next_;
  bool32 diagnostics_config_;
};

struct ImageResolve {

  using native_type = VkImageResolve;

  ImageResolve(ImageSubresourceLayers src_subresource = {},
               Offset3D src_offset = {},
               ImageSubresourceLayers dst_subresource = {},
               Offset3D dst_offset = {},
               Extent3D extent = {})
    : src_subresource_(src_subresource), src_offset_(src_offset), dst_subresource_(dst_subresource), dst_offset_(dst_offset),
      extent_(extent) {}

  ImageResolve(const native_type &rhs) : ImageResolve(std::bit_cast<ImageResolve>(rhs)) {}

  ImageResolve &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageResolve>(rhs);
    return *this;
  }

  auto operator<=>(const ImageResolve &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ImageSubresourceLayers src_subresource_;
  Offset3D src_offset_;
  ImageSubresourceLayers dst_subresource_;
  Offset3D dst_offset_;
  Extent3D extent_;
};

struct DisplayPlaneCapabilities2KHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_PLANE_CAPABILITIES_2_KHR;

  using native_type = VkDisplayPlaneCapabilities2KHR;

  DisplayPlaneCapabilities2KHR() = default;

  DisplayPlaneCapabilities2KHR(const native_type &rhs) : DisplayPlaneCapabilities2KHR(std::bit_cast<DisplayPlaneCapabilities2KHR>(rhs)) {}

  DisplayPlaneCapabilities2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayPlaneCapabilities2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayPlaneCapabilities2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_PLANE_CAPABILITIES_2_KHR;
  void *next_ = {};
  DisplayPlaneCapabilitiesKHR capabilities_ = {};
};

struct SharedPresentSurfaceCapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;

  using native_type = VkSharedPresentSurfaceCapabilitiesKHR;

  SharedPresentSurfaceCapabilitiesKHR() = default;

  SharedPresentSurfaceCapabilitiesKHR(const native_type &rhs)
    : SharedPresentSurfaceCapabilitiesKHR(std::bit_cast<SharedPresentSurfaceCapabilitiesKHR>(rhs)) {}

  SharedPresentSurfaceCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<SharedPresentSurfaceCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const SharedPresentSurfaceCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
  void *next_ = {};
  ImageUsageMask shared_present_supported_usage_flags_ = {};
};

struct PhysicalDevice16BitStorageFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;

  using native_type = VkPhysicalDevice16BitStorageFeatures;

  PhysicalDevice16BitStorageFeatures(bool32 storage_buffer16bit_access = {},
                                     bool32 uniform_and_storage_buffer16bit_access = {},
                                     bool32 storage_push_constant16 = {},
                                     bool32 storage_input_output16 = {},
                                     void *next = {})
    : storage_buffer16bit_access_(storage_buffer16bit_access),
      uniform_and_storage_buffer16bit_access_(uniform_and_storage_buffer16bit_access), storage_push_constant16_(storage_push_constant16),
      storage_input_output16_(storage_input_output16), next_(next) {}

  PhysicalDevice16BitStorageFeatures(const native_type &rhs)
    : PhysicalDevice16BitStorageFeatures(std::bit_cast<PhysicalDevice16BitStorageFeatures>(rhs)) {}

  PhysicalDevice16BitStorageFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevice16BitStorageFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevice16BitStorageFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
  void *next_;
  bool32 storage_buffer16bit_access_;
  bool32 uniform_and_storage_buffer16bit_access_;
  bool32 storage_push_constant16_;
  bool32 storage_input_output16_;
};

struct StridedDeviceAddressRegionKHR {

  using native_type = VkStridedDeviceAddressRegionKHR;

  StridedDeviceAddressRegionKHR(DeviceAddress device_address = {}, DeviceSize stride = {}, DeviceSize size = {})
    : device_address_(device_address), stride_(stride), size_(size) {}

  StridedDeviceAddressRegionKHR(const native_type &rhs)
    : StridedDeviceAddressRegionKHR(std::bit_cast<StridedDeviceAddressRegionKHR>(rhs)) {}

  StridedDeviceAddressRegionKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<StridedDeviceAddressRegionKHR>(rhs);
    return *this;
  }

  auto operator<=>(const StridedDeviceAddressRegionKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  DeviceAddress device_address_;
  DeviceSize stride_;
  DeviceSize size_;
};

struct BufferMemoryRequirementsInfo2 {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_MEMORY_REQUIREMENTS_INFO_2;

  using native_type = VkBufferMemoryRequirementsInfo2;

  BufferMemoryRequirementsInfo2(VkBuffer buffer = {}, const void *next = {}) : buffer_(buffer), next_(next) {}

  BufferMemoryRequirementsInfo2(const native_type &rhs)
    : BufferMemoryRequirementsInfo2(std::bit_cast<BufferMemoryRequirementsInfo2>(rhs)) {}

  BufferMemoryRequirementsInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferMemoryRequirementsInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const BufferMemoryRequirementsInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
  const void *next_;
  VkBuffer buffer_;
};

struct ImageSparseMemoryRequirementsInfo2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;

  using native_type = VkImageSparseMemoryRequirementsInfo2;

  ImageSparseMemoryRequirementsInfo2(VkImage image = {}, const void *next = {}) : image_(image), next_(next) {}

  ImageSparseMemoryRequirementsInfo2(const native_type &rhs)
    : ImageSparseMemoryRequirementsInfo2(std::bit_cast<ImageSparseMemoryRequirementsInfo2>(rhs)) {}

  ImageSparseMemoryRequirementsInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageSparseMemoryRequirementsInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageSparseMemoryRequirementsInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
  const void *next_;
  VkImage image_;
};

struct VideoDecodeAV1DpbSlotInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR;

  using native_type = VkVideoDecodeAV1DpbSlotInfoKHR;

  VideoDecodeAV1DpbSlotInfoKHR(const StdVideoDecodeAV1ReferenceInfo *p_std_reference_info = {}, const void *next = {})
    : p_std_reference_info_(p_std_reference_info), next_(next) {}

  VideoDecodeAV1DpbSlotInfoKHR(const native_type &rhs) : VideoDecodeAV1DpbSlotInfoKHR(std::bit_cast<VideoDecodeAV1DpbSlotInfoKHR>(rhs)) {}

  VideoDecodeAV1DpbSlotInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeAV1DpbSlotInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeAV1DpbSlotInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR;
  const void *next_;
  const StdVideoDecodeAV1ReferenceInfo *p_std_reference_info_;
};

struct SamplerYcbcrConversionImageFormatProperties {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;

  using native_type = VkSamplerYcbcrConversionImageFormatProperties;

  SamplerYcbcrConversionImageFormatProperties() = default;

  SamplerYcbcrConversionImageFormatProperties(const native_type &rhs)
    : SamplerYcbcrConversionImageFormatProperties(std::bit_cast<SamplerYcbcrConversionImageFormatProperties>(rhs)) {}

  SamplerYcbcrConversionImageFormatProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerYcbcrConversionImageFormatProperties>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerYcbcrConversionImageFormatProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
  void *next_ = {};
  uint32_t combined_image_sampler_descriptor_count_ = {};
};

struct PhysicalDeviceProvokingVertexFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;

  using native_type = VkPhysicalDeviceProvokingVertexFeaturesEXT;

  PhysicalDeviceProvokingVertexFeaturesEXT(bool32 provoking_vertex_last = {},
                                           bool32 transform_feedback_preserves_provoking_vertex = {},
                                           void *next = {})
    : provoking_vertex_last_(provoking_vertex_last),
      transform_feedback_preserves_provoking_vertex_(transform_feedback_preserves_provoking_vertex), next_(next) {}

  PhysicalDeviceProvokingVertexFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceProvokingVertexFeaturesEXT(std::bit_cast<PhysicalDeviceProvokingVertexFeaturesEXT>(rhs)) {}

  PhysicalDeviceProvokingVertexFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceProvokingVertexFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceProvokingVertexFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;
  void *next_;
  bool32 provoking_vertex_last_;
  bool32 transform_feedback_preserves_provoking_vertex_;
};

struct PipelineShaderStageRequiredSubgroupSizeCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;

  using native_type = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

  PipelineShaderStageRequiredSubgroupSizeCreateInfo() = default;

  PipelineShaderStageRequiredSubgroupSizeCreateInfo(const native_type &rhs)
    : PipelineShaderStageRequiredSubgroupSizeCreateInfo(std::bit_cast<PipelineShaderStageRequiredSubgroupSizeCreateInfo>(rhs)) {}

  PipelineShaderStageRequiredSubgroupSizeCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineShaderStageRequiredSubgroupSizeCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineShaderStageRequiredSubgroupSizeCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
  void *next_ = {};
  uint32_t required_subgroup_size_ = {};
};

struct DeviceGroupDeviceCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_GROUP_DEVICE_CREATE_INFO;

  using native_type = VkDeviceGroupDeviceCreateInfo;

  DeviceGroupDeviceCreateInfo(uint32_t physical_device_count = {}, const VkPhysicalDevice *p_physical_devices = {}, const void *next = {})
    : physical_device_count_(physical_device_count), p_physical_devices_(p_physical_devices), next_(next) {}

  DeviceGroupDeviceCreateInfo(const native_type &rhs) : DeviceGroupDeviceCreateInfo(std::bit_cast<DeviceGroupDeviceCreateInfo>(rhs)) {}

  DeviceGroupDeviceCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceGroupDeviceCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceGroupDeviceCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_GROUP_DEVICE_CREATE_INFO;
  const void *next_;
  uint32_t physical_device_count_;
  const VkPhysicalDevice *p_physical_devices_;
};

struct DeviceImageMemoryRequirements {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_IMAGE_MEMORY_REQUIREMENTS;

  using native_type = VkDeviceImageMemoryRequirements;

  DeviceImageMemoryRequirements(const ImageCreateInfo *p_create_info = {}, ImageAspectMaskBit plane_aspect = {}, const void *next = {})
    : p_create_info_(p_create_info), plane_aspect_(plane_aspect), next_(next) {}

  DeviceImageMemoryRequirements(const native_type &rhs)
    : DeviceImageMemoryRequirements(std::bit_cast<DeviceImageMemoryRequirements>(rhs)) {}

  DeviceImageMemoryRequirements &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceImageMemoryRequirements>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceImageMemoryRequirements &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_IMAGE_MEMORY_REQUIREMENTS;
  const void *next_;
  const ImageCreateInfo *p_create_info_;
  ImageAspectMaskBit plane_aspect_;
};

struct SparseImageMemoryRequirements2 {

  static constexpr StructureType structure_type = StructureType::E_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;

  using native_type = VkSparseImageMemoryRequirements2;

  SparseImageMemoryRequirements2() = default;

  SparseImageMemoryRequirements2(const native_type &rhs)
    : SparseImageMemoryRequirements2(std::bit_cast<SparseImageMemoryRequirements2>(rhs)) {}

  SparseImageMemoryRequirements2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<SparseImageMemoryRequirements2>(rhs);
    return *this;
  }

  auto operator<=>(const SparseImageMemoryRequirements2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
  void *next_ = {};
  SparseImageMemoryRequirements memory_requirements_ = {};
};

struct PhysicalDevicePointClippingProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;

  using native_type = VkPhysicalDevicePointClippingProperties;

  PhysicalDevicePointClippingProperties() = default;

  PhysicalDevicePointClippingProperties(const native_type &rhs)
    : PhysicalDevicePointClippingProperties(std::bit_cast<PhysicalDevicePointClippingProperties>(rhs)) {}

  PhysicalDevicePointClippingProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePointClippingProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePointClippingProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
  void *next_ = {};
  PointClippingBehavior point_clipping_behavior_ = {};
};

struct MemoryDedicatedRequirements {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_DEDICATED_REQUIREMENTS;

  using native_type = VkMemoryDedicatedRequirements;

  MemoryDedicatedRequirements() = default;

  MemoryDedicatedRequirements(const native_type &rhs) : MemoryDedicatedRequirements(std::bit_cast<MemoryDedicatedRequirements>(rhs)) {}

  MemoryDedicatedRequirements &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryDedicatedRequirements>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryDedicatedRequirements &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_DEDICATED_REQUIREMENTS;
  void *next_ = {};
  bool32 prefers_dedicated_allocation_ = {};
  bool32 requires_dedicated_allocation_ = {};
};

struct PhysicalDeviceMeshShaderPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceMeshShaderPropertiesNV;

  PhysicalDeviceMeshShaderPropertiesNV() = default;

  PhysicalDeviceMeshShaderPropertiesNV(const native_type &rhs)
    : PhysicalDeviceMeshShaderPropertiesNV(std::bit_cast<PhysicalDeviceMeshShaderPropertiesNV>(rhs)) {}

  PhysicalDeviceMeshShaderPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMeshShaderPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMeshShaderPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
  void *next_ = {};
  uint32_t max_draw_mesh_tasks_count_ = {};
  uint32_t max_task_work_group_invocations_ = {};
  std::array<uint32_t, 3> max_task_work_group_size_ = {};
  uint32_t max_task_total_memory_size_ = {};
  uint32_t max_task_output_count_ = {};
  uint32_t max_mesh_work_group_invocations_ = {};
  std::array<uint32_t, 3> max_mesh_work_group_size_ = {};
  uint32_t max_mesh_total_memory_size_ = {};
  uint32_t max_mesh_output_vertices_ = {};
  uint32_t max_mesh_output_primitives_ = {};
  uint32_t max_mesh_multiview_view_count_ = {};
  uint32_t mesh_output_per_vertex_granularity_ = {};
  uint32_t mesh_output_per_primitive_granularity_ = {};
};

struct PhysicalDeviceMaintenance5PropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceMaintenance5PropertiesKHR;

  PhysicalDeviceMaintenance5PropertiesKHR() = default;

  PhysicalDeviceMaintenance5PropertiesKHR(const native_type &rhs)
    : PhysicalDeviceMaintenance5PropertiesKHR(std::bit_cast<PhysicalDeviceMaintenance5PropertiesKHR>(rhs)) {}

  PhysicalDeviceMaintenance5PropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance5PropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance5PropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR;
  void *next_ = {};
  bool32 early_fragment_multisample_coverage_after_sample_counting_ = {};
  bool32 early_fragment_sample_mask_test_before_sample_counting_ = {};
  bool32 depth_stencil_swizzle_one_support_ = {};
  bool32 polygon_mode_point_size_ = {};
  bool32 non_strict_single_pixel_wide_lines_use_parallelogram_ = {};
  bool32 non_strict_wide_lines_use_parallelogram_ = {};
};

struct ImageViewSlicedCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_SLICED_CREATE_INFO_EXT;

  using native_type = VkImageViewSlicedCreateInfoEXT;

  ImageViewSlicedCreateInfoEXT(uint32_t slice_offset = {}, uint32_t slice_count = {}, const void *next = {})
    : slice_offset_(slice_offset), slice_count_(slice_count), next_(next) {}

  ImageViewSlicedCreateInfoEXT(const native_type &rhs) : ImageViewSlicedCreateInfoEXT(std::bit_cast<ImageViewSlicedCreateInfoEXT>(rhs)) {}

  ImageViewSlicedCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewSlicedCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewSlicedCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_SLICED_CREATE_INFO_EXT;
  const void *next_;
  uint32_t slice_offset_;
  uint32_t slice_count_;
};

struct VideoEncodeH265GopRemainingFrameInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR;

  using native_type = VkVideoEncodeH265GopRemainingFrameInfoKHR;

  VideoEncodeH265GopRemainingFrameInfoKHR(bool32 use_gop_remaining_frames = {},
                                          uint32_t gop_remaining_i = {},
                                          uint32_t gop_remaining_p = {},
                                          uint32_t gop_remaining_b = {},
                                          const void *next = {})
    : use_gop_remaining_frames_(use_gop_remaining_frames), gop_remaining_i_(gop_remaining_i), gop_remaining_p_(gop_remaining_p),
      gop_remaining_b_(gop_remaining_b), next_(next) {}

  VideoEncodeH265GopRemainingFrameInfoKHR(const native_type &rhs)
    : VideoEncodeH265GopRemainingFrameInfoKHR(std::bit_cast<VideoEncodeH265GopRemainingFrameInfoKHR>(rhs)) {}

  VideoEncodeH265GopRemainingFrameInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH265GopRemainingFrameInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH265GopRemainingFrameInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR;
  const void *next_;
  bool32 use_gop_remaining_frames_;
  uint32_t gop_remaining_i_;
  uint32_t gop_remaining_p_;
  uint32_t gop_remaining_b_;
};

struct PhysicalDeviceMaintenance7PropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceMaintenance7PropertiesKHR;

  PhysicalDeviceMaintenance7PropertiesKHR() = default;

  PhysicalDeviceMaintenance7PropertiesKHR(const native_type &rhs)
    : PhysicalDeviceMaintenance7PropertiesKHR(std::bit_cast<PhysicalDeviceMaintenance7PropertiesKHR>(rhs)) {}

  PhysicalDeviceMaintenance7PropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance7PropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance7PropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR;
  void *next_ = {};
  bool32 robust_fragment_shading_rate_attachment_access_ = {};
  bool32 separate_depth_stencil_attachment_access_ = {};
  uint32_t max_descriptor_set_total_uniform_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_total_storage_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_total_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_total_storage_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_total_buffers_dynamic_ = {};
};

struct PhysicalDeviceShaderAtomicInt64Features {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;

  using native_type = VkPhysicalDeviceShaderAtomicInt64Features;

  PhysicalDeviceShaderAtomicInt64Features(bool32 shader_buffer_int64atomics = {}, bool32 shader_shared_int64atomics = {}, void *next = {})
    : shader_buffer_int64atomics_(shader_buffer_int64atomics), shader_shared_int64atomics_(shader_shared_int64atomics), next_(next) {}

  PhysicalDeviceShaderAtomicInt64Features(const native_type &rhs)
    : PhysicalDeviceShaderAtomicInt64Features(std::bit_cast<PhysicalDeviceShaderAtomicInt64Features>(rhs)) {}

  PhysicalDeviceShaderAtomicInt64Features &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderAtomicInt64Features>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderAtomicInt64Features &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
  void *next_;
  bool32 shader_buffer_int64atomics_;
  bool32 shader_shared_int64atomics_;
};

struct PhysicalDeviceSamplerYcbcrConversionFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;

  using native_type = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

  PhysicalDeviceSamplerYcbcrConversionFeatures(bool32 sampler_ycbcr_conversion = {}, void *next = {})
    : sampler_ycbcr_conversion_(sampler_ycbcr_conversion), next_(next) {}

  PhysicalDeviceSamplerYcbcrConversionFeatures(const native_type &rhs)
    : PhysicalDeviceSamplerYcbcrConversionFeatures(std::bit_cast<PhysicalDeviceSamplerYcbcrConversionFeatures>(rhs)) {}

  PhysicalDeviceSamplerYcbcrConversionFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSamplerYcbcrConversionFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSamplerYcbcrConversionFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
  void *next_;
  bool32 sampler_ycbcr_conversion_;
};

struct VideoDecodeAV1ProfileInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_AV1_PROFILE_INFO_KHR;

  using native_type = VkVideoDecodeAV1ProfileInfoKHR;

  VideoDecodeAV1ProfileInfoKHR(StdVideoAV1Profile std_profile = {}, bool32 film_grain_support = {}, const void *next = {})
    : std_profile_(std_profile), film_grain_support_(film_grain_support), next_(next) {}

  VideoDecodeAV1ProfileInfoKHR(const native_type &rhs) : VideoDecodeAV1ProfileInfoKHR(std::bit_cast<VideoDecodeAV1ProfileInfoKHR>(rhs)) {}

  VideoDecodeAV1ProfileInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeAV1ProfileInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeAV1ProfileInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_AV1_PROFILE_INFO_KHR;
  const void *next_;
  StdVideoAV1Profile std_profile_;
  bool32 film_grain_support_;
};

struct AttachmentDescription2 {

  static constexpr StructureType structure_type = StructureType::E_ATTACHMENT_DESCRIPTION_2;

  using native_type = VkAttachmentDescription2;

  AttachmentDescription2(AttachmentDescriptionMask flags = {},
                         Format format = Format::E_UNDEFINED,
                         SampleCountMaskBit samples = {},
                         AttachmentLoadOp load_op = AttachmentLoadOp::E_LOAD,
                         AttachmentStoreOp store_op = AttachmentStoreOp::E_STORE,
                         AttachmentLoadOp stencil_load_op = AttachmentLoadOp::E_LOAD,
                         AttachmentStoreOp stencil_store_op = AttachmentStoreOp::E_STORE,
                         ImageLayout initial_layout = ImageLayout::E_UNDEFINED,
                         ImageLayout final_layout = ImageLayout::E_UNDEFINED,
                         const void *next = {})
    : flags_(flags), format_(format), samples_(samples), load_op_(load_op), store_op_(store_op), stencil_load_op_(stencil_load_op),
      stencil_store_op_(stencil_store_op), initial_layout_(initial_layout), final_layout_(final_layout), next_(next) {}

  AttachmentDescription2(const native_type &rhs) : AttachmentDescription2(std::bit_cast<AttachmentDescription2>(rhs)) {}

  AttachmentDescription2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<AttachmentDescription2>(rhs);
    return *this;
  }

  auto operator<=>(const AttachmentDescription2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ATTACHMENT_DESCRIPTION_2;
  const void *next_;
  AttachmentDescriptionMask flags_;
  Format format_;
  SampleCountMaskBit samples_;
  AttachmentLoadOp load_op_;
  AttachmentStoreOp store_op_;
  AttachmentLoadOp stencil_load_op_;
  AttachmentStoreOp stencil_store_op_;
  ImageLayout initial_layout_;
  ImageLayout final_layout_;
};

struct VideoEncodeCapabilitiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_CAPABILITIES_KHR;

  using native_type = VkVideoEncodeCapabilitiesKHR;

  VideoEncodeCapabilitiesKHR() = default;

  VideoEncodeCapabilitiesKHR(const native_type &rhs) : VideoEncodeCapabilitiesKHR(std::bit_cast<VideoEncodeCapabilitiesKHR>(rhs)) {}

  VideoEncodeCapabilitiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeCapabilitiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeCapabilitiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_CAPABILITIES_KHR;
  void *next_ = {};
  VideoEncodeCapabilityMask flags_ = {};
  VideoEncodeRateControlModeMask rate_control_modes_ = {};
  uint32_t max_rate_control_layers_ = {};
  uint64_t max_bitrate_ = {};
  uint32_t max_quality_levels_ = {};
  Extent2D encode_input_picture_granularity_ = {};
  VideoEncodeFeedbackMask supported_encode_feedback_flags_ = {};
};

struct TextureLODGatherFormatPropertiesAMD {

  static constexpr StructureType structure_type = StructureType::E_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;

  using native_type = VkTextureLODGatherFormatPropertiesAMD;

  TextureLODGatherFormatPropertiesAMD() = default;

  TextureLODGatherFormatPropertiesAMD(const native_type &rhs)
    : TextureLODGatherFormatPropertiesAMD(std::bit_cast<TextureLODGatherFormatPropertiesAMD>(rhs)) {}

  TextureLODGatherFormatPropertiesAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<TextureLODGatherFormatPropertiesAMD>(rhs);
    return *this;
  }

  auto operator<=>(const TextureLODGatherFormatPropertiesAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
  void *next_ = {};
  bool32 supports_texture_gather_lodbias_amd_ = {};
};

struct SamplerCustomBorderColorCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;

  using native_type = VkSamplerCustomBorderColorCreateInfoEXT;

  SamplerCustomBorderColorCreateInfoEXT(VkClearColorValue custom_border_color = {},
                                        Format format = Format::E_UNDEFINED,
                                        const void *next = {})
    : custom_border_color_(custom_border_color), format_(format), next_(next) {}

  SamplerCustomBorderColorCreateInfoEXT(const native_type &rhs)
    : SamplerCustomBorderColorCreateInfoEXT(std::bit_cast<SamplerCustomBorderColorCreateInfoEXT>(rhs)) {}

  SamplerCustomBorderColorCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerCustomBorderColorCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerCustomBorderColorCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
  const void *next_;
  VkClearColorValue custom_border_color_;
  Format format_;
};

struct ConditionalRenderingBeginInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;

  using native_type = VkConditionalRenderingBeginInfoEXT;

  ConditionalRenderingBeginInfoEXT(VkBuffer buffer = {}, DeviceSize offset = {}, ConditionalRenderingMask flags = {}, const void *next = {})
    : buffer_(buffer), offset_(offset), flags_(flags), next_(next) {}

  ConditionalRenderingBeginInfoEXT(const native_type &rhs)
    : ConditionalRenderingBeginInfoEXT(std::bit_cast<ConditionalRenderingBeginInfoEXT>(rhs)) {}

  ConditionalRenderingBeginInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ConditionalRenderingBeginInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ConditionalRenderingBeginInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
  const void *next_;
  VkBuffer buffer_;
  DeviceSize offset_;
  ConditionalRenderingMask flags_;
};

struct PhysicalDeviceProtectedMemoryFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;

  using native_type = VkPhysicalDeviceProtectedMemoryFeatures;

  PhysicalDeviceProtectedMemoryFeatures(bool32 protected_memory = {}, void *next = {}) : protected_memory_(protected_memory), next_(next) {}

  PhysicalDeviceProtectedMemoryFeatures(const native_type &rhs)
    : PhysicalDeviceProtectedMemoryFeatures(std::bit_cast<PhysicalDeviceProtectedMemoryFeatures>(rhs)) {}

  PhysicalDeviceProtectedMemoryFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceProtectedMemoryFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceProtectedMemoryFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
  void *next_;
  bool32 protected_memory_;
};

struct PhysicalDeviceShaderClockFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderClockFeaturesKHR;

  PhysicalDeviceShaderClockFeaturesKHR(bool32 shader_subgroup_clock = {}, bool32 shader_device_clock = {}, void *next = {})
    : shader_subgroup_clock_(shader_subgroup_clock), shader_device_clock_(shader_device_clock), next_(next) {}

  PhysicalDeviceShaderClockFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderClockFeaturesKHR(std::bit_cast<PhysicalDeviceShaderClockFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderClockFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderClockFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderClockFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
  void *next_;
  bool32 shader_subgroup_clock_;
  bool32 shader_device_clock_;
};

struct SemaphoreWaitInfo {

  static constexpr StructureType structure_type = StructureType::E_SEMAPHORE_WAIT_INFO;

  using native_type = VkSemaphoreWaitInfo;

  SemaphoreWaitInfo(SemaphoreWaitMask flags = {},
                    uint32_t semaphore_count = {},
                    const VkSemaphore *p_semaphores = {},
                    const uint64_t *p_values = {},
                    const void *next = {})
    : flags_(flags), semaphore_count_(semaphore_count), p_semaphores_(p_semaphores), p_values_(p_values), next_(next) {}

  SemaphoreWaitInfo(const native_type &rhs) : SemaphoreWaitInfo(std::bit_cast<SemaphoreWaitInfo>(rhs)) {}

  SemaphoreWaitInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SemaphoreWaitInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SemaphoreWaitInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SEMAPHORE_WAIT_INFO;
  const void *next_;
  SemaphoreWaitMask flags_;
  uint32_t semaphore_count_;
  const VkSemaphore *p_semaphores_;
  const uint64_t *p_values_;
};

struct SubmitInfo2 {

  static constexpr StructureType structure_type = StructureType::E_SUBMIT_INFO_2;

  using native_type = VkSubmitInfo2;

  SubmitInfo2(SubmitMask flags = {},
              uint32_t wait_semaphore_info_count = {},
              const SemaphoreSubmitInfo *p_wait_semaphore_infos = {},
              uint32_t command_buffer_info_count = {},
              const CommandBufferSubmitInfo *p_command_buffer_infos = {},
              uint32_t signal_semaphore_info_count = {},
              const SemaphoreSubmitInfo *p_signal_semaphore_infos = {},
              const void *next = {})
    : flags_(flags), wait_semaphore_info_count_(wait_semaphore_info_count), p_wait_semaphore_infos_(p_wait_semaphore_infos),
      command_buffer_info_count_(command_buffer_info_count), p_command_buffer_infos_(p_command_buffer_infos),
      signal_semaphore_info_count_(signal_semaphore_info_count), p_signal_semaphore_infos_(p_signal_semaphore_infos), next_(next) {}

  SubmitInfo2(const native_type &rhs) : SubmitInfo2(std::bit_cast<SubmitInfo2>(rhs)) {}

  SubmitInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubmitInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const SubmitInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBMIT_INFO_2;
  const void *next_;
  SubmitMask flags_;
  uint32_t wait_semaphore_info_count_;
  const SemaphoreSubmitInfo *p_wait_semaphore_infos_;
  uint32_t command_buffer_info_count_;
  const CommandBufferSubmitInfo *p_command_buffer_infos_;
  uint32_t signal_semaphore_info_count_;
  const SemaphoreSubmitInfo *p_signal_semaphore_infos_;
};

struct MemoryRequirements2 {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_REQUIREMENTS_2;

  using native_type = VkMemoryRequirements2;

  MemoryRequirements2() = default;

  MemoryRequirements2(const native_type &rhs) : MemoryRequirements2(std::bit_cast<MemoryRequirements2>(rhs)) {}

  MemoryRequirements2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryRequirements2>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryRequirements2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_REQUIREMENTS_2;
  void *next_ = {};
  MemoryRequirements memory_requirements_ = {};
};

struct PhysicalDeviceComputeShaderDerivativesFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;

  using native_type = VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;

  PhysicalDeviceComputeShaderDerivativesFeaturesNV(bool32 compute_derivative_group_quads = {},
                                                   bool32 compute_derivative_group_linear = {},
                                                   void *next = {})
    : compute_derivative_group_quads_(compute_derivative_group_quads), compute_derivative_group_linear_(compute_derivative_group_linear),
      next_(next) {}

  PhysicalDeviceComputeShaderDerivativesFeaturesNV(const native_type &rhs)
    : PhysicalDeviceComputeShaderDerivativesFeaturesNV(std::bit_cast<PhysicalDeviceComputeShaderDerivativesFeaturesNV>(rhs)) {}

  PhysicalDeviceComputeShaderDerivativesFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceComputeShaderDerivativesFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceComputeShaderDerivativesFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
  void *next_;
  bool32 compute_derivative_group_quads_;
  bool32 compute_derivative_group_linear_;
};

struct PhysicalDeviceSampleLocationsPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceSampleLocationsPropertiesEXT;

  PhysicalDeviceSampleLocationsPropertiesEXT() = default;

  PhysicalDeviceSampleLocationsPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceSampleLocationsPropertiesEXT(std::bit_cast<PhysicalDeviceSampleLocationsPropertiesEXT>(rhs)) {}

  PhysicalDeviceSampleLocationsPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSampleLocationsPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSampleLocationsPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
  void *next_ = {};
  SampleCountMask sample_location_sample_counts_ = {};
  Extent2D max_sample_location_grid_size_ = {};
  std::array<float, 2> sample_location_coordinate_range_ = {};
  uint32_t sample_location_sub_pixel_bits_ = {};
  bool32 variable_sample_locations_ = {};
};

struct PipelineExecutableInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_EXECUTABLE_INFO_KHR;

  using native_type = VkPipelineExecutableInfoKHR;

  PipelineExecutableInfoKHR(VkPipeline pipeline = {}, uint32_t executable_index = {}, const void *next = {})
    : pipeline_(pipeline), executable_index_(executable_index), next_(next) {}

  PipelineExecutableInfoKHR(const native_type &rhs) : PipelineExecutableInfoKHR(std::bit_cast<PipelineExecutableInfoKHR>(rhs)) {}

  PipelineExecutableInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineExecutableInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineExecutableInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_EXECUTABLE_INFO_KHR;
  const void *next_;
  VkPipeline pipeline_;
  uint32_t executable_index_;
};

struct MultisamplePropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_MULTISAMPLE_PROPERTIES_EXT;

  using native_type = VkMultisamplePropertiesEXT;

  MultisamplePropertiesEXT() = default;

  MultisamplePropertiesEXT(const native_type &rhs) : MultisamplePropertiesEXT(std::bit_cast<MultisamplePropertiesEXT>(rhs)) {}

  MultisamplePropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MultisamplePropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MultisamplePropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MULTISAMPLE_PROPERTIES_EXT;
  void *next_ = {};
  Extent2D max_sample_location_grid_size_ = {};
};

struct BufferViewCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_VIEW_CREATE_INFO;

  using native_type = VkBufferViewCreateInfo;

  BufferViewCreateInfo(BufferViewCreateMask flags = {},
                       VkBuffer buffer = {},
                       Format format = Format::E_UNDEFINED,
                       DeviceSize offset = {},
                       DeviceSize range = {},
                       const void *next = {})
    : flags_(flags), buffer_(buffer), format_(format), offset_(offset), range_(range), next_(next) {}

  BufferViewCreateInfo(const native_type &rhs) : BufferViewCreateInfo(std::bit_cast<BufferViewCreateInfo>(rhs)) {}

  BufferViewCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferViewCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BufferViewCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_VIEW_CREATE_INFO;
  const void *next_;
  BufferViewCreateMask flags_;
  VkBuffer buffer_;
  Format format_;
  DeviceSize offset_;
  DeviceSize range_;
};

struct SamplerReductionModeCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_SAMPLER_REDUCTION_MODE_CREATE_INFO;

  using native_type = VkSamplerReductionModeCreateInfo;

  SamplerReductionModeCreateInfo(SamplerReductionMode reduction_mode = SamplerReductionMode::E_WEIGHTED_AVERAGE, const void *next = {})
    : reduction_mode_(reduction_mode), next_(next) {}

  SamplerReductionModeCreateInfo(const native_type &rhs)
    : SamplerReductionModeCreateInfo(std::bit_cast<SamplerReductionModeCreateInfo>(rhs)) {}

  SamplerReductionModeCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SamplerReductionModeCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SamplerReductionModeCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SAMPLER_REDUCTION_MODE_CREATE_INFO;
  const void *next_;
  SamplerReductionMode reduction_mode_;
};

struct PhysicalDeviceBlendOperationAdvancedFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;

  using native_type = VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

  PhysicalDeviceBlendOperationAdvancedFeaturesEXT(bool32 advanced_blend_coherent_operations = {}, void *next = {})
    : advanced_blend_coherent_operations_(advanced_blend_coherent_operations), next_(next) {}

  PhysicalDeviceBlendOperationAdvancedFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceBlendOperationAdvancedFeaturesEXT(std::bit_cast<PhysicalDeviceBlendOperationAdvancedFeaturesEXT>(rhs)) {}

  PhysicalDeviceBlendOperationAdvancedFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceBlendOperationAdvancedFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceBlendOperationAdvancedFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
  void *next_;
  bool32 advanced_blend_coherent_operations_;
};

struct MemoryAllocateInfo {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_ALLOCATE_INFO;

  using native_type = VkMemoryAllocateInfo;

  MemoryAllocateInfo(DeviceSize allocation_size = {}, uint32_t memory_type_index = {}, const void *next = {})
    : allocation_size_(allocation_size), memory_type_index_(memory_type_index), next_(next) {}

  MemoryAllocateInfo(const native_type &rhs) : MemoryAllocateInfo(std::bit_cast<MemoryAllocateInfo>(rhs)) {}

  MemoryAllocateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryAllocateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryAllocateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_ALLOCATE_INFO;
  const void *next_;
  DeviceSize allocation_size_;
  uint32_t memory_type_index_;
};

struct ImageFormatProperties2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_FORMAT_PROPERTIES_2;

  using native_type = VkImageFormatProperties2;

  ImageFormatProperties2() = default;

  ImageFormatProperties2(const native_type &rhs) : ImageFormatProperties2(std::bit_cast<ImageFormatProperties2>(rhs)) {}

  ImageFormatProperties2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageFormatProperties2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageFormatProperties2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_FORMAT_PROPERTIES_2;
  void *next_ = {};
  ImageFormatProperties image_format_properties_ = {};
};

struct RenderPassSampleLocationsBeginInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;

  using native_type = VkRenderPassSampleLocationsBeginInfoEXT;

  RenderPassSampleLocationsBeginInfoEXT(uint32_t attachment_initial_sample_locations_count = {},
                                        const AttachmentSampleLocationsEXT *p_attachment_initial_sample_locations = {},
                                        uint32_t post_subpass_sample_locations_count = {},
                                        const SubpassSampleLocationsEXT *p_post_subpass_sample_locations = {},
                                        const void *next = {})
    : attachment_initial_sample_locations_count_(attachment_initial_sample_locations_count),
      p_attachment_initial_sample_locations_(p_attachment_initial_sample_locations),
      post_subpass_sample_locations_count_(post_subpass_sample_locations_count),
      p_post_subpass_sample_locations_(p_post_subpass_sample_locations), next_(next) {}

  RenderPassSampleLocationsBeginInfoEXT(const native_type &rhs)
    : RenderPassSampleLocationsBeginInfoEXT(std::bit_cast<RenderPassSampleLocationsBeginInfoEXT>(rhs)) {}

  RenderPassSampleLocationsBeginInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassSampleLocationsBeginInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassSampleLocationsBeginInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
  const void *next_;
  uint32_t attachment_initial_sample_locations_count_;
  const AttachmentSampleLocationsEXT *p_attachment_initial_sample_locations_;
  uint32_t post_subpass_sample_locations_count_;
  const SubpassSampleLocationsEXT *p_post_subpass_sample_locations_;
};

struct PhysicalDeviceMultiDrawFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;

  using native_type = VkPhysicalDeviceMultiDrawFeaturesEXT;

  PhysicalDeviceMultiDrawFeaturesEXT(bool32 multi_draw = {}, void *next = {}) : multi_draw_(multi_draw), next_(next) {}

  PhysicalDeviceMultiDrawFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceMultiDrawFeaturesEXT(std::bit_cast<PhysicalDeviceMultiDrawFeaturesEXT>(rhs)) {}

  PhysicalDeviceMultiDrawFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiDrawFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiDrawFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;
  void *next_;
  bool32 multi_draw_;
};

struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

  PhysicalDeviceBlendOperationAdvancedPropertiesEXT() = default;

  PhysicalDeviceBlendOperationAdvancedPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceBlendOperationAdvancedPropertiesEXT(std::bit_cast<PhysicalDeviceBlendOperationAdvancedPropertiesEXT>(rhs)) {}

  PhysicalDeviceBlendOperationAdvancedPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceBlendOperationAdvancedPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceBlendOperationAdvancedPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t advanced_blend_max_color_attachments_ = {};
  bool32 advanced_blend_independent_blend_ = {};
  bool32 advanced_blend_non_premultiplied_src_color_ = {};
  bool32 advanced_blend_non_premultiplied_dst_color_ = {};
  bool32 advanced_blend_correlated_overlap_ = {};
  bool32 advanced_blend_all_operations_ = {};
};

struct PhysicalDeviceDepthClipEnableFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDepthClipEnableFeaturesEXT;

  PhysicalDeviceDepthClipEnableFeaturesEXT(bool32 depth_clip_enable = {}, void *next = {})
    : depth_clip_enable_(depth_clip_enable), next_(next) {}

  PhysicalDeviceDepthClipEnableFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDepthClipEnableFeaturesEXT(std::bit_cast<PhysicalDeviceDepthClipEnableFeaturesEXT>(rhs)) {}

  PhysicalDeviceDepthClipEnableFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDepthClipEnableFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDepthClipEnableFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
  void *next_;
  bool32 depth_clip_enable_;
};

struct RenderPassSubpassFeedbackInfoEXT {

  using native_type = VkRenderPassSubpassFeedbackInfoEXT;

  RenderPassSubpassFeedbackInfoEXT() = default;

  RenderPassSubpassFeedbackInfoEXT(const native_type &rhs)
    : RenderPassSubpassFeedbackInfoEXT(std::bit_cast<RenderPassSubpassFeedbackInfoEXT>(rhs)) {}

  RenderPassSubpassFeedbackInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassSubpassFeedbackInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassSubpassFeedbackInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  SubpassMergeStatus subpass_merge_status_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
  uint32_t post_merge_index_ = {};
};

struct PipelineColorBlendAdvancedStateCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;

  using native_type = VkPipelineColorBlendAdvancedStateCreateInfoEXT;

  PipelineColorBlendAdvancedStateCreateInfoEXT(bool32 src_premultiplied = {},
                                               bool32 dst_premultiplied = {},
                                               BlendOverlap blend_overlap = BlendOverlap::E_UNCORRELATED_EXT,
                                               const void *next = {})
    : src_premultiplied_(src_premultiplied), dst_premultiplied_(dst_premultiplied), blend_overlap_(blend_overlap), next_(next) {}

  PipelineColorBlendAdvancedStateCreateInfoEXT(const native_type &rhs)
    : PipelineColorBlendAdvancedStateCreateInfoEXT(std::bit_cast<PipelineColorBlendAdvancedStateCreateInfoEXT>(rhs)) {}

  PipelineColorBlendAdvancedStateCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineColorBlendAdvancedStateCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineColorBlendAdvancedStateCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
  const void *next_;
  bool32 src_premultiplied_;
  bool32 dst_premultiplied_;
  BlendOverlap blend_overlap_;
};

struct DeviceQueueInfo2 {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_QUEUE_INFO_2;

  using native_type = VkDeviceQueueInfo2;

  DeviceQueueInfo2(DeviceQueueCreateMask flags = {}, uint32_t queue_family_index = {}, uint32_t queue_index = {}, const void *next = {})
    : flags_(flags), queue_family_index_(queue_family_index), queue_index_(queue_index), next_(next) {}

  DeviceQueueInfo2(const native_type &rhs) : DeviceQueueInfo2(std::bit_cast<DeviceQueueInfo2>(rhs)) {}

  DeviceQueueInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceQueueInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceQueueInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_QUEUE_INFO_2;
  const void *next_;
  DeviceQueueCreateMask flags_;
  uint32_t queue_family_index_;
  uint32_t queue_index_;
};

struct PhysicalDeviceInlineUniformBlockProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;

  using native_type = VkPhysicalDeviceInlineUniformBlockProperties;

  PhysicalDeviceInlineUniformBlockProperties() = default;

  PhysicalDeviceInlineUniformBlockProperties(const native_type &rhs)
    : PhysicalDeviceInlineUniformBlockProperties(std::bit_cast<PhysicalDeviceInlineUniformBlockProperties>(rhs)) {}

  PhysicalDeviceInlineUniformBlockProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceInlineUniformBlockProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceInlineUniformBlockProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
  void *next_ = {};
  uint32_t max_inline_uniform_block_size_ = {};
  uint32_t max_per_stage_descriptor_inline_uniform_blocks_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_inline_uniform_blocks_ = {};
  uint32_t max_descriptor_set_inline_uniform_blocks_ = {};
  uint32_t max_descriptor_set_update_after_bind_inline_uniform_blocks_ = {};
};

struct SemaphoreTypeCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_SEMAPHORE_TYPE_CREATE_INFO;

  using native_type = VkSemaphoreTypeCreateInfo;

  SemaphoreTypeCreateInfo(SemaphoreType semaphore_type = SemaphoreType::E_BINARY, uint64_t initial_value = {}, const void *next = {})
    : semaphore_type_(semaphore_type), initial_value_(initial_value), next_(next) {}

  SemaphoreTypeCreateInfo(const native_type &rhs) : SemaphoreTypeCreateInfo(std::bit_cast<SemaphoreTypeCreateInfo>(rhs)) {}

  SemaphoreTypeCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SemaphoreTypeCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SemaphoreTypeCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SEMAPHORE_TYPE_CREATE_INFO;
  const void *next_;
  SemaphoreType semaphore_type_;
  uint64_t initial_value_;
};

struct DescriptorPoolInlineUniformBlockCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;

  using native_type = VkDescriptorPoolInlineUniformBlockCreateInfo;

  DescriptorPoolInlineUniformBlockCreateInfo(uint32_t max_inline_uniform_block_bindings = {}, const void *next = {})
    : max_inline_uniform_block_bindings_(max_inline_uniform_block_bindings), next_(next) {}

  DescriptorPoolInlineUniformBlockCreateInfo(const native_type &rhs)
    : DescriptorPoolInlineUniformBlockCreateInfo(std::bit_cast<DescriptorPoolInlineUniformBlockCreateInfo>(rhs)) {}

  DescriptorPoolInlineUniformBlockCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorPoolInlineUniformBlockCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorPoolInlineUniformBlockCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
  const void *next_;
  uint32_t max_inline_uniform_block_bindings_;
};

struct ValidationCacheCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_VALIDATION_CACHE_CREATE_INFO_EXT;

  using native_type = VkValidationCacheCreateInfoEXT;

  ValidationCacheCreateInfoEXT(ValidationCacheCreateMask flags = {},
                               size_t initial_data_size = {},
                               const void *p_initial_data = {},
                               const void *next = {})
    : flags_(flags), initial_data_size_(initial_data_size), p_initial_data_(p_initial_data), next_(next) {}

  ValidationCacheCreateInfoEXT(const native_type &rhs) : ValidationCacheCreateInfoEXT(std::bit_cast<ValidationCacheCreateInfoEXT>(rhs)) {}

  ValidationCacheCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ValidationCacheCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ValidationCacheCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VALIDATION_CACHE_CREATE_INFO_EXT;
  const void *next_;
  ValidationCacheCreateMask flags_;
  size_t initial_data_size_;
  const void *p_initial_data_;
};

struct ShaderModuleValidationCacheCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;

  using native_type = VkShaderModuleValidationCacheCreateInfoEXT;

  ShaderModuleValidationCacheCreateInfoEXT(VkValidationCacheEXT validation_cache = {}, const void *next = {})
    : validation_cache_(validation_cache), next_(next) {}

  ShaderModuleValidationCacheCreateInfoEXT(const native_type &rhs)
    : ShaderModuleValidationCacheCreateInfoEXT(std::bit_cast<ShaderModuleValidationCacheCreateInfoEXT>(rhs)) {}

  ShaderModuleValidationCacheCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ShaderModuleValidationCacheCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ShaderModuleValidationCacheCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
  const void *next_;
  VkValidationCacheEXT validation_cache_;
};

struct PhysicalDeviceVulkan12Properties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;

  using native_type = VkPhysicalDeviceVulkan12Properties;

  PhysicalDeviceVulkan12Properties() = default;

  PhysicalDeviceVulkan12Properties(const native_type &rhs)
    : PhysicalDeviceVulkan12Properties(std::bit_cast<PhysicalDeviceVulkan12Properties>(rhs)) {}

  PhysicalDeviceVulkan12Properties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVulkan12Properties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVulkan12Properties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
  void *next_ = {};
  DriverId driver_id_ = {};
  std::array<char, VK_MAX_DRIVER_NAME_SIZE> driver_name_ = {};
  std::array<char, VK_MAX_DRIVER_INFO_SIZE> driver_info_ = {};
  ConformanceVersion conformance_version_ = {};
  ShaderFloatControlsIndependence denorm_behavior_independence_ = {};
  ShaderFloatControlsIndependence rounding_mode_independence_ = {};
  bool32 shader_signed_zero_inf_nan_preserve_float16_ = {};
  bool32 shader_signed_zero_inf_nan_preserve_float32_ = {};
  bool32 shader_signed_zero_inf_nan_preserve_float64_ = {};
  bool32 shader_denorm_preserve_float16_ = {};
  bool32 shader_denorm_preserve_float32_ = {};
  bool32 shader_denorm_preserve_float64_ = {};
  bool32 shader_denorm_flush_to_zero_float16_ = {};
  bool32 shader_denorm_flush_to_zero_float32_ = {};
  bool32 shader_denorm_flush_to_zero_float64_ = {};
  bool32 shader_rounding_mode_rtefloat16_ = {};
  bool32 shader_rounding_mode_rtefloat32_ = {};
  bool32 shader_rounding_mode_rtefloat64_ = {};
  bool32 shader_rounding_mode_rtzfloat16_ = {};
  bool32 shader_rounding_mode_rtzfloat32_ = {};
  bool32 shader_rounding_mode_rtzfloat64_ = {};
  uint32_t max_update_after_bind_descriptors_in_all_pools_ = {};
  bool32 shader_uniform_buffer_array_non_uniform_indexing_native_ = {};
  bool32 shader_sampled_image_array_non_uniform_indexing_native_ = {};
  bool32 shader_storage_buffer_array_non_uniform_indexing_native_ = {};
  bool32 shader_storage_image_array_non_uniform_indexing_native_ = {};
  bool32 shader_input_attachment_array_non_uniform_indexing_native_ = {};
  bool32 robust_buffer_access_update_after_bind_ = {};
  bool32 quad_divergent_implicit_lod_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_samplers_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_uniform_buffers_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_storage_buffers_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_sampled_images_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_storage_images_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_input_attachments_ = {};
  uint32_t max_per_stage_update_after_bind_resources_ = {};
  uint32_t max_descriptor_set_update_after_bind_samplers_ = {};
  uint32_t max_descriptor_set_update_after_bind_uniform_buffers_ = {};
  uint32_t max_descriptor_set_update_after_bind_uniform_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_storage_buffers_ = {};
  uint32_t max_descriptor_set_update_after_bind_storage_buffers_dynamic_ = {};
  uint32_t max_descriptor_set_update_after_bind_sampled_images_ = {};
  uint32_t max_descriptor_set_update_after_bind_storage_images_ = {};
  uint32_t max_descriptor_set_update_after_bind_input_attachments_ = {};
  ResolveModeMask supported_depth_resolve_modes_ = {};
  ResolveModeMask supported_stencil_resolve_modes_ = {};
  bool32 independent_resolve_none_ = {};
  bool32 independent_resolve_ = {};
  bool32 filter_minmax_single_component_formats_ = {};
  bool32 filter_minmax_image_component_mapping_ = {};
  uint64_t max_timeline_semaphore_value_difference_ = {};
  SampleCountMask framebuffer_integer_color_sample_counts_ = {};
};

struct LayerProperties {

  using native_type = VkLayerProperties;

  LayerProperties() = default;

  LayerProperties(const native_type &rhs) : LayerProperties(std::bit_cast<LayerProperties>(rhs)) {}

  LayerProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<LayerProperties>(rhs);
    return *this;
  }

  auto operator<=>(const LayerProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  std::array<char, VK_MAX_EXTENSION_NAME_SIZE> layer_name_ = {};
  uint32_t spec_version_ = {};
  uint32_t implementation_version_ = {};
  std::array<char, VK_MAX_DESCRIPTION_SIZE> description_ = {};
};

struct ImportMemoryHostPointerInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;

  using native_type = VkImportMemoryHostPointerInfoEXT;

  ImportMemoryHostPointerInfoEXT(ExternalMemoryHandleTypeMaskBit handle_type = {}, void *p_host_pointer = {}, const void *next = {})
    : handle_type_(handle_type), p_host_pointer_(p_host_pointer), next_(next) {}

  ImportMemoryHostPointerInfoEXT(const native_type &rhs)
    : ImportMemoryHostPointerInfoEXT(std::bit_cast<ImportMemoryHostPointerInfoEXT>(rhs)) {}

  ImportMemoryHostPointerInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImportMemoryHostPointerInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImportMemoryHostPointerInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
  const void *next_;
  ExternalMemoryHandleTypeMaskBit handle_type_;
  void *p_host_pointer_;
};

struct QueueFamilyCheckpointPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;

  using native_type = VkQueueFamilyCheckpointPropertiesNV;

  QueueFamilyCheckpointPropertiesNV() = default;

  QueueFamilyCheckpointPropertiesNV(const native_type &rhs)
    : QueueFamilyCheckpointPropertiesNV(std::bit_cast<QueueFamilyCheckpointPropertiesNV>(rhs)) {}

  QueueFamilyCheckpointPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyCheckpointPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyCheckpointPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
  void *next_ = {};
  PipelineStageMask checkpoint_execution_stage_mask_ = {};
};

struct PhysicalDeviceMaintenance4Properties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;

  using native_type = VkPhysicalDeviceMaintenance4Properties;

  PhysicalDeviceMaintenance4Properties() = default;

  PhysicalDeviceMaintenance4Properties(const native_type &rhs)
    : PhysicalDeviceMaintenance4Properties(std::bit_cast<PhysicalDeviceMaintenance4Properties>(rhs)) {}

  PhysicalDeviceMaintenance4Properties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance4Properties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance4Properties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
  void *next_ = {};
  DeviceSize max_buffer_size_ = {};
};

struct PhysicalDeviceMaintenance5FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR;

  using native_type = VkPhysicalDeviceMaintenance5FeaturesKHR;

  PhysicalDeviceMaintenance5FeaturesKHR(bool32 maintenance5 = {}, void *next = {}) : maintenance5_(maintenance5), next_(next) {}

  PhysicalDeviceMaintenance5FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceMaintenance5FeaturesKHR(std::bit_cast<PhysicalDeviceMaintenance5FeaturesKHR>(rhs)) {}

  PhysicalDeviceMaintenance5FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance5FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance5FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR;
  void *next_;
  bool32 maintenance5_;
};

struct PhysicalDeviceMaintenance6FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR;

  using native_type = VkPhysicalDeviceMaintenance6FeaturesKHR;

  PhysicalDeviceMaintenance6FeaturesKHR(bool32 maintenance6 = {}, void *next = {}) : maintenance6_(maintenance6), next_(next) {}

  PhysicalDeviceMaintenance6FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceMaintenance6FeaturesKHR(std::bit_cast<PhysicalDeviceMaintenance6FeaturesKHR>(rhs)) {}

  PhysicalDeviceMaintenance6FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance6FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance6FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR;
  void *next_;
  bool32 maintenance6_;
};

struct CopyMicromapToMemoryInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COPY_MICROMAP_TO_MEMORY_INFO_EXT;

  using native_type = VkCopyMicromapToMemoryInfoEXT;

  CopyMicromapToMemoryInfoEXT(VkMicromapEXT src = {},
                              VkDeviceOrHostAddressKHR dst = {},
                              CopyMicromapMode mode = CopyMicromapMode::E_CLONE_EXT,
                              const void *next = {})
    : src_(src), dst_(dst), mode_(mode), next_(next) {}

  CopyMicromapToMemoryInfoEXT(const native_type &rhs) : CopyMicromapToMemoryInfoEXT(std::bit_cast<CopyMicromapToMemoryInfoEXT>(rhs)) {}

  CopyMicromapToMemoryInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMicromapToMemoryInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMicromapToMemoryInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_MICROMAP_TO_MEMORY_INFO_EXT;
  const void *next_;
  VkMicromapEXT src_;
  VkDeviceOrHostAddressKHR dst_;
  CopyMicromapMode mode_;
};

struct PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;

  PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(bool32 multiview_per_view_viewports = {}, void *next = {})
    : multiview_per_view_viewports_(multiview_per_view_viewports), next_(next) {}

  PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(std::bit_cast<PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>(rhs)) {}

  PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM;
  void *next_;
  bool32 multiview_per_view_viewports_;
};

struct PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT;

  using native_type = VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;

  PhysicalDeviceNonSeamlessCubeMapFeaturesEXT(bool32 non_seamless_cube_map = {}, void *next = {})
    : non_seamless_cube_map_(non_seamless_cube_map), next_(next) {}

  PhysicalDeviceNonSeamlessCubeMapFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceNonSeamlessCubeMapFeaturesEXT(std::bit_cast<PhysicalDeviceNonSeamlessCubeMapFeaturesEXT>(rhs)) {}

  PhysicalDeviceNonSeamlessCubeMapFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceNonSeamlessCubeMapFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceNonSeamlessCubeMapFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT;
  void *next_;
  bool32 non_seamless_cube_map_;
};

struct PhysicalDeviceMaintenance6PropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceMaintenance6PropertiesKHR;

  PhysicalDeviceMaintenance6PropertiesKHR() = default;

  PhysicalDeviceMaintenance6PropertiesKHR(const native_type &rhs)
    : PhysicalDeviceMaintenance6PropertiesKHR(std::bit_cast<PhysicalDeviceMaintenance6PropertiesKHR>(rhs)) {}

  PhysicalDeviceMaintenance6PropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMaintenance6PropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMaintenance6PropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR;
  void *next_ = {};
  bool32 block_texel_view_compatible_multiple_layers_ = {};
  uint32_t max_combined_image_sampler_descriptor_count_ = {};
  bool32 fragment_shading_rate_clamp_combiner_inputs_ = {};
};

struct PhysicalDeviceLayeredApiPropertiesListKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR;

  using native_type = VkPhysicalDeviceLayeredApiPropertiesListKHR;

  PhysicalDeviceLayeredApiPropertiesListKHR(uint32_t layered_api_count = {},
                                            PhysicalDeviceLayeredApiPropertiesKHR *p_layered_apis = {},
                                            void *next = {})
    : layered_api_count_(layered_api_count), p_layered_apis_(p_layered_apis), next_(next) {}

  PhysicalDeviceLayeredApiPropertiesListKHR(const native_type &rhs)
    : PhysicalDeviceLayeredApiPropertiesListKHR(std::bit_cast<PhysicalDeviceLayeredApiPropertiesListKHR>(rhs)) {}

  PhysicalDeviceLayeredApiPropertiesListKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceLayeredApiPropertiesListKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceLayeredApiPropertiesListKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR;
  void *next_;
  uint32_t layered_api_count_;
  PhysicalDeviceLayeredApiPropertiesKHR *p_layered_apis_;
};

struct RenderingAreaInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_AREA_INFO_KHR;

  using native_type = VkRenderingAreaInfoKHR;

  RenderingAreaInfoKHR(uint32_t view_mask = {},
                       uint32_t color_attachment_count = {},
                       const Format *p_color_attachment_formats = {},
                       Format depth_attachment_format = Format::E_UNDEFINED,
                       Format stencil_attachment_format = Format::E_UNDEFINED,
                       const void *next = {})
    : view_mask_(view_mask), color_attachment_count_(color_attachment_count), p_color_attachment_formats_(p_color_attachment_formats),
      depth_attachment_format_(depth_attachment_format), stencil_attachment_format_(stencil_attachment_format), next_(next) {}

  RenderingAreaInfoKHR(const native_type &rhs) : RenderingAreaInfoKHR(std::bit_cast<RenderingAreaInfoKHR>(rhs)) {}

  RenderingAreaInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingAreaInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingAreaInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_AREA_INFO_KHR;
  const void *next_;
  uint32_t view_mask_;
  uint32_t color_attachment_count_;
  const Format *p_color_attachment_formats_;
  Format depth_attachment_format_;
  Format stencil_attachment_format_;
};

struct ColorBlendEquationEXT {

  using native_type = VkColorBlendEquationEXT;

  ColorBlendEquationEXT(BlendFactor src_color_blend_factor = BlendFactor::E_ZERO,
                        BlendFactor dst_color_blend_factor = BlendFactor::E_ZERO,
                        BlendOp color_blend_op = BlendOp::E_ADD,
                        BlendFactor src_alpha_blend_factor = BlendFactor::E_ZERO,
                        BlendFactor dst_alpha_blend_factor = BlendFactor::E_ZERO,
                        BlendOp alpha_blend_op = BlendOp::E_ADD)
    : src_color_blend_factor_(src_color_blend_factor), dst_color_blend_factor_(dst_color_blend_factor), color_blend_op_(color_blend_op),
      src_alpha_blend_factor_(src_alpha_blend_factor), dst_alpha_blend_factor_(dst_alpha_blend_factor), alpha_blend_op_(alpha_blend_op) {}

  ColorBlendEquationEXT(const native_type &rhs) : ColorBlendEquationEXT(std::bit_cast<ColorBlendEquationEXT>(rhs)) {}

  ColorBlendEquationEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ColorBlendEquationEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ColorBlendEquationEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  BlendFactor src_color_blend_factor_;
  BlendFactor dst_color_blend_factor_;
  BlendOp color_blend_op_;
  BlendFactor src_alpha_blend_factor_;
  BlendFactor dst_alpha_blend_factor_;
  BlendOp alpha_blend_op_;
};

struct PerformanceValueINTEL {

  using native_type = VkPerformanceValueINTEL;

  PerformanceValueINTEL() = default;

  PerformanceValueINTEL(const native_type &rhs) : PerformanceValueINTEL(std::bit_cast<PerformanceValueINTEL>(rhs)) {}

  PerformanceValueINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceValueINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceValueINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  PerformanceValueType type_ = {};
  VkPerformanceValueDataINTEL data_ = {};
};

struct DescriptorSetLayoutSupport {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_LAYOUT_SUPPORT;

  using native_type = VkDescriptorSetLayoutSupport;

  DescriptorSetLayoutSupport() = default;

  DescriptorSetLayoutSupport(const native_type &rhs) : DescriptorSetLayoutSupport(std::bit_cast<DescriptorSetLayoutSupport>(rhs)) {}

  DescriptorSetLayoutSupport &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetLayoutSupport>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetLayoutSupport &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_LAYOUT_SUPPORT;
  void *next_ = {};
  bool32 supported_ = {};
};

struct PhysicalDeviceFloatControlsProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;

  using native_type = VkPhysicalDeviceFloatControlsProperties;

  PhysicalDeviceFloatControlsProperties() = default;

  PhysicalDeviceFloatControlsProperties(const native_type &rhs)
    : PhysicalDeviceFloatControlsProperties(std::bit_cast<PhysicalDeviceFloatControlsProperties>(rhs)) {}

  PhysicalDeviceFloatControlsProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFloatControlsProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFloatControlsProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
  void *next_ = {};
  ShaderFloatControlsIndependence denorm_behavior_independence_ = {};
  ShaderFloatControlsIndependence rounding_mode_independence_ = {};
  bool32 shader_signed_zero_inf_nan_preserve_float16_ = {};
  bool32 shader_signed_zero_inf_nan_preserve_float32_ = {};
  bool32 shader_signed_zero_inf_nan_preserve_float64_ = {};
  bool32 shader_denorm_preserve_float16_ = {};
  bool32 shader_denorm_preserve_float32_ = {};
  bool32 shader_denorm_preserve_float64_ = {};
  bool32 shader_denorm_flush_to_zero_float16_ = {};
  bool32 shader_denorm_flush_to_zero_float32_ = {};
  bool32 shader_denorm_flush_to_zero_float64_ = {};
  bool32 shader_rounding_mode_rtefloat16_ = {};
  bool32 shader_rounding_mode_rtefloat32_ = {};
  bool32 shader_rounding_mode_rtefloat64_ = {};
  bool32 shader_rounding_mode_rtzfloat16_ = {};
  bool32 shader_rounding_mode_rtzfloat32_ = {};
  bool32 shader_rounding_mode_rtzfloat64_ = {};
};

struct PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;

  PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT() = default;

  PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(std::bit_cast<PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>(rhs)) {}

  PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT;
  void *next_ = {};
  size_t combined_image_sampler_density_map_descriptor_size_ = {};
};

struct DeviceQueueGlobalPriorityCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;

  using native_type = VkDeviceQueueGlobalPriorityCreateInfoKHR;

  DeviceQueueGlobalPriorityCreateInfoKHR(QueueGlobalPriority global_priority = {}, const void *next = {})
    : global_priority_(global_priority), next_(next) {}

  DeviceQueueGlobalPriorityCreateInfoKHR(const native_type &rhs)
    : DeviceQueueGlobalPriorityCreateInfoKHR(std::bit_cast<DeviceQueueGlobalPriorityCreateInfoKHR>(rhs)) {}

  DeviceQueueGlobalPriorityCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceQueueGlobalPriorityCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceQueueGlobalPriorityCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
  const void *next_;
  QueueGlobalPriority global_priority_;
};

struct PhysicalDeviceHostQueryResetFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;

  using native_type = VkPhysicalDeviceHostQueryResetFeatures;

  PhysicalDeviceHostQueryResetFeatures(bool32 host_query_reset = {}, void *next = {}) : host_query_reset_(host_query_reset), next_(next) {}

  PhysicalDeviceHostQueryResetFeatures(const native_type &rhs)
    : PhysicalDeviceHostQueryResetFeatures(std::bit_cast<PhysicalDeviceHostQueryResetFeatures>(rhs)) {}

  PhysicalDeviceHostQueryResetFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceHostQueryResetFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceHostQueryResetFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
  void *next_;
  bool32 host_query_reset_;
};

struct CommandBufferInheritanceViewportScissorInfoNV {

  static constexpr StructureType structure_type = StructureType::E_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;

  using native_type = VkCommandBufferInheritanceViewportScissorInfoNV;

  CommandBufferInheritanceViewportScissorInfoNV(bool32 viewport_scissor2d = {},
                                                uint32_t viewport_depth_count = {},
                                                const Viewport *p_viewport_depths = {},
                                                const void *next = {})
    : viewport_scissor2d_(viewport_scissor2d), viewport_depth_count_(viewport_depth_count), p_viewport_depths_(p_viewport_depths),
      next_(next) {}

  CommandBufferInheritanceViewportScissorInfoNV(const native_type &rhs)
    : CommandBufferInheritanceViewportScissorInfoNV(std::bit_cast<CommandBufferInheritanceViewportScissorInfoNV>(rhs)) {}

  CommandBufferInheritanceViewportScissorInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CommandBufferInheritanceViewportScissorInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const CommandBufferInheritanceViewportScissorInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
  const void *next_;
  bool32 viewport_scissor2d_;
  uint32_t viewport_depth_count_;
  const Viewport *p_viewport_depths_;
};

struct PhysicalDeviceGlobalPriorityQueryFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;

  using native_type = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;

  PhysicalDeviceGlobalPriorityQueryFeaturesKHR(bool32 global_priority_query = {}, void *next = {})
    : global_priority_query_(global_priority_query), next_(next) {}

  PhysicalDeviceGlobalPriorityQueryFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceGlobalPriorityQueryFeaturesKHR(std::bit_cast<PhysicalDeviceGlobalPriorityQueryFeaturesKHR>(rhs)) {}

  PhysicalDeviceGlobalPriorityQueryFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceGlobalPriorityQueryFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceGlobalPriorityQueryFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
  void *next_;
  bool32 global_priority_query_;
};

struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;

  using native_type = VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

  PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(bool32 shader_integer_functions2 = {}, void *next = {})
    : shader_integer_functions2_(shader_integer_functions2), next_(next) {}

  PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(const native_type &rhs)
    : PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(std::bit_cast<PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(rhs)) {}

  PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
  void *next_;
  bool32 shader_integer_functions2_;
};

struct DebugUtilsObjectTagInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;

  using native_type = VkDebugUtilsObjectTagInfoEXT;

  DebugUtilsObjectTagInfoEXT(ObjectType object_type = ObjectType::E_UNKNOWN,
                             uint64_t object_handle = {},
                             uint64_t tag_name = {},
                             size_t tag_size = {},
                             const void *p_tag = {},
                             const void *next = {})
    : object_type_(object_type), object_handle_(object_handle), tag_name_(tag_name), tag_size_(tag_size), p_tag_(p_tag), next_(next) {}

  DebugUtilsObjectTagInfoEXT(const native_type &rhs) : DebugUtilsObjectTagInfoEXT(std::bit_cast<DebugUtilsObjectTagInfoEXT>(rhs)) {}

  DebugUtilsObjectTagInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugUtilsObjectTagInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugUtilsObjectTagInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
  const void *next_;
  ObjectType object_type_;
  uint64_t object_handle_;
  uint64_t tag_name_;
  size_t tag_size_;
  const void *p_tag_;
};

struct MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM;

  using native_type = VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;

  MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(uint32_t per_view_render_area_count = {},
                                                     const Rect2D *p_per_view_render_areas = {},
                                                     const void *next = {})
    : per_view_render_area_count_(per_view_render_area_count), p_per_view_render_areas_(p_per_view_render_areas), next_(next) {}

  MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(const native_type &rhs)
    : MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(std::bit_cast<MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>(rhs)) {}

  MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM;
  const void *next_;
  uint32_t per_view_render_area_count_;
  const Rect2D *p_per_view_render_areas_;
};

struct DebugUtilsLabelEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_UTILS_LABEL_EXT;

  using native_type = VkDebugUtilsLabelEXT;

  DebugUtilsLabelEXT(const char *p_label_name = {}, const std::array<float, 4> &color = {}, const void *next = {})
    : p_label_name_(p_label_name), color_(color), next_(next) {}

  DebugUtilsLabelEXT(const native_type &rhs) : DebugUtilsLabelEXT(std::bit_cast<DebugUtilsLabelEXT>(rhs)) {}

  DebugUtilsLabelEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugUtilsLabelEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugUtilsLabelEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_UTILS_LABEL_EXT;
  const void *next_;
  const char *p_label_name_;
  std::array<float, 4> color_;
};

struct PhysicalDeviceFragmentShadingRateKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;

  using native_type = VkPhysicalDeviceFragmentShadingRateKHR;

  PhysicalDeviceFragmentShadingRateKHR() = default;

  PhysicalDeviceFragmentShadingRateKHR(const native_type &rhs)
    : PhysicalDeviceFragmentShadingRateKHR(std::bit_cast<PhysicalDeviceFragmentShadingRateKHR>(rhs)) {}

  PhysicalDeviceFragmentShadingRateKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentShadingRateKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentShadingRateKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
  void *next_ = {};
  SampleCountMask sample_counts_ = {};
  Extent2D fragment_size_ = {};
};

struct DebugUtilsObjectNameInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;

  using native_type = VkDebugUtilsObjectNameInfoEXT;

  DebugUtilsObjectNameInfoEXT(ObjectType object_type = ObjectType::E_UNKNOWN,
                              uint64_t object_handle = {},
                              const char *p_object_name = {},
                              const void *next = {})
    : object_type_(object_type), object_handle_(object_handle), p_object_name_(p_object_name), next_(next) {}

  DebugUtilsObjectNameInfoEXT(const native_type &rhs) : DebugUtilsObjectNameInfoEXT(std::bit_cast<DebugUtilsObjectNameInfoEXT>(rhs)) {}

  DebugUtilsObjectNameInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugUtilsObjectNameInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugUtilsObjectNameInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
  const void *next_;
  ObjectType object_type_;
  uint64_t object_handle_;
  const char *p_object_name_;
};

struct DebugUtilsMessengerCallbackDataEXT {

  static constexpr StructureType structure_type = StructureType::E_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;

  using native_type = VkDebugUtilsMessengerCallbackDataEXT;

  DebugUtilsMessengerCallbackDataEXT(DebugUtilsMessengerCallbackDataMask flags = {},
                                     const char *p_message_id_name = {},
                                     int32_t message_id_number = {},
                                     const char *p_message = {},
                                     uint32_t queue_label_count = {},
                                     const DebugUtilsLabelEXT *p_queue_labels = {},
                                     uint32_t cmd_buf_label_count = {},
                                     const DebugUtilsLabelEXT *p_cmd_buf_labels = {},
                                     uint32_t object_count = {},
                                     const DebugUtilsObjectNameInfoEXT *p_objects = {},
                                     const void *next = {})
    : flags_(flags), p_message_id_name_(p_message_id_name), message_id_number_(message_id_number), p_message_(p_message),
      queue_label_count_(queue_label_count), p_queue_labels_(p_queue_labels), cmd_buf_label_count_(cmd_buf_label_count),
      p_cmd_buf_labels_(p_cmd_buf_labels), object_count_(object_count), p_objects_(p_objects), next_(next) {}

  DebugUtilsMessengerCallbackDataEXT(const native_type &rhs)
    : DebugUtilsMessengerCallbackDataEXT(std::bit_cast<DebugUtilsMessengerCallbackDataEXT>(rhs)) {}

  DebugUtilsMessengerCallbackDataEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DebugUtilsMessengerCallbackDataEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DebugUtilsMessengerCallbackDataEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
  const void *next_;
  DebugUtilsMessengerCallbackDataMask flags_;
  const char *p_message_id_name_;
  int32_t message_id_number_;
  const char *p_message_;
  uint32_t queue_label_count_;
  const DebugUtilsLabelEXT *p_queue_labels_;
  uint32_t cmd_buf_label_count_;
  const DebugUtilsLabelEXT *p_cmd_buf_labels_;
  uint32_t object_count_;
  const DebugUtilsObjectNameInfoEXT *p_objects_;
};

struct PhysicalDeviceShaderFloatControls2FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderFloatControls2FeaturesKHR;

  PhysicalDeviceShaderFloatControls2FeaturesKHR(bool32 shader_float_controls2 = {}, void *next = {})
    : shader_float_controls2_(shader_float_controls2), next_(next) {}

  PhysicalDeviceShaderFloatControls2FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderFloatControls2FeaturesKHR(std::bit_cast<PhysicalDeviceShaderFloatControls2FeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderFloatControls2FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderFloatControls2FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderFloatControls2FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR;
  void *next_;
  bool32 shader_float_controls2_;
};

struct DisplayProperties2KHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_PROPERTIES_2_KHR;

  using native_type = VkDisplayProperties2KHR;

  DisplayProperties2KHR() = default;

  DisplayProperties2KHR(const native_type &rhs) : DisplayProperties2KHR(std::bit_cast<DisplayProperties2KHR>(rhs)) {}

  DisplayProperties2KHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayProperties2KHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayProperties2KHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_PROPERTIES_2_KHR;
  void *next_ = {};
  DisplayPropertiesKHR display_properties_ = {};
};

struct PhysicalDeviceTransformFeedbackFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;

  using native_type = VkPhysicalDeviceTransformFeedbackFeaturesEXT;

  PhysicalDeviceTransformFeedbackFeaturesEXT(bool32 transform_feedback = {}, bool32 geometry_streams = {}, void *next = {})
    : transform_feedback_(transform_feedback), geometry_streams_(geometry_streams), next_(next) {}

  PhysicalDeviceTransformFeedbackFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceTransformFeedbackFeaturesEXT(std::bit_cast<PhysicalDeviceTransformFeedbackFeaturesEXT>(rhs)) {}

  PhysicalDeviceTransformFeedbackFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTransformFeedbackFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTransformFeedbackFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
  void *next_;
  bool32 transform_feedback_;
  bool32 geometry_streams_;
};

struct VideoSessionMemoryRequirementsKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR;

  using native_type = VkVideoSessionMemoryRequirementsKHR;

  VideoSessionMemoryRequirementsKHR() = default;

  VideoSessionMemoryRequirementsKHR(const native_type &rhs)
    : VideoSessionMemoryRequirementsKHR(std::bit_cast<VideoSessionMemoryRequirementsKHR>(rhs)) {}

  VideoSessionMemoryRequirementsKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoSessionMemoryRequirementsKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoSessionMemoryRequirementsKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR;
  void *next_ = {};
  uint32_t memory_bind_index_ = {};
  MemoryRequirements memory_requirements_ = {};
};

struct DeviceMemoryReportCallbackDataEXT {

  static constexpr StructureType structure_type = StructureType::E_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;

  using native_type = VkDeviceMemoryReportCallbackDataEXT;

  DeviceMemoryReportCallbackDataEXT() = default;

  DeviceMemoryReportCallbackDataEXT(const native_type &rhs)
    : DeviceMemoryReportCallbackDataEXT(std::bit_cast<DeviceMemoryReportCallbackDataEXT>(rhs)) {}

  DeviceMemoryReportCallbackDataEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DeviceMemoryReportCallbackDataEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DeviceMemoryReportCallbackDataEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
  void *next_ = {};
  DeviceMemoryReportMask flags_ = {};
  DeviceMemoryReportEventType type_ = {};
  uint64_t memory_object_id_ = {};
  DeviceSize size_ = {};
  ObjectType object_type_ = {};
  uint64_t object_handle_ = {};
  uint32_t heap_index_ = {};
};

struct SubpassDescription2 {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_DESCRIPTION_2;

  using native_type = VkSubpassDescription2;

  SubpassDescription2(SubpassDescriptionMask flags = {},
                      PipelineBindPoint pipeline_bind_point = PipelineBindPoint::E_GRAPHICS,
                      uint32_t view_mask = {},
                      uint32_t input_attachment_count = {},
                      const AttachmentReference2 *p_input_attachments = {},
                      uint32_t color_attachment_count = {},
                      const AttachmentReference2 *p_color_attachments = {},
                      const AttachmentReference2 *p_resolve_attachments = {},
                      const AttachmentReference2 *p_depth_stencil_attachment = {},
                      uint32_t preserve_attachment_count = {},
                      const uint32_t *p_preserve_attachments = {},
                      const void *next = {})
    : flags_(flags), pipeline_bind_point_(pipeline_bind_point), view_mask_(view_mask), input_attachment_count_(input_attachment_count),
      p_input_attachments_(p_input_attachments), color_attachment_count_(color_attachment_count), p_color_attachments_(p_color_attachments),
      p_resolve_attachments_(p_resolve_attachments), p_depth_stencil_attachment_(p_depth_stencil_attachment),
      preserve_attachment_count_(preserve_attachment_count), p_preserve_attachments_(p_preserve_attachments), next_(next) {}

  SubpassDescription2(const native_type &rhs) : SubpassDescription2(std::bit_cast<SubpassDescription2>(rhs)) {}

  SubpassDescription2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassDescription2>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassDescription2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_DESCRIPTION_2;
  const void *next_;
  SubpassDescriptionMask flags_;
  PipelineBindPoint pipeline_bind_point_;
  uint32_t view_mask_;
  uint32_t input_attachment_count_;
  const AttachmentReference2 *p_input_attachments_;
  uint32_t color_attachment_count_;
  const AttachmentReference2 *p_color_attachments_;
  const AttachmentReference2 *p_resolve_attachments_;
  const AttachmentReference2 *p_depth_stencil_attachment_;
  uint32_t preserve_attachment_count_;
  const uint32_t *p_preserve_attachments_;
};

struct RenderPassCreateInfo2 {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_CREATE_INFO_2;

  using native_type = VkRenderPassCreateInfo2;

  RenderPassCreateInfo2(RenderPassCreateMask flags = {},
                        uint32_t attachment_count = {},
                        const AttachmentDescription2 *p_attachments = {},
                        uint32_t subpass_count = {},
                        const SubpassDescription2 *p_subpasses = {},
                        uint32_t dependency_count = {},
                        const SubpassDependency2 *p_dependencies = {},
                        uint32_t correlated_view_mask_count = {},
                        const uint32_t *p_correlated_view_masks = {},
                        const void *next = {})
    : flags_(flags), attachment_count_(attachment_count), p_attachments_(p_attachments), subpass_count_(subpass_count),
      p_subpasses_(p_subpasses), dependency_count_(dependency_count), p_dependencies_(p_dependencies),
      correlated_view_mask_count_(correlated_view_mask_count), p_correlated_view_masks_(p_correlated_view_masks), next_(next) {}

  RenderPassCreateInfo2(const native_type &rhs) : RenderPassCreateInfo2(std::bit_cast<RenderPassCreateInfo2>(rhs)) {}

  RenderPassCreateInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassCreateInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassCreateInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_CREATE_INFO_2;
  const void *next_;
  RenderPassCreateMask flags_;
  uint32_t attachment_count_;
  const AttachmentDescription2 *p_attachments_;
  uint32_t subpass_count_;
  const SubpassDescription2 *p_subpasses_;
  uint32_t dependency_count_;
  const SubpassDependency2 *p_dependencies_;
  uint32_t correlated_view_mask_count_;
  const uint32_t *p_correlated_view_masks_;
};

struct VideoDecodeH265SessionParametersCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;

  using native_type = VkVideoDecodeH265SessionParametersCreateInfoKHR;

  VideoDecodeH265SessionParametersCreateInfoKHR(uint32_t max_std_vpscount = {},
                                                uint32_t max_std_spscount = {},
                                                uint32_t max_std_ppscount = {},
                                                const VideoDecodeH265SessionParametersAddInfoKHR *p_parameters_add_info = {},
                                                const void *next = {})
    : max_std_vpscount_(max_std_vpscount), max_std_spscount_(max_std_spscount), max_std_ppscount_(max_std_ppscount),
      p_parameters_add_info_(p_parameters_add_info), next_(next) {}

  VideoDecodeH265SessionParametersCreateInfoKHR(const native_type &rhs)
    : VideoDecodeH265SessionParametersCreateInfoKHR(std::bit_cast<VideoDecodeH265SessionParametersCreateInfoKHR>(rhs)) {}

  VideoDecodeH265SessionParametersCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeH265SessionParametersCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeH265SessionParametersCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;
  const void *next_;
  uint32_t max_std_vpscount_;
  uint32_t max_std_spscount_;
  uint32_t max_std_ppscount_;
  const VideoDecodeH265SessionParametersAddInfoKHR *p_parameters_add_info_;
};

struct PhysicalDeviceShaderCoreProperties2AMD {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;

  using native_type = VkPhysicalDeviceShaderCoreProperties2AMD;

  PhysicalDeviceShaderCoreProperties2AMD() = default;

  PhysicalDeviceShaderCoreProperties2AMD(const native_type &rhs)
    : PhysicalDeviceShaderCoreProperties2AMD(std::bit_cast<PhysicalDeviceShaderCoreProperties2AMD>(rhs)) {}

  PhysicalDeviceShaderCoreProperties2AMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderCoreProperties2AMD>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderCoreProperties2AMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
  void *next_ = {};
  ShaderCorePropertiesMask shader_core_features_ = {};
  uint32_t active_compute_unit_count_ = {};
};

struct PipelineRasterizationConservativeStateCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;

  using native_type = VkPipelineRasterizationConservativeStateCreateInfoEXT;

  PipelineRasterizationConservativeStateCreateInfoEXT(
    PipelineRasterizationConservativeStateCreateMask flags = {},
    ConservativeRasterizationMode conservative_rasterization_mode = ConservativeRasterizationMode::E_DISABLED_EXT,
    float extra_primitive_overestimation_size = {},
    const void *next = {})
    : flags_(flags), conservative_rasterization_mode_(conservative_rasterization_mode),
      extra_primitive_overestimation_size_(extra_primitive_overestimation_size), next_(next) {}

  PipelineRasterizationConservativeStateCreateInfoEXT(const native_type &rhs)
    : PipelineRasterizationConservativeStateCreateInfoEXT(std::bit_cast<PipelineRasterizationConservativeStateCreateInfoEXT>(rhs)) {}

  PipelineRasterizationConservativeStateCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRasterizationConservativeStateCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRasterizationConservativeStateCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
  const void *next_;
  PipelineRasterizationConservativeStateCreateMask flags_;
  ConservativeRasterizationMode conservative_rasterization_mode_;
  float extra_primitive_overestimation_size_;
};

struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;

  PhysicalDeviceVertexAttributeDivisorPropertiesEXT() = default;

  PhysicalDeviceVertexAttributeDivisorPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceVertexAttributeDivisorPropertiesEXT(std::bit_cast<PhysicalDeviceVertexAttributeDivisorPropertiesEXT>(rhs)) {}

  PhysicalDeviceVertexAttributeDivisorPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVertexAttributeDivisorPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVertexAttributeDivisorPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_vertex_attrib_divisor_ = {};
};

struct PhysicalDeviceImageDrmFormatModifierInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;

  using native_type = VkPhysicalDeviceImageDrmFormatModifierInfoEXT;

  PhysicalDeviceImageDrmFormatModifierInfoEXT(uint64_t drm_format_modifier = {},
                                              SharingMode sharing_mode = SharingMode::E_EXCLUSIVE,
                                              uint32_t queue_family_index_count = {},
                                              const uint32_t *p_queue_family_indices = {},
                                              const void *next = {})
    : drm_format_modifier_(drm_format_modifier), sharing_mode_(sharing_mode), queue_family_index_count_(queue_family_index_count),
      p_queue_family_indices_(p_queue_family_indices), next_(next) {}

  PhysicalDeviceImageDrmFormatModifierInfoEXT(const native_type &rhs)
    : PhysicalDeviceImageDrmFormatModifierInfoEXT(std::bit_cast<PhysicalDeviceImageDrmFormatModifierInfoEXT>(rhs)) {}

  PhysicalDeviceImageDrmFormatModifierInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageDrmFormatModifierInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageDrmFormatModifierInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
  const void *next_;
  uint64_t drm_format_modifier_;
  SharingMode sharing_mode_;
  uint32_t queue_family_index_count_;
  const uint32_t *p_queue_family_indices_;
};

struct DescriptorSetLayoutBindingFlagsCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;

  using native_type = VkDescriptorSetLayoutBindingFlagsCreateInfo;

  DescriptorSetLayoutBindingFlagsCreateInfo(uint32_t binding_count = {},
                                            const DescriptorBindingMask *p_binding_flags = {},
                                            const void *next = {})
    : binding_count_(binding_count), p_binding_flags_(p_binding_flags), next_(next) {}

  DescriptorSetLayoutBindingFlagsCreateInfo(const native_type &rhs)
    : DescriptorSetLayoutBindingFlagsCreateInfo(std::bit_cast<DescriptorSetLayoutBindingFlagsCreateInfo>(rhs)) {}

  DescriptorSetLayoutBindingFlagsCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetLayoutBindingFlagsCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetLayoutBindingFlagsCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
  const void *next_;
  uint32_t binding_count_;
  const DescriptorBindingMask *p_binding_flags_;
};

struct DescriptorSetVariableDescriptorCountLayoutSupport {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;

  using native_type = VkDescriptorSetVariableDescriptorCountLayoutSupport;

  DescriptorSetVariableDescriptorCountLayoutSupport() = default;

  DescriptorSetVariableDescriptorCountLayoutSupport(const native_type &rhs)
    : DescriptorSetVariableDescriptorCountLayoutSupport(std::bit_cast<DescriptorSetVariableDescriptorCountLayoutSupport>(rhs)) {}

  DescriptorSetVariableDescriptorCountLayoutSupport &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetVariableDescriptorCountLayoutSupport>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetVariableDescriptorCountLayoutSupport &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
  void *next_ = {};
  uint32_t max_variable_descriptor_count_ = {};
};

struct ImageViewHandleInfoNVX {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_HANDLE_INFO_NVX;

  using native_type = VkImageViewHandleInfoNVX;

  ImageViewHandleInfoNVX(VkImageView image_view = {},
                         DescriptorType descriptor_type = DescriptorType::E_SAMPLER,
                         VkSampler sampler = {},
                         const void *next = {})
    : image_view_(image_view), descriptor_type_(descriptor_type), sampler_(sampler), next_(next) {}

  ImageViewHandleInfoNVX(const native_type &rhs) : ImageViewHandleInfoNVX(std::bit_cast<ImageViewHandleInfoNVX>(rhs)) {}

  ImageViewHandleInfoNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewHandleInfoNVX>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewHandleInfoNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_HANDLE_INFO_NVX;
  const void *next_;
  VkImageView image_view_;
  DescriptorType descriptor_type_;
  VkSampler sampler_;
};

struct SubpassBeginInfo {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_BEGIN_INFO;

  using native_type = VkSubpassBeginInfo;

  SubpassBeginInfo(SubpassContents contents = SubpassContents::E_INLINE, const void *next = {}) : contents_(contents), next_(next) {}

  SubpassBeginInfo(const native_type &rhs) : SubpassBeginInfo(std::bit_cast<SubpassBeginInfo>(rhs)) {}

  SubpassBeginInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassBeginInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassBeginInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_BEGIN_INFO;
  const void *next_;
  SubpassContents contents_;
};

struct PhysicalDeviceCornerSampledImageFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;

  using native_type = VkPhysicalDeviceCornerSampledImageFeaturesNV;

  PhysicalDeviceCornerSampledImageFeaturesNV(bool32 corner_sampled_image = {}, void *next = {})
    : corner_sampled_image_(corner_sampled_image), next_(next) {}

  PhysicalDeviceCornerSampledImageFeaturesNV(const native_type &rhs)
    : PhysicalDeviceCornerSampledImageFeaturesNV(std::bit_cast<PhysicalDeviceCornerSampledImageFeaturesNV>(rhs)) {}

  PhysicalDeviceCornerSampledImageFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCornerSampledImageFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCornerSampledImageFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
  void *next_;
  bool32 corner_sampled_image_;
};

struct PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM;

  using native_type = VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;

  PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(bool32 fragment_density_map_offset = {}, void *next = {})
    : fragment_density_map_offset_(fragment_density_map_offset), next_(next) {}

  PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(const native_type &rhs)
    : PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(std::bit_cast<PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>(rhs)) {}

  PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM;
  void *next_;
  bool32 fragment_density_map_offset_;
};

struct PhysicalDeviceTimelineSemaphoreFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;

  using native_type = VkPhysicalDeviceTimelineSemaphoreFeatures;

  PhysicalDeviceTimelineSemaphoreFeatures(bool32 timeline_semaphore = {}, void *next = {})
    : timeline_semaphore_(timeline_semaphore), next_(next) {}

  PhysicalDeviceTimelineSemaphoreFeatures(const native_type &rhs)
    : PhysicalDeviceTimelineSemaphoreFeatures(std::bit_cast<PhysicalDeviceTimelineSemaphoreFeatures>(rhs)) {}

  PhysicalDeviceTimelineSemaphoreFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTimelineSemaphoreFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTimelineSemaphoreFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
  void *next_;
  bool32 timeline_semaphore_;
};

struct SemaphoreSignalInfo {

  static constexpr StructureType structure_type = StructureType::E_SEMAPHORE_SIGNAL_INFO;

  using native_type = VkSemaphoreSignalInfo;

  SemaphoreSignalInfo(VkSemaphore semaphore = {}, uint64_t value = {}, const void *next = {})
    : semaphore_(semaphore), value_(value), next_(next) {}

  SemaphoreSignalInfo(const native_type &rhs) : SemaphoreSignalInfo(std::bit_cast<SemaphoreSignalInfo>(rhs)) {}

  SemaphoreSignalInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SemaphoreSignalInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SemaphoreSignalInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SEMAPHORE_SIGNAL_INFO;
  const void *next_;
  VkSemaphore semaphore_;
  uint64_t value_;
};

struct PhysicalDevicePresentBarrierFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV;

  using native_type = VkPhysicalDevicePresentBarrierFeaturesNV;

  PhysicalDevicePresentBarrierFeaturesNV(bool32 present_barrier = {}, void *next = {}) : present_barrier_(present_barrier), next_(next) {}

  PhysicalDevicePresentBarrierFeaturesNV(const native_type &rhs)
    : PhysicalDevicePresentBarrierFeaturesNV(std::bit_cast<PhysicalDevicePresentBarrierFeaturesNV>(rhs)) {}

  PhysicalDevicePresentBarrierFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePresentBarrierFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePresentBarrierFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV;
  void *next_;
  bool32 present_barrier_;
};

struct DescriptorSetLayoutHostMappingInfoVALVE {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;

  using native_type = VkDescriptorSetLayoutHostMappingInfoVALVE;

  DescriptorSetLayoutHostMappingInfoVALVE(size_t descriptor_offset = {}, uint32_t descriptor_size = {}, void *next = {})
    : descriptor_offset_(descriptor_offset), descriptor_size_(descriptor_size), next_(next) {}

  DescriptorSetLayoutHostMappingInfoVALVE(const native_type &rhs)
    : DescriptorSetLayoutHostMappingInfoVALVE(std::bit_cast<DescriptorSetLayoutHostMappingInfoVALVE>(rhs)) {}

  DescriptorSetLayoutHostMappingInfoVALVE &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorSetLayoutHostMappingInfoVALVE>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorSetLayoutHostMappingInfoVALVE &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;
  void *next_;
  size_t descriptor_offset_;
  uint32_t descriptor_size_;
};

struct CopyImageToImageInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COPY_IMAGE_TO_IMAGE_INFO_EXT;

  using native_type = VkCopyImageToImageInfoEXT;

  CopyImageToImageInfoEXT(HostImageCopyMask flags = {},
                          VkImage src_image = {},
                          ImageLayout src_image_layout = ImageLayout::E_UNDEFINED,
                          VkImage dst_image = {},
                          ImageLayout dst_image_layout = ImageLayout::E_UNDEFINED,
                          uint32_t region_count = {},
                          const ImageCopy2 *p_regions = {},
                          const void *next = {})
    : flags_(flags), src_image_(src_image), src_image_layout_(src_image_layout), dst_image_(dst_image), dst_image_layout_(dst_image_layout),
      region_count_(region_count), p_regions_(p_regions), next_(next) {}

  CopyImageToImageInfoEXT(const native_type &rhs) : CopyImageToImageInfoEXT(std::bit_cast<CopyImageToImageInfoEXT>(rhs)) {}

  CopyImageToImageInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyImageToImageInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CopyImageToImageInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_IMAGE_TO_IMAGE_INFO_EXT;
  const void *next_;
  HostImageCopyMask flags_;
  VkImage src_image_;
  ImageLayout src_image_layout_;
  VkImage dst_image_;
  ImageLayout dst_image_layout_;
  uint32_t region_count_;
  const ImageCopy2 *p_regions_;
};

struct PhysicalDeviceVertexAttributeDivisorPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR;

  PhysicalDeviceVertexAttributeDivisorPropertiesKHR() = default;

  PhysicalDeviceVertexAttributeDivisorPropertiesKHR(const native_type &rhs)
    : PhysicalDeviceVertexAttributeDivisorPropertiesKHR(std::bit_cast<PhysicalDeviceVertexAttributeDivisorPropertiesKHR>(rhs)) {}

  PhysicalDeviceVertexAttributeDivisorPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVertexAttributeDivisorPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVertexAttributeDivisorPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t max_vertex_attrib_divisor_ = {};
  bool32 supports_non_zero_first_instance_ = {};
};

struct PhysicalDeviceImageViewImageFormatInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;

  using native_type = VkPhysicalDeviceImageViewImageFormatInfoEXT;

  PhysicalDeviceImageViewImageFormatInfoEXT(ImageViewType image_view_type = ImageViewType::E_1D, void *next = {})
    : image_view_type_(image_view_type), next_(next) {}

  PhysicalDeviceImageViewImageFormatInfoEXT(const native_type &rhs)
    : PhysicalDeviceImageViewImageFormatInfoEXT(std::bit_cast<PhysicalDeviceImageViewImageFormatInfoEXT>(rhs)) {}

  PhysicalDeviceImageViewImageFormatInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImageViewImageFormatInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImageViewImageFormatInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
  void *next_;
  ImageViewType image_view_type_;
};

struct PhysicalDeviceCoherentMemoryFeaturesAMD {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;

  using native_type = VkPhysicalDeviceCoherentMemoryFeaturesAMD;

  PhysicalDeviceCoherentMemoryFeaturesAMD(bool32 device_coherent_memory = {}, void *next = {})
    : device_coherent_memory_(device_coherent_memory), next_(next) {}

  PhysicalDeviceCoherentMemoryFeaturesAMD(const native_type &rhs)
    : PhysicalDeviceCoherentMemoryFeaturesAMD(std::bit_cast<PhysicalDeviceCoherentMemoryFeaturesAMD>(rhs)) {}

  PhysicalDeviceCoherentMemoryFeaturesAMD &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCoherentMemoryFeaturesAMD>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCoherentMemoryFeaturesAMD &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
  void *next_;
  bool32 device_coherent_memory_;
};

struct ImageFormatListCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_FORMAT_LIST_CREATE_INFO;

  using native_type = VkImageFormatListCreateInfo;

  ImageFormatListCreateInfo(uint32_t view_format_count = {}, const Format *p_view_formats = {}, const void *next = {})
    : view_format_count_(view_format_count), p_view_formats_(p_view_formats), next_(next) {}

  ImageFormatListCreateInfo(const native_type &rhs) : ImageFormatListCreateInfo(std::bit_cast<ImageFormatListCreateInfo>(rhs)) {}

  ImageFormatListCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageFormatListCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ImageFormatListCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_FORMAT_LIST_CREATE_INFO;
  const void *next_;
  uint32_t view_format_count_;
  const Format *p_view_formats_;
};

struct ImageViewUsageCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_USAGE_CREATE_INFO;

  using native_type = VkImageViewUsageCreateInfo;

  ImageViewUsageCreateInfo(ImageUsageMask usage = {}, const void *next = {}) : usage_(usage), next_(next) {}

  ImageViewUsageCreateInfo(const native_type &rhs) : ImageViewUsageCreateInfo(std::bit_cast<ImageViewUsageCreateInfo>(rhs)) {}

  ImageViewUsageCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewUsageCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewUsageCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_USAGE_CREATE_INFO;
  const void *next_;
  ImageUsageMask usage_;
};

struct PhysicalDevice8BitStorageFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;

  using native_type = VkPhysicalDevice8BitStorageFeatures;

  PhysicalDevice8BitStorageFeatures(bool32 storage_buffer8bit_access = {},
                                    bool32 uniform_and_storage_buffer8bit_access = {},
                                    bool32 storage_push_constant8 = {},
                                    void *next = {})
    : storage_buffer8bit_access_(storage_buffer8bit_access), uniform_and_storage_buffer8bit_access_(uniform_and_storage_buffer8bit_access),
      storage_push_constant8_(storage_push_constant8), next_(next) {}

  PhysicalDevice8BitStorageFeatures(const native_type &rhs)
    : PhysicalDevice8BitStorageFeatures(std::bit_cast<PhysicalDevice8BitStorageFeatures>(rhs)) {}

  PhysicalDevice8BitStorageFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevice8BitStorageFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevice8BitStorageFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
  void *next_;
  bool32 storage_buffer8bit_access_;
  bool32 uniform_and_storage_buffer8bit_access_;
  bool32 storage_push_constant8_;
};

struct CopyImageInfo2 {

  static constexpr StructureType structure_type = StructureType::E_COPY_IMAGE_INFO_2;

  using native_type = VkCopyImageInfo2;

  CopyImageInfo2(VkImage src_image = {},
                 ImageLayout src_image_layout = ImageLayout::E_UNDEFINED,
                 VkImage dst_image = {},
                 ImageLayout dst_image_layout = ImageLayout::E_UNDEFINED,
                 uint32_t region_count = {},
                 const ImageCopy2 *p_regions = {},
                 const void *next = {})
    : src_image_(src_image), src_image_layout_(src_image_layout), dst_image_(dst_image), dst_image_layout_(dst_image_layout),
      region_count_(region_count), p_regions_(p_regions), next_(next) {}

  CopyImageInfo2(const native_type &rhs) : CopyImageInfo2(std::bit_cast<CopyImageInfo2>(rhs)) {}

  CopyImageInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyImageInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const CopyImageInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_IMAGE_INFO_2;
  const void *next_;
  VkImage src_image_;
  ImageLayout src_image_layout_;
  VkImage dst_image_;
  ImageLayout dst_image_layout_;
  uint32_t region_count_;
  const ImageCopy2 *p_regions_;
};

struct PhysicalDeviceConditionalRenderingFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;

  using native_type = VkPhysicalDeviceConditionalRenderingFeaturesEXT;

  PhysicalDeviceConditionalRenderingFeaturesEXT(bool32 conditional_rendering = {},
                                                bool32 inherited_conditional_rendering = {},
                                                void *next = {})
    : conditional_rendering_(conditional_rendering), inherited_conditional_rendering_(inherited_conditional_rendering), next_(next) {}

  PhysicalDeviceConditionalRenderingFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceConditionalRenderingFeaturesEXT(std::bit_cast<PhysicalDeviceConditionalRenderingFeaturesEXT>(rhs)) {}

  PhysicalDeviceConditionalRenderingFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceConditionalRenderingFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceConditionalRenderingFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
  void *next_;
  bool32 conditional_rendering_;
  bool32 inherited_conditional_rendering_;
};

struct SwapchainPresentModesCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT;

  using native_type = VkSwapchainPresentModesCreateInfoEXT;

  SwapchainPresentModesCreateInfoEXT(uint32_t present_mode_count = {}, const PresentMode *p_present_modes = {}, const void *next = {})
    : present_mode_count_(present_mode_count), p_present_modes_(p_present_modes), next_(next) {}

  SwapchainPresentModesCreateInfoEXT(const native_type &rhs)
    : SwapchainPresentModesCreateInfoEXT(std::bit_cast<SwapchainPresentModesCreateInfoEXT>(rhs)) {}

  SwapchainPresentModesCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainPresentModesCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainPresentModesCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT;
  const void *next_;
  uint32_t present_mode_count_;
  const PresentMode *p_present_modes_;
};

struct PhysicalDeviceDeviceMemoryReportFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;

  PhysicalDeviceDeviceMemoryReportFeaturesEXT(bool32 device_memory_report = {}, void *next = {})
    : device_memory_report_(device_memory_report), next_(next) {}

  PhysicalDeviceDeviceMemoryReportFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDeviceMemoryReportFeaturesEXT(std::bit_cast<PhysicalDeviceDeviceMemoryReportFeaturesEXT>(rhs)) {}

  PhysicalDeviceDeviceMemoryReportFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDeviceMemoryReportFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDeviceMemoryReportFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
  void *next_;
  bool32 device_memory_report_;
};

struct PhysicalDeviceMeshShaderFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT;

  using native_type = VkPhysicalDeviceMeshShaderFeaturesEXT;

  PhysicalDeviceMeshShaderFeaturesEXT(bool32 task_shader = {},
                                      bool32 mesh_shader = {},
                                      bool32 multiview_mesh_shader = {},
                                      bool32 primitive_fragment_shading_rate_mesh_shader = {},
                                      bool32 mesh_shader_queries = {},
                                      void *next = {})
    : task_shader_(task_shader), mesh_shader_(mesh_shader), multiview_mesh_shader_(multiview_mesh_shader),
      primitive_fragment_shading_rate_mesh_shader_(primitive_fragment_shading_rate_mesh_shader), mesh_shader_queries_(mesh_shader_queries),
      next_(next) {}

  PhysicalDeviceMeshShaderFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceMeshShaderFeaturesEXT(std::bit_cast<PhysicalDeviceMeshShaderFeaturesEXT>(rhs)) {}

  PhysicalDeviceMeshShaderFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMeshShaderFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMeshShaderFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT;
  void *next_;
  bool32 task_shader_;
  bool32 mesh_shader_;
  bool32 multiview_mesh_shader_;
  bool32 primitive_fragment_shading_rate_mesh_shader_;
  bool32 mesh_shader_queries_;
};

struct PerformanceMarkerInfoINTEL {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_MARKER_INFO_INTEL;

  using native_type = VkPerformanceMarkerInfoINTEL;

  PerformanceMarkerInfoINTEL(uint64_t marker = {}, const void *next = {}) : marker_(marker), next_(next) {}

  PerformanceMarkerInfoINTEL(const native_type &rhs) : PerformanceMarkerInfoINTEL(std::bit_cast<PerformanceMarkerInfoINTEL>(rhs)) {}

  PerformanceMarkerInfoINTEL &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceMarkerInfoINTEL>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceMarkerInfoINTEL &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_MARKER_INFO_INTEL;
  const void *next_;
  uint64_t marker_;
};

struct PhysicalDeviceSubgroupProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;

  using native_type = VkPhysicalDeviceSubgroupProperties;

  PhysicalDeviceSubgroupProperties() = default;

  PhysicalDeviceSubgroupProperties(const native_type &rhs)
    : PhysicalDeviceSubgroupProperties(std::bit_cast<PhysicalDeviceSubgroupProperties>(rhs)) {}

  PhysicalDeviceSubgroupProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceSubgroupProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceSubgroupProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
  void *next_ = {};
  uint32_t subgroup_size_ = {};
  ShaderStageMask supported_stages_ = {};
  SubgroupFeatureMask supported_operations_ = {};
  bool32 quad_operations_in_all_stages_ = {};
};

struct PhysicalDeviceShaderAtomicFloatFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;

  using native_type = VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;

  PhysicalDeviceShaderAtomicFloatFeaturesEXT(bool32 shader_buffer_float32atomics = {},
                                             bool32 shader_buffer_float32atomic_add = {},
                                             bool32 shader_buffer_float64atomics = {},
                                             bool32 shader_buffer_float64atomic_add = {},
                                             bool32 shader_shared_float32atomics = {},
                                             bool32 shader_shared_float32atomic_add = {},
                                             bool32 shader_shared_float64atomics = {},
                                             bool32 shader_shared_float64atomic_add = {},
                                             bool32 shader_image_float32atomics = {},
                                             bool32 shader_image_float32atomic_add = {},
                                             bool32 sparse_image_float32atomics = {},
                                             bool32 sparse_image_float32atomic_add = {},
                                             void *next = {})
    : shader_buffer_float32atomics_(shader_buffer_float32atomics), shader_buffer_float32atomic_add_(shader_buffer_float32atomic_add),
      shader_buffer_float64atomics_(shader_buffer_float64atomics), shader_buffer_float64atomic_add_(shader_buffer_float64atomic_add),
      shader_shared_float32atomics_(shader_shared_float32atomics), shader_shared_float32atomic_add_(shader_shared_float32atomic_add),
      shader_shared_float64atomics_(shader_shared_float64atomics), shader_shared_float64atomic_add_(shader_shared_float64atomic_add),
      shader_image_float32atomics_(shader_image_float32atomics), shader_image_float32atomic_add_(shader_image_float32atomic_add),
      sparse_image_float32atomics_(sparse_image_float32atomics), sparse_image_float32atomic_add_(sparse_image_float32atomic_add),
      next_(next) {}

  PhysicalDeviceShaderAtomicFloatFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceShaderAtomicFloatFeaturesEXT(std::bit_cast<PhysicalDeviceShaderAtomicFloatFeaturesEXT>(rhs)) {}

  PhysicalDeviceShaderAtomicFloatFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderAtomicFloatFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderAtomicFloatFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
  void *next_;
  bool32 shader_buffer_float32atomics_;
  bool32 shader_buffer_float32atomic_add_;
  bool32 shader_buffer_float64atomics_;
  bool32 shader_buffer_float64atomic_add_;
  bool32 shader_shared_float32atomics_;
  bool32 shader_shared_float32atomic_add_;
  bool32 shader_shared_float64atomics_;
  bool32 shader_shared_float64atomic_add_;
  bool32 shader_image_float32atomics_;
  bool32 shader_image_float32atomic_add_;
  bool32 sparse_image_float32atomics_;
  bool32 sparse_image_float32atomic_add_;
};

struct DedicatedAllocationImageCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;

  using native_type = VkDedicatedAllocationImageCreateInfoNV;

  DedicatedAllocationImageCreateInfoNV(bool32 dedicated_allocation = {}, const void *next = {})
    : dedicated_allocation_(dedicated_allocation), next_(next) {}

  DedicatedAllocationImageCreateInfoNV(const native_type &rhs)
    : DedicatedAllocationImageCreateInfoNV(std::bit_cast<DedicatedAllocationImageCreateInfoNV>(rhs)) {}

  DedicatedAllocationImageCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<DedicatedAllocationImageCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const DedicatedAllocationImageCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
  const void *next_;
  bool32 dedicated_allocation_;
};

struct PhysicalDeviceVertexAttributeDivisorFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR;

  using native_type = VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;

  PhysicalDeviceVertexAttributeDivisorFeaturesKHR(bool32 vertex_attribute_instance_rate_divisor = {},
                                                  bool32 vertex_attribute_instance_rate_zero_divisor = {},
                                                  void *next = {})
    : vertex_attribute_instance_rate_divisor_(vertex_attribute_instance_rate_divisor),
      vertex_attribute_instance_rate_zero_divisor_(vertex_attribute_instance_rate_zero_divisor), next_(next) {}

  PhysicalDeviceVertexAttributeDivisorFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceVertexAttributeDivisorFeaturesKHR(std::bit_cast<PhysicalDeviceVertexAttributeDivisorFeaturesKHR>(rhs)) {}

  PhysicalDeviceVertexAttributeDivisorFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceVertexAttributeDivisorFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceVertexAttributeDivisorFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR;
  void *next_;
  bool32 vertex_attribute_instance_rate_divisor_;
  bool32 vertex_attribute_instance_rate_zero_divisor_;
};

struct CheckpointDataNV {

  static constexpr StructureType structure_type = StructureType::E_CHECKPOINT_DATA_NV;

  using native_type = VkCheckpointDataNV;

  CheckpointDataNV() = default;

  CheckpointDataNV(const native_type &rhs) : CheckpointDataNV(std::bit_cast<CheckpointDataNV>(rhs)) {}

  CheckpointDataNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CheckpointDataNV>(rhs);
    return *this;
  }

  auto operator<=>(const CheckpointDataNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CHECKPOINT_DATA_NV;
  void *next_ = {};
  PipelineStageMaskBit stage_ = {};
  void *p_checkpoint_marker_ = {};
};

struct FrameBoundaryEXT {

  static constexpr StructureType structure_type = StructureType::E_FRAME_BOUNDARY_EXT;

  using native_type = VkFrameBoundaryEXT;

  FrameBoundaryEXT(FrameBoundaryMask flags = {},
                   uint64_t frame_id = {},
                   uint32_t image_count = {},
                   const VkImage *p_images = {},
                   uint32_t buffer_count = {},
                   const VkBuffer *p_buffers = {},
                   uint64_t tag_name = {},
                   size_t tag_size = {},
                   const void *p_tag = {},
                   const void *next = {})
    : flags_(flags), frame_id_(frame_id), image_count_(image_count), p_images_(p_images), buffer_count_(buffer_count),
      p_buffers_(p_buffers), tag_name_(tag_name), tag_size_(tag_size), p_tag_(p_tag), next_(next) {}

  FrameBoundaryEXT(const native_type &rhs) : FrameBoundaryEXT(std::bit_cast<FrameBoundaryEXT>(rhs)) {}

  FrameBoundaryEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<FrameBoundaryEXT>(rhs);
    return *this;
  }

  auto operator<=>(const FrameBoundaryEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FRAME_BOUNDARY_EXT;
  const void *next_;
  FrameBoundaryMask flags_;
  uint64_t frame_id_;
  uint32_t image_count_;
  const VkImage *p_images_;
  uint32_t buffer_count_;
  const VkBuffer *p_buffers_;
  uint64_t tag_name_;
  size_t tag_size_;
  const void *p_tag_;
};

struct PhysicalDeviceDepthStencilResolveProperties {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;

  using native_type = VkPhysicalDeviceDepthStencilResolveProperties;

  PhysicalDeviceDepthStencilResolveProperties() = default;

  PhysicalDeviceDepthStencilResolveProperties(const native_type &rhs)
    : PhysicalDeviceDepthStencilResolveProperties(std::bit_cast<PhysicalDeviceDepthStencilResolveProperties>(rhs)) {}

  PhysicalDeviceDepthStencilResolveProperties &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDepthStencilResolveProperties>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDepthStencilResolveProperties &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
  void *next_ = {};
  ResolveModeMask supported_depth_resolve_modes_ = {};
  ResolveModeMask supported_stencil_resolve_modes_ = {};
  bool32 independent_resolve_none_ = {};
  bool32 independent_resolve_ = {};
};

struct RenderPassSubpassFeedbackCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT;

  using native_type = VkRenderPassSubpassFeedbackCreateInfoEXT;

  RenderPassSubpassFeedbackCreateInfoEXT(RenderPassSubpassFeedbackInfoEXT *p_subpass_feedback = {}, const void *next = {})
    : p_subpass_feedback_(p_subpass_feedback), next_(next) {}

  RenderPassSubpassFeedbackCreateInfoEXT(const native_type &rhs)
    : RenderPassSubpassFeedbackCreateInfoEXT(std::bit_cast<RenderPassSubpassFeedbackCreateInfoEXT>(rhs)) {}

  RenderPassSubpassFeedbackCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassSubpassFeedbackCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassSubpassFeedbackCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT;
  const void *next_;
  RenderPassSubpassFeedbackInfoEXT *p_subpass_feedback_;
};

struct SubpassDescriptionDepthStencilResolve {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;

  using native_type = VkSubpassDescriptionDepthStencilResolve;

  SubpassDescriptionDepthStencilResolve(ResolveModeMaskBit depth_resolve_mode = ResolveModeMaskBit::E_NONE,
                                        ResolveModeMaskBit stencil_resolve_mode = ResolveModeMaskBit::E_NONE,
                                        const AttachmentReference2 *p_depth_stencil_resolve_attachment = {},
                                        const void *next = {})
    : depth_resolve_mode_(depth_resolve_mode), stencil_resolve_mode_(stencil_resolve_mode),
      p_depth_stencil_resolve_attachment_(p_depth_stencil_resolve_attachment), next_(next) {}

  SubpassDescriptionDepthStencilResolve(const native_type &rhs)
    : SubpassDescriptionDepthStencilResolve(std::bit_cast<SubpassDescriptionDepthStencilResolve>(rhs)) {}

  SubpassDescriptionDepthStencilResolve &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassDescriptionDepthStencilResolve>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassDescriptionDepthStencilResolve &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
  const void *next_;
  ResolveModeMaskBit depth_resolve_mode_;
  ResolveModeMaskBit stencil_resolve_mode_;
  const AttachmentReference2 *p_depth_stencil_resolve_attachment_;
};

struct SwapchainPresentFenceInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_PRESENT_FENCE_INFO_EXT;

  using native_type = VkSwapchainPresentFenceInfoEXT;

  SwapchainPresentFenceInfoEXT(uint32_t swapchain_count = {}, const VkFence *p_fences = {}, const void *next = {})
    : swapchain_count_(swapchain_count), p_fences_(p_fences), next_(next) {}

  SwapchainPresentFenceInfoEXT(const native_type &rhs) : SwapchainPresentFenceInfoEXT(std::bit_cast<SwapchainPresentFenceInfoEXT>(rhs)) {}

  SwapchainPresentFenceInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainPresentFenceInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainPresentFenceInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_PRESENT_FENCE_INFO_EXT;
  const void *next_;
  uint32_t swapchain_count_;
  const VkFence *p_fences_;
};

struct AcquireProfilingLockInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACQUIRE_PROFILING_LOCK_INFO_KHR;

  using native_type = VkAcquireProfilingLockInfoKHR;

  AcquireProfilingLockInfoKHR(AcquireProfilingLockMask flags = {}, uint64_t timeout = {}, const void *next = {})
    : flags_(flags), timeout_(timeout), next_(next) {}

  AcquireProfilingLockInfoKHR(const native_type &rhs) : AcquireProfilingLockInfoKHR(std::bit_cast<AcquireProfilingLockInfoKHR>(rhs)) {}

  AcquireProfilingLockInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AcquireProfilingLockInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AcquireProfilingLockInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACQUIRE_PROFILING_LOCK_INFO_KHR;
  const void *next_;
  AcquireProfilingLockMask flags_;
  uint64_t timeout_;
};

struct PhysicalDeviceRayTracingInvocationReorderPropertiesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV;

  using native_type = VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;

  PhysicalDeviceRayTracingInvocationReorderPropertiesNV() = default;

  PhysicalDeviceRayTracingInvocationReorderPropertiesNV(const native_type &rhs)
    : PhysicalDeviceRayTracingInvocationReorderPropertiesNV(std::bit_cast<PhysicalDeviceRayTracingInvocationReorderPropertiesNV>(rhs)) {}

  PhysicalDeviceRayTracingInvocationReorderPropertiesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingInvocationReorderPropertiesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingInvocationReorderPropertiesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV;
  void *next_ = {};
  RayTracingInvocationReorderMode ray_tracing_invocation_reorder_reordering_hint_ = {};
};

struct SubpassEndInfo {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_END_INFO;

  using native_type = VkSubpassEndInfo;

  SubpassEndInfo(const void *next = {}) : next_(next) {}

  SubpassEndInfo(const native_type &rhs) : SubpassEndInfo(std::bit_cast<SubpassEndInfo>(rhs)) {}

  SubpassEndInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassEndInfo>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassEndInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_END_INFO;
  const void *next_;
};

struct ImageViewASTCDecodeModeEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;

  using native_type = VkImageViewASTCDecodeModeEXT;

  ImageViewASTCDecodeModeEXT(Format decode_mode = Format::E_UNDEFINED, const void *next = {}) : decode_mode_(decode_mode), next_(next) {}

  ImageViewASTCDecodeModeEXT(const native_type &rhs) : ImageViewASTCDecodeModeEXT(std::bit_cast<ImageViewASTCDecodeModeEXT>(rhs)) {}

  ImageViewASTCDecodeModeEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewASTCDecodeModeEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewASTCDecodeModeEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
  const void *next_;
  Format decode_mode_;
};

struct PhysicalDeviceASTCDecodeFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;

  using native_type = VkPhysicalDeviceASTCDecodeFeaturesEXT;

  PhysicalDeviceASTCDecodeFeaturesEXT(bool32 decode_mode_shared_exponent = {}, void *next = {})
    : decode_mode_shared_exponent_(decode_mode_shared_exponent), next_(next) {}

  PhysicalDeviceASTCDecodeFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceASTCDecodeFeaturesEXT(std::bit_cast<PhysicalDeviceASTCDecodeFeaturesEXT>(rhs)) {}

  PhysicalDeviceASTCDecodeFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceASTCDecodeFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceASTCDecodeFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
  void *next_;
  bool32 decode_mode_shared_exponent_;
};

struct PhysicalDeviceTransformFeedbackPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceTransformFeedbackPropertiesEXT;

  PhysicalDeviceTransformFeedbackPropertiesEXT() = default;

  PhysicalDeviceTransformFeedbackPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceTransformFeedbackPropertiesEXT(std::bit_cast<PhysicalDeviceTransformFeedbackPropertiesEXT>(rhs)) {}

  PhysicalDeviceTransformFeedbackPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceTransformFeedbackPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceTransformFeedbackPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
  void *next_ = {};
  uint32_t max_transform_feedback_streams_ = {};
  uint32_t max_transform_feedback_buffers_ = {};
  DeviceSize max_transform_feedback_buffer_size_ = {};
  uint32_t max_transform_feedback_stream_data_size_ = {};
  uint32_t max_transform_feedback_buffer_data_size_ = {};
  uint32_t max_transform_feedback_buffer_data_stride_ = {};
  bool32 transform_feedback_queries_ = {};
  bool32 transform_feedback_streams_lines_triangles_ = {};
  bool32 transform_feedback_rasterization_stream_select_ = {};
  bool32 transform_feedback_draw_ = {};
};

struct PhysicalDeviceRayTracingMaintenance1FeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR;

  using native_type = VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;

  PhysicalDeviceRayTracingMaintenance1FeaturesKHR(bool32 ray_tracing_maintenance1 = {},
                                                  bool32 ray_tracing_pipeline_trace_rays_indirect2 = {},
                                                  void *next = {})
    : ray_tracing_maintenance1_(ray_tracing_maintenance1),
      ray_tracing_pipeline_trace_rays_indirect2_(ray_tracing_pipeline_trace_rays_indirect2), next_(next) {}

  PhysicalDeviceRayTracingMaintenance1FeaturesKHR(const native_type &rhs)
    : PhysicalDeviceRayTracingMaintenance1FeaturesKHR(std::bit_cast<PhysicalDeviceRayTracingMaintenance1FeaturesKHR>(rhs)) {}

  PhysicalDeviceRayTracingMaintenance1FeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingMaintenance1FeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingMaintenance1FeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR;
  void *next_;
  bool32 ray_tracing_maintenance1_;
  bool32 ray_tracing_pipeline_trace_rays_indirect2_;
};

struct PhysicalDeviceRepresentativeFragmentTestFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;

  using native_type = VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;

  PhysicalDeviceRepresentativeFragmentTestFeaturesNV(bool32 representative_fragment_test = {}, void *next = {})
    : representative_fragment_test_(representative_fragment_test), next_(next) {}

  PhysicalDeviceRepresentativeFragmentTestFeaturesNV(const native_type &rhs)
    : PhysicalDeviceRepresentativeFragmentTestFeaturesNV(std::bit_cast<PhysicalDeviceRepresentativeFragmentTestFeaturesNV>(rhs)) {}

  PhysicalDeviceRepresentativeFragmentTestFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRepresentativeFragmentTestFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRepresentativeFragmentTestFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
  void *next_;
  bool32 representative_fragment_test_;
};

struct PipelineRepresentativeFragmentTestStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineRepresentativeFragmentTestStateCreateInfoNV;

  PipelineRepresentativeFragmentTestStateCreateInfoNV(bool32 representative_fragment_test_enable = {}, const void *next = {})
    : representative_fragment_test_enable_(representative_fragment_test_enable), next_(next) {}

  PipelineRepresentativeFragmentTestStateCreateInfoNV(const native_type &rhs)
    : PipelineRepresentativeFragmentTestStateCreateInfoNV(std::bit_cast<PipelineRepresentativeFragmentTestStateCreateInfoNV>(rhs)) {}

  PipelineRepresentativeFragmentTestStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineRepresentativeFragmentTestStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineRepresentativeFragmentTestStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
  const void *next_;
  bool32 representative_fragment_test_enable_;
};

struct PhysicalDeviceShaderImageFootprintFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;

  using native_type = VkPhysicalDeviceShaderImageFootprintFeaturesNV;

  PhysicalDeviceShaderImageFootprintFeaturesNV(bool32 image_footprint = {}, void *next = {})
    : image_footprint_(image_footprint), next_(next) {}

  PhysicalDeviceShaderImageFootprintFeaturesNV(const native_type &rhs)
    : PhysicalDeviceShaderImageFootprintFeaturesNV(std::bit_cast<PhysicalDeviceShaderImageFootprintFeaturesNV>(rhs)) {}

  PhysicalDeviceShaderImageFootprintFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderImageFootprintFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderImageFootprintFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
  void *next_;
  bool32 image_footprint_;
};

struct ImageMemoryBarrier {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_MEMORY_BARRIER;

  using native_type = VkImageMemoryBarrier;

  ImageMemoryBarrier(AccessMask src_access_mask = {},
                     AccessMask dst_access_mask = {},
                     ImageLayout old_layout = ImageLayout::E_UNDEFINED,
                     ImageLayout new_layout = ImageLayout::E_UNDEFINED,
                     uint32_t src_queue_family_index = {},
                     uint32_t dst_queue_family_index = {},
                     VkImage image = {},
                     ImageSubresourceRange subresource_range = {},
                     const void *next = {})
    : src_access_mask_(src_access_mask), dst_access_mask_(dst_access_mask), old_layout_(old_layout), new_layout_(new_layout),
      src_queue_family_index_(src_queue_family_index), dst_queue_family_index_(dst_queue_family_index), image_(image),
      subresource_range_(subresource_range), next_(next) {}

  ImageMemoryBarrier(const native_type &rhs) : ImageMemoryBarrier(std::bit_cast<ImageMemoryBarrier>(rhs)) {}

  ImageMemoryBarrier &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageMemoryBarrier>(rhs);
    return *this;
  }

  auto operator<=>(const ImageMemoryBarrier &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_MEMORY_BARRIER;
  const void *next_;
  AccessMask src_access_mask_;
  AccessMask dst_access_mask_;
  ImageLayout old_layout_;
  ImageLayout new_layout_;
  uint32_t src_queue_family_index_;
  uint32_t dst_queue_family_index_;
  VkImage image_;
  ImageSubresourceRange subresource_range_;
};

struct DisplayModeCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_DISPLAY_MODE_CREATE_INFO_KHR;

  using native_type = VkDisplayModeCreateInfoKHR;

  DisplayModeCreateInfoKHR(DisplayModeCreateMask flags = {}, DisplayModeParametersKHR parameters = {}, const void *next = {})
    : flags_(flags), parameters_(parameters), next_(next) {}

  DisplayModeCreateInfoKHR(const native_type &rhs) : DisplayModeCreateInfoKHR(std::bit_cast<DisplayModeCreateInfoKHR>(rhs)) {}

  DisplayModeCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<DisplayModeCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const DisplayModeCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DISPLAY_MODE_CREATE_INFO_KHR;
  const void *next_;
  DisplayModeCreateMask flags_;
  DisplayModeParametersKHR parameters_;
};

struct ImageStencilUsageCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_STENCIL_USAGE_CREATE_INFO;

  using native_type = VkImageStencilUsageCreateInfo;

  ImageStencilUsageCreateInfo(ImageUsageMask stencil_usage = {}, const void *next = {}) : stencil_usage_(stencil_usage), next_(next) {}

  ImageStencilUsageCreateInfo(const native_type &rhs) : ImageStencilUsageCreateInfo(std::bit_cast<ImageStencilUsageCreateInfo>(rhs)) {}

  ImageStencilUsageCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageStencilUsageCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const ImageStencilUsageCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_STENCIL_USAGE_CREATE_INFO;
  const void *next_;
  ImageUsageMask stencil_usage_;
};

struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;

  using native_type = VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

  PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(bool32 dedicated_allocation_image_aliasing = {}, void *next = {})
    : dedicated_allocation_image_aliasing_(dedicated_allocation_image_aliasing), next_(next) {}

  PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(const native_type &rhs)
    : PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
        std::bit_cast<PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(rhs)) {}

  PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
  void *next_;
  bool32 dedicated_allocation_image_aliasing_;
};

struct CopyMemoryToImageInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_COPY_MEMORY_TO_IMAGE_INFO_EXT;

  using native_type = VkCopyMemoryToImageInfoEXT;

  CopyMemoryToImageInfoEXT(HostImageCopyMask flags = {},
                           VkImage dst_image = {},
                           ImageLayout dst_image_layout = ImageLayout::E_UNDEFINED,
                           uint32_t region_count = {},
                           const MemoryToImageCopyEXT *p_regions = {},
                           const void *next = {})
    : flags_(flags), dst_image_(dst_image), dst_image_layout_(dst_image_layout), region_count_(region_count), p_regions_(p_regions),
      next_(next) {}

  CopyMemoryToImageInfoEXT(const native_type &rhs) : CopyMemoryToImageInfoEXT(std::bit_cast<CopyMemoryToImageInfoEXT>(rhs)) {}

  CopyMemoryToImageInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyMemoryToImageInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const CopyMemoryToImageInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_MEMORY_TO_IMAGE_INFO_EXT;
  const void *next_;
  HostImageCopyMask flags_;
  VkImage dst_image_;
  ImageLayout dst_image_layout_;
  uint32_t region_count_;
  const MemoryToImageCopyEXT *p_regions_;
};

struct PhysicalDeviceCopyMemoryIndirectFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV;

  using native_type = VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;

  PhysicalDeviceCopyMemoryIndirectFeaturesNV(bool32 indirect_copy = {}, void *next = {}) : indirect_copy_(indirect_copy), next_(next) {}

  PhysicalDeviceCopyMemoryIndirectFeaturesNV(const native_type &rhs)
    : PhysicalDeviceCopyMemoryIndirectFeaturesNV(std::bit_cast<PhysicalDeviceCopyMemoryIndirectFeaturesNV>(rhs)) {}

  PhysicalDeviceCopyMemoryIndirectFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCopyMemoryIndirectFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCopyMemoryIndirectFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV;
  void *next_;
  bool32 indirect_copy_;
};

struct PhysicalDeviceMemoryDecompressionFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV;

  using native_type = VkPhysicalDeviceMemoryDecompressionFeaturesNV;

  PhysicalDeviceMemoryDecompressionFeaturesNV(bool32 memory_decompression = {}, void *next = {})
    : memory_decompression_(memory_decompression), next_(next) {}

  PhysicalDeviceMemoryDecompressionFeaturesNV(const native_type &rhs)
    : PhysicalDeviceMemoryDecompressionFeaturesNV(std::bit_cast<PhysicalDeviceMemoryDecompressionFeaturesNV>(rhs)) {}

  PhysicalDeviceMemoryDecompressionFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMemoryDecompressionFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMemoryDecompressionFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV;
  void *next_;
  bool32 memory_decompression_;
};

struct PhysicalDeviceRayTracingValidationFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV;

  using native_type = VkPhysicalDeviceRayTracingValidationFeaturesNV;

  PhysicalDeviceRayTracingValidationFeaturesNV(bool32 ray_tracing_validation = {}, void *next = {})
    : ray_tracing_validation_(ray_tracing_validation), next_(next) {}

  PhysicalDeviceRayTracingValidationFeaturesNV(const native_type &rhs)
    : PhysicalDeviceRayTracingValidationFeaturesNV(std::bit_cast<PhysicalDeviceRayTracingValidationFeaturesNV>(rhs)) {}

  PhysicalDeviceRayTracingValidationFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingValidationFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingValidationFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV;
  void *next_;
  bool32 ray_tracing_validation_;
};

struct PhysicalDeviceCoverageReductionModeFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;

  using native_type = VkPhysicalDeviceCoverageReductionModeFeaturesNV;

  PhysicalDeviceCoverageReductionModeFeaturesNV(bool32 coverage_reduction_mode = {}, void *next = {})
    : coverage_reduction_mode_(coverage_reduction_mode), next_(next) {}

  PhysicalDeviceCoverageReductionModeFeaturesNV(const native_type &rhs)
    : PhysicalDeviceCoverageReductionModeFeaturesNV(std::bit_cast<PhysicalDeviceCoverageReductionModeFeaturesNV>(rhs)) {}

  PhysicalDeviceCoverageReductionModeFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCoverageReductionModeFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCoverageReductionModeFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
  void *next_;
  bool32 coverage_reduction_mode_;
};

struct PipelineViewportShadingRateImageStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineViewportShadingRateImageStateCreateInfoNV;

  PipelineViewportShadingRateImageStateCreateInfoNV(bool32 shading_rate_image_enable = {},
                                                    uint32_t viewport_count = {},
                                                    const ShadingRatePaletteNV *p_shading_rate_palettes = {},
                                                    const void *next = {})
    : shading_rate_image_enable_(shading_rate_image_enable), viewport_count_(viewport_count),
      p_shading_rate_palettes_(p_shading_rate_palettes), next_(next) {}

  PipelineViewportShadingRateImageStateCreateInfoNV(const native_type &rhs)
    : PipelineViewportShadingRateImageStateCreateInfoNV(std::bit_cast<PipelineViewportShadingRateImageStateCreateInfoNV>(rhs)) {}

  PipelineViewportShadingRateImageStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportShadingRateImageStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportShadingRateImageStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
  const void *next_;
  bool32 shading_rate_image_enable_;
  uint32_t viewport_count_;
  const ShadingRatePaletteNV *p_shading_rate_palettes_;
};

struct PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV;

  using native_type = VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;

  PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(bool32 shader_float16vector_atomics = {}, void *next = {})
    : shader_float16vector_atomics_(shader_float16vector_atomics), next_(next) {}

  PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(const native_type &rhs)
    : PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(std::bit_cast<PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>(rhs)) {}

  PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV;
  void *next_;
  bool32 shader_float16vector_atomics_;
};

struct CoarseSampleLocationNV {

  using native_type = VkCoarseSampleLocationNV;

  CoarseSampleLocationNV(uint32_t pixel_x = {}, uint32_t pixel_y = {}, uint32_t sample = {})
    : pixel_x_(pixel_x), pixel_y_(pixel_y), sample_(sample) {}

  CoarseSampleLocationNV(const native_type &rhs) : CoarseSampleLocationNV(std::bit_cast<CoarseSampleLocationNV>(rhs)) {}

  CoarseSampleLocationNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CoarseSampleLocationNV>(rhs);
    return *this;
  }

  auto operator<=>(const CoarseSampleLocationNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t pixel_x_;
  uint32_t pixel_y_;
  uint32_t sample_;
};

struct PhysicalDeviceDepthBiasControlFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT;

  using native_type = VkPhysicalDeviceDepthBiasControlFeaturesEXT;

  PhysicalDeviceDepthBiasControlFeaturesEXT(bool32 depth_bias_control = {},
                                            bool32 least_representable_value_force_unorm_representation = {},
                                            bool32 float_representation = {},
                                            bool32 depth_bias_exact = {},
                                            void *next = {})
    : depth_bias_control_(depth_bias_control),
      least_representable_value_force_unorm_representation_(least_representable_value_force_unorm_representation),
      float_representation_(float_representation), depth_bias_exact_(depth_bias_exact), next_(next) {}

  PhysicalDeviceDepthBiasControlFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceDepthBiasControlFeaturesEXT(std::bit_cast<PhysicalDeviceDepthBiasControlFeaturesEXT>(rhs)) {}

  PhysicalDeviceDepthBiasControlFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceDepthBiasControlFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceDepthBiasControlFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT;
  void *next_;
  bool32 depth_bias_control_;
  bool32 least_representable_value_force_unorm_representation_;
  bool32 float_representation_;
  bool32 depth_bias_exact_;
};

struct CheckpointData2NV {

  static constexpr StructureType structure_type = StructureType::E_CHECKPOINT_DATA_2_NV;

  using native_type = VkCheckpointData2NV;

  CheckpointData2NV() = default;

  CheckpointData2NV(const native_type &rhs) : CheckpointData2NV(std::bit_cast<CheckpointData2NV>(rhs)) {}

  CheckpointData2NV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CheckpointData2NV>(rhs);
    return *this;
  }

  auto operator<=>(const CheckpointData2NV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_CHECKPOINT_DATA_2_NV;
  void *next_ = {};
  PipelineStageMask2 stage_ = {};
  void *p_checkpoint_marker_ = {};
};

struct CoarseSampleOrderCustomNV {

  using native_type = VkCoarseSampleOrderCustomNV;

  CoarseSampleOrderCustomNV(ShadingRatePaletteEntry shading_rate = ShadingRatePaletteEntry::E_NO_INVOCATIONS_NV,
                            uint32_t sample_count = {},
                            uint32_t sample_location_count = {},
                            const CoarseSampleLocationNV *p_sample_locations = {})
    : shading_rate_(shading_rate), sample_count_(sample_count), sample_location_count_(sample_location_count),
      p_sample_locations_(p_sample_locations) {}

  CoarseSampleOrderCustomNV(const native_type &rhs) : CoarseSampleOrderCustomNV(std::bit_cast<CoarseSampleOrderCustomNV>(rhs)) {}

  CoarseSampleOrderCustomNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<CoarseSampleOrderCustomNV>(rhs);
    return *this;
  }

  auto operator<=>(const CoarseSampleOrderCustomNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  ShadingRatePaletteEntry shading_rate_;
  uint32_t sample_count_;
  uint32_t sample_location_count_;
  const CoarseSampleLocationNV *p_sample_locations_;
};

struct ImageMemoryRequirementsInfo2 {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_MEMORY_REQUIREMENTS_INFO_2;

  using native_type = VkImageMemoryRequirementsInfo2;

  ImageMemoryRequirementsInfo2(VkImage image = {}, const void *next = {}) : image_(image), next_(next) {}

  ImageMemoryRequirementsInfo2(const native_type &rhs) : ImageMemoryRequirementsInfo2(std::bit_cast<ImageMemoryRequirementsInfo2>(rhs)) {}

  ImageMemoryRequirementsInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageMemoryRequirementsInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const ImageMemoryRequirementsInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
  const void *next_;
  VkImage image_;
};

struct PipelineViewportCoarseSampleOrderStateCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;

  using native_type = VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;

  PipelineViewportCoarseSampleOrderStateCreateInfoNV(CoarseSampleOrderType sample_order_type = CoarseSampleOrderType::E_DEFAULT_NV,
                                                     uint32_t custom_sample_order_count = {},
                                                     const CoarseSampleOrderCustomNV *p_custom_sample_orders = {},
                                                     const void *next = {})
    : sample_order_type_(sample_order_type), custom_sample_order_count_(custom_sample_order_count),
      p_custom_sample_orders_(p_custom_sample_orders), next_(next) {}

  PipelineViewportCoarseSampleOrderStateCreateInfoNV(const native_type &rhs)
    : PipelineViewportCoarseSampleOrderStateCreateInfoNV(std::bit_cast<PipelineViewportCoarseSampleOrderStateCreateInfoNV>(rhs)) {}

  PipelineViewportCoarseSampleOrderStateCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PipelineViewportCoarseSampleOrderStateCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const PipelineViewportCoarseSampleOrderStateCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
  const void *next_;
  CoarseSampleOrderType sample_order_type_;
  uint32_t custom_sample_order_count_;
  const CoarseSampleOrderCustomNV *p_custom_sample_orders_;
};

struct DrawMeshTasksIndirectCommandNV {

  using native_type = VkDrawMeshTasksIndirectCommandNV;

  DrawMeshTasksIndirectCommandNV(uint32_t task_count = {}, uint32_t first_task = {}) : task_count_(task_count), first_task_(first_task) {}

  DrawMeshTasksIndirectCommandNV(const native_type &rhs)
    : DrawMeshTasksIndirectCommandNV(std::bit_cast<DrawMeshTasksIndirectCommandNV>(rhs)) {}

  DrawMeshTasksIndirectCommandNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrawMeshTasksIndirectCommandNV>(rhs);
    return *this;
  }

  auto operator<=>(const DrawMeshTasksIndirectCommandNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t task_count_;
  uint32_t first_task_;
};

struct DrawMeshTasksIndirectCommandEXT {

  using native_type = VkDrawMeshTasksIndirectCommandEXT;

  DrawMeshTasksIndirectCommandEXT(uint32_t group_count_x = {}, uint32_t group_count_y = {}, uint32_t group_count_z = {})
    : group_count_x_(group_count_x), group_count_y_(group_count_y), group_count_z_(group_count_z) {}

  DrawMeshTasksIndirectCommandEXT(const native_type &rhs)
    : DrawMeshTasksIndirectCommandEXT(std::bit_cast<DrawMeshTasksIndirectCommandEXT>(rhs)) {}

  DrawMeshTasksIndirectCommandEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrawMeshTasksIndirectCommandEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DrawMeshTasksIndirectCommandEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t group_count_x_;
  uint32_t group_count_y_;
  uint32_t group_count_z_;
};

struct ImageDrmFormatModifierPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;

  using native_type = VkImageDrmFormatModifierPropertiesEXT;

  ImageDrmFormatModifierPropertiesEXT() = default;

  ImageDrmFormatModifierPropertiesEXT(const native_type &rhs)
    : ImageDrmFormatModifierPropertiesEXT(std::bit_cast<ImageDrmFormatModifierPropertiesEXT>(rhs)) {}

  ImageDrmFormatModifierPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageDrmFormatModifierPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageDrmFormatModifierPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
  void *next_ = {};
  uint64_t drm_format_modifier_ = {};
};

struct RayTracingPipelineCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_RAY_TRACING_PIPELINE_CREATE_INFO_NV;

  using native_type = VkRayTracingPipelineCreateInfoNV;

  RayTracingPipelineCreateInfoNV(PipelineCreateMask flags = {},
                                 uint32_t stage_count = {},
                                 const PipelineShaderStageCreateInfo *p_stages = {},
                                 uint32_t group_count = {},
                                 const RayTracingShaderGroupCreateInfoNV *p_groups = {},
                                 uint32_t max_recursion_depth = {},
                                 VkPipelineLayout layout = {},
                                 VkPipeline base_pipeline_handle = {},
                                 int32_t base_pipeline_index = {},
                                 const void *next = {})
    : flags_(flags), stage_count_(stage_count), p_stages_(p_stages), group_count_(group_count), p_groups_(p_groups),
      max_recursion_depth_(max_recursion_depth), layout_(layout), base_pipeline_handle_(base_pipeline_handle),
      base_pipeline_index_(base_pipeline_index), next_(next) {}

  RayTracingPipelineCreateInfoNV(const native_type &rhs)
    : RayTracingPipelineCreateInfoNV(std::bit_cast<RayTracingPipelineCreateInfoNV>(rhs)) {}

  RayTracingPipelineCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<RayTracingPipelineCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const RayTracingPipelineCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
  const void *next_;
  PipelineCreateMask flags_;
  uint32_t stage_count_;
  const PipelineShaderStageCreateInfo *p_stages_;
  uint32_t group_count_;
  const RayTracingShaderGroupCreateInfoNV *p_groups_;
  uint32_t max_recursion_depth_;
  VkPipelineLayout layout_;
  VkPipeline base_pipeline_handle_;
  int32_t base_pipeline_index_;
};

struct CooperativeMatrixPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_COOPERATIVE_MATRIX_PROPERTIES_KHR;

  using native_type = VkCooperativeMatrixPropertiesKHR;

  CooperativeMatrixPropertiesKHR() = default;

  CooperativeMatrixPropertiesKHR(const native_type &rhs)
    : CooperativeMatrixPropertiesKHR(std::bit_cast<CooperativeMatrixPropertiesKHR>(rhs)) {}

  CooperativeMatrixPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<CooperativeMatrixPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const CooperativeMatrixPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COOPERATIVE_MATRIX_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t msize_ = {};
  uint32_t nsize_ = {};
  uint32_t ksize_ = {};
  ComponentType atype_ = {};
  ComponentType btype_ = {};
  ComponentType ctype_ = {};
  ComponentType result_type_ = {};
  bool32 saturating_accumulation_ = {};
  Scope scope_ = {};
};

struct WriteDescriptorSetAccelerationStructureKHR {

  static constexpr StructureType structure_type = StructureType::E_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;

  using native_type = VkWriteDescriptorSetAccelerationStructureKHR;

  WriteDescriptorSetAccelerationStructureKHR(uint32_t acceleration_structure_count = {},
                                             const VkAccelerationStructureKHR *p_acceleration_structures = {},
                                             const void *next = {})
    : acceleration_structure_count_(acceleration_structure_count), p_acceleration_structures_(p_acceleration_structures), next_(next) {}

  WriteDescriptorSetAccelerationStructureKHR(const native_type &rhs)
    : WriteDescriptorSetAccelerationStructureKHR(std::bit_cast<WriteDescriptorSetAccelerationStructureKHR>(rhs)) {}

  WriteDescriptorSetAccelerationStructureKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<WriteDescriptorSetAccelerationStructureKHR>(rhs);
    return *this;
  }

  auto operator<=>(const WriteDescriptorSetAccelerationStructureKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
  const void *next_;
  uint32_t acceleration_structure_count_;
  const VkAccelerationStructureKHR *p_acceleration_structures_;
};

struct RayTracingPipelineCreateInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;

  using native_type = VkRayTracingPipelineCreateInfoKHR;

  RayTracingPipelineCreateInfoKHR(PipelineCreateMask flags = {},
                                  uint32_t stage_count = {},
                                  const PipelineShaderStageCreateInfo *p_stages = {},
                                  uint32_t group_count = {},
                                  const RayTracingShaderGroupCreateInfoKHR *p_groups = {},
                                  uint32_t max_pipeline_ray_recursion_depth = {},
                                  const PipelineLibraryCreateInfoKHR *p_library_info = {},
                                  const RayTracingPipelineInterfaceCreateInfoKHR *p_library_interface = {},
                                  const PipelineDynamicStateCreateInfo *p_dynamic_state = {},
                                  VkPipelineLayout layout = {},
                                  VkPipeline base_pipeline_handle = {},
                                  int32_t base_pipeline_index = {},
                                  const void *next = {})
    : flags_(flags), stage_count_(stage_count), p_stages_(p_stages), group_count_(group_count), p_groups_(p_groups),
      max_pipeline_ray_recursion_depth_(max_pipeline_ray_recursion_depth), p_library_info_(p_library_info),
      p_library_interface_(p_library_interface), p_dynamic_state_(p_dynamic_state), layout_(layout),
      base_pipeline_handle_(base_pipeline_handle), base_pipeline_index_(base_pipeline_index), next_(next) {}

  RayTracingPipelineCreateInfoKHR(const native_type &rhs)
    : RayTracingPipelineCreateInfoKHR(std::bit_cast<RayTracingPipelineCreateInfoKHR>(rhs)) {}

  RayTracingPipelineCreateInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RayTracingPipelineCreateInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RayTracingPipelineCreateInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
  const void *next_;
  PipelineCreateMask flags_;
  uint32_t stage_count_;
  const PipelineShaderStageCreateInfo *p_stages_;
  uint32_t group_count_;
  const RayTracingShaderGroupCreateInfoKHR *p_groups_;
  uint32_t max_pipeline_ray_recursion_depth_;
  const PipelineLibraryCreateInfoKHR *p_library_info_;
  const RayTracingPipelineInterfaceCreateInfoKHR *p_library_interface_;
  const PipelineDynamicStateCreateInfo *p_dynamic_state_;
  VkPipelineLayout layout_;
  VkPipeline base_pipeline_handle_;
  int32_t base_pipeline_index_;
};

struct CopyImageToBufferInfo2 {

  static constexpr StructureType structure_type = StructureType::E_COPY_IMAGE_TO_BUFFER_INFO_2;

  using native_type = VkCopyImageToBufferInfo2;

  CopyImageToBufferInfo2(VkImage src_image = {},
                         ImageLayout src_image_layout = ImageLayout::E_UNDEFINED,
                         VkBuffer dst_buffer = {},
                         uint32_t region_count = {},
                         const BufferImageCopy2 *p_regions = {},
                         const void *next = {})
    : src_image_(src_image), src_image_layout_(src_image_layout), dst_buffer_(dst_buffer), region_count_(region_count),
      p_regions_(p_regions), next_(next) {}

  CopyImageToBufferInfo2(const native_type &rhs) : CopyImageToBufferInfo2(std::bit_cast<CopyImageToBufferInfo2>(rhs)) {}

  CopyImageToBufferInfo2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<CopyImageToBufferInfo2>(rhs);
    return *this;
  }

  auto operator<=>(const CopyImageToBufferInfo2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_COPY_IMAGE_TO_BUFFER_INFO_2;
  const void *next_;
  VkImage src_image_;
  ImageLayout src_image_layout_;
  VkBuffer dst_buffer_;
  uint32_t region_count_;
  const BufferImageCopy2 *p_regions_;
};

struct PhysicalDeviceRayTracingPipelineFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;

  using native_type = VkPhysicalDeviceRayTracingPipelineFeaturesKHR;

  PhysicalDeviceRayTracingPipelineFeaturesKHR(bool32 ray_tracing_pipeline = {},
                                              bool32 ray_tracing_pipeline_shader_group_handle_capture_replay = {},
                                              bool32 ray_tracing_pipeline_shader_group_handle_capture_replay_mixed = {},
                                              bool32 ray_tracing_pipeline_trace_rays_indirect = {},
                                              bool32 ray_traversal_primitive_culling = {},
                                              void *next = {})
    : ray_tracing_pipeline_(ray_tracing_pipeline),
      ray_tracing_pipeline_shader_group_handle_capture_replay_(ray_tracing_pipeline_shader_group_handle_capture_replay),
      ray_tracing_pipeline_shader_group_handle_capture_replay_mixed_(ray_tracing_pipeline_shader_group_handle_capture_replay_mixed),
      ray_tracing_pipeline_trace_rays_indirect_(ray_tracing_pipeline_trace_rays_indirect),
      ray_traversal_primitive_culling_(ray_traversal_primitive_culling), next_(next) {}

  PhysicalDeviceRayTracingPipelineFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceRayTracingPipelineFeaturesKHR(std::bit_cast<PhysicalDeviceRayTracingPipelineFeaturesKHR>(rhs)) {}

  PhysicalDeviceRayTracingPipelineFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingPipelineFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingPipelineFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
  void *next_;
  bool32 ray_tracing_pipeline_;
  bool32 ray_tracing_pipeline_shader_group_handle_capture_replay_;
  bool32 ray_tracing_pipeline_shader_group_handle_capture_replay_mixed_;
  bool32 ray_tracing_pipeline_trace_rays_indirect_;
  bool32 ray_traversal_primitive_culling_;
};

struct VideoDecodeInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_DECODE_INFO_KHR;

  using native_type = VkVideoDecodeInfoKHR;

  VideoDecodeInfoKHR(VideoDecodeMask flags = {},
                     VkBuffer src_buffer = {},
                     DeviceSize src_buffer_offset = {},
                     DeviceSize src_buffer_range = {},
                     VideoPictureResourceInfoKHR dst_picture_resource = {},
                     const VideoReferenceSlotInfoKHR *p_setup_reference_slot = {},
                     uint32_t reference_slot_count = {},
                     const VideoReferenceSlotInfoKHR *p_reference_slots = {},
                     const void *next = {})
    : flags_(flags), src_buffer_(src_buffer), src_buffer_offset_(src_buffer_offset), src_buffer_range_(src_buffer_range),
      dst_picture_resource_(dst_picture_resource), p_setup_reference_slot_(p_setup_reference_slot),
      reference_slot_count_(reference_slot_count), p_reference_slots_(p_reference_slots), next_(next) {}

  VideoDecodeInfoKHR(const native_type &rhs) : VideoDecodeInfoKHR(std::bit_cast<VideoDecodeInfoKHR>(rhs)) {}

  VideoDecodeInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoDecodeInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoDecodeInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_DECODE_INFO_KHR;
  const void *next_;
  VideoDecodeMask flags_;
  VkBuffer src_buffer_;
  DeviceSize src_buffer_offset_;
  DeviceSize src_buffer_range_;
  VideoPictureResourceInfoKHR dst_picture_resource_;
  const VideoReferenceSlotInfoKHR *p_setup_reference_slot_;
  uint32_t reference_slot_count_;
  const VideoReferenceSlotInfoKHR *p_reference_slots_;
};

struct PhysicalDeviceBufferDeviceAddressFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;

  using native_type = VkPhysicalDeviceBufferDeviceAddressFeatures;

  PhysicalDeviceBufferDeviceAddressFeatures(bool32 buffer_device_address = {},
                                            bool32 buffer_device_address_capture_replay = {},
                                            bool32 buffer_device_address_multi_device = {},
                                            void *next = {})
    : buffer_device_address_(buffer_device_address), buffer_device_address_capture_replay_(buffer_device_address_capture_replay),
      buffer_device_address_multi_device_(buffer_device_address_multi_device), next_(next) {}

  PhysicalDeviceBufferDeviceAddressFeatures(const native_type &rhs)
    : PhysicalDeviceBufferDeviceAddressFeatures(std::bit_cast<PhysicalDeviceBufferDeviceAddressFeatures>(rhs)) {}

  PhysicalDeviceBufferDeviceAddressFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceBufferDeviceAddressFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceBufferDeviceAddressFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
  void *next_;
  bool32 buffer_device_address_;
  bool32 buffer_device_address_capture_replay_;
  bool32 buffer_device_address_multi_device_;
};

struct PhysicalDeviceRayTracingPipelinePropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceRayTracingPipelinePropertiesKHR;

  PhysicalDeviceRayTracingPipelinePropertiesKHR() = default;

  PhysicalDeviceRayTracingPipelinePropertiesKHR(const native_type &rhs)
    : PhysicalDeviceRayTracingPipelinePropertiesKHR(std::bit_cast<PhysicalDeviceRayTracingPipelinePropertiesKHR>(rhs)) {}

  PhysicalDeviceRayTracingPipelinePropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceRayTracingPipelinePropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceRayTracingPipelinePropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
  void *next_ = {};
  uint32_t shader_group_handle_size_ = {};
  uint32_t max_ray_recursion_depth_ = {};
  uint32_t max_shader_group_stride_ = {};
  uint32_t shader_group_base_alignment_ = {};
  uint32_t shader_group_handle_capture_replay_size_ = {};
  uint32_t max_ray_dispatch_invocation_count_ = {};
  uint32_t shader_group_handle_alignment_ = {};
  uint32_t max_ray_hit_attribute_size_ = {};
};

struct TraceRaysIndirectCommandKHR {

  using native_type = VkTraceRaysIndirectCommandKHR;

  TraceRaysIndirectCommandKHR(uint32_t width = {}, uint32_t height = {}, uint32_t depth = {})
    : width_(width), height_(height), depth_(depth) {}

  TraceRaysIndirectCommandKHR(const native_type &rhs) : TraceRaysIndirectCommandKHR(std::bit_cast<TraceRaysIndirectCommandKHR>(rhs)) {}

  TraceRaysIndirectCommandKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<TraceRaysIndirectCommandKHR>(rhs);
    return *this;
  }

  auto operator<=>(const TraceRaysIndirectCommandKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  uint32_t width_;
  uint32_t height_;
  uint32_t depth_;
};

struct PhysicalDeviceShaderQuadControlFeaturesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR;

  using native_type = VkPhysicalDeviceShaderQuadControlFeaturesKHR;

  PhysicalDeviceShaderQuadControlFeaturesKHR(bool32 shader_quad_control = {}, void *next = {})
    : shader_quad_control_(shader_quad_control), next_(next) {}

  PhysicalDeviceShaderQuadControlFeaturesKHR(const native_type &rhs)
    : PhysicalDeviceShaderQuadControlFeaturesKHR(std::bit_cast<PhysicalDeviceShaderQuadControlFeaturesKHR>(rhs)) {}

  PhysicalDeviceShaderQuadControlFeaturesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceShaderQuadControlFeaturesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceShaderQuadControlFeaturesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR;
  void *next_;
  bool32 shader_quad_control_;
};

struct GraphicsPipelineLibraryCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT;

  using native_type = VkGraphicsPipelineLibraryCreateInfoEXT;

  GraphicsPipelineLibraryCreateInfoEXT(GraphicsPipelineLibraryMask flags = {}, const void *next = {}) : flags_(flags), next_(next) {}

  GraphicsPipelineLibraryCreateInfoEXT(const native_type &rhs)
    : GraphicsPipelineLibraryCreateInfoEXT(std::bit_cast<GraphicsPipelineLibraryCreateInfoEXT>(rhs)) {}

  GraphicsPipelineLibraryCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<GraphicsPipelineLibraryCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const GraphicsPipelineLibraryCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT;
  const void *next_;
  GraphicsPipelineLibraryMask flags_;
};

struct DrmFormatModifierPropertiesListEXT {

  static constexpr StructureType structure_type = StructureType::E_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;

  using native_type = VkDrmFormatModifierPropertiesListEXT;

  DrmFormatModifierPropertiesListEXT() = default;

  DrmFormatModifierPropertiesListEXT(const native_type &rhs)
    : DrmFormatModifierPropertiesListEXT(std::bit_cast<DrmFormatModifierPropertiesListEXT>(rhs)) {}

  DrmFormatModifierPropertiesListEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DrmFormatModifierPropertiesListEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DrmFormatModifierPropertiesListEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
  void *next_ = {};
  uint32_t drm_format_modifier_count_ = {};
  DrmFormatModifierPropertiesEXT *p_drm_format_modifier_properties_ = {};
};

struct PhysicalDeviceFragmentDensityMap2FeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;

  using native_type = VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;

  PhysicalDeviceFragmentDensityMap2FeaturesEXT(bool32 fragment_density_map_deferred = {}, void *next = {})
    : fragment_density_map_deferred_(fragment_density_map_deferred), next_(next) {}

  PhysicalDeviceFragmentDensityMap2FeaturesEXT(const native_type &rhs)
    : PhysicalDeviceFragmentDensityMap2FeaturesEXT(std::bit_cast<PhysicalDeviceFragmentDensityMap2FeaturesEXT>(rhs)) {}

  PhysicalDeviceFragmentDensityMap2FeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentDensityMap2FeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentDensityMap2FeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
  void *next_;
  bool32 fragment_density_map_deferred_;
};

struct PhysicalDeviceFragmentDensityMapPropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceFragmentDensityMapPropertiesEXT;

  PhysicalDeviceFragmentDensityMapPropertiesEXT() = default;

  PhysicalDeviceFragmentDensityMapPropertiesEXT(const native_type &rhs)
    : PhysicalDeviceFragmentDensityMapPropertiesEXT(std::bit_cast<PhysicalDeviceFragmentDensityMapPropertiesEXT>(rhs)) {}

  PhysicalDeviceFragmentDensityMapPropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentDensityMapPropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentDensityMapPropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
  void *next_ = {};
  Extent2D min_fragment_density_texel_size_ = {};
  Extent2D max_fragment_density_texel_size_ = {};
  bool32 fragment_density_invocations_ = {};
};

struct PhysicalDeviceFragmentDensityMap2PropertiesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;

  using native_type = VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;

  PhysicalDeviceFragmentDensityMap2PropertiesEXT() = default;

  PhysicalDeviceFragmentDensityMap2PropertiesEXT(const native_type &rhs)
    : PhysicalDeviceFragmentDensityMap2PropertiesEXT(std::bit_cast<PhysicalDeviceFragmentDensityMap2PropertiesEXT>(rhs)) {}

  PhysicalDeviceFragmentDensityMap2PropertiesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceFragmentDensityMap2PropertiesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceFragmentDensityMap2PropertiesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
  void *next_ = {};
  bool32 subsampled_loads_ = {};
  bool32 subsampled_coarse_reconstruction_early_access_ = {};
  uint32_t max_subsampled_array_layers_ = {};
  uint32_t max_descriptor_set_subsampled_samplers_ = {};
};

struct PhysicalDevicePrivateDataFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;

  using native_type = VkPhysicalDevicePrivateDataFeatures;

  PhysicalDevicePrivateDataFeatures(bool32 private_data = {}, void *next = {}) : private_data_(private_data), next_(next) {}

  PhysicalDevicePrivateDataFeatures(const native_type &rhs)
    : PhysicalDevicePrivateDataFeatures(std::bit_cast<PhysicalDevicePrivateDataFeatures>(rhs)) {}

  PhysicalDevicePrivateDataFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePrivateDataFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePrivateDataFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
  void *next_;
  bool32 private_data_;
};

struct RenderPassFragmentDensityMapCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;

  using native_type = VkRenderPassFragmentDensityMapCreateInfoEXT;

  RenderPassFragmentDensityMapCreateInfoEXT(AttachmentReference fragment_density_map_attachment = {}, const void *next = {})
    : fragment_density_map_attachment_(fragment_density_map_attachment), next_(next) {}

  RenderPassFragmentDensityMapCreateInfoEXT(const native_type &rhs)
    : RenderPassFragmentDensityMapCreateInfoEXT(std::bit_cast<RenderPassFragmentDensityMapCreateInfoEXT>(rhs)) {}

  RenderPassFragmentDensityMapCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassFragmentDensityMapCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassFragmentDensityMapCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
  const void *next_;
  AttachmentReference fragment_density_map_attachment_;
};

struct PresentInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PRESENT_INFO_KHR;

  using native_type = VkPresentInfoKHR;

  PresentInfoKHR(uint32_t wait_semaphore_count = {},
                 const VkSemaphore *p_wait_semaphores = {},
                 uint32_t swapchain_count = {},
                 const VkSwapchainKHR *p_swapchains = {},
                 const uint32_t *p_image_indices = {},
                 Result *p_results = {},
                 const void *next = {})
    : wait_semaphore_count_(wait_semaphore_count), p_wait_semaphores_(p_wait_semaphores), swapchain_count_(swapchain_count),
      p_swapchains_(p_swapchains), p_image_indices_(p_image_indices), p_results_(p_results), next_(next) {}

  PresentInfoKHR(const native_type &rhs) : PresentInfoKHR(std::bit_cast<PresentInfoKHR>(rhs)) {}

  PresentInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PresentInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PresentInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PRESENT_INFO_KHR;
  const void *next_;
  uint32_t wait_semaphore_count_;
  const VkSemaphore *p_wait_semaphores_;
  uint32_t swapchain_count_;
  const VkSwapchainKHR *p_swapchains_;
  const uint32_t *p_image_indices_;
  Result *p_results_;
};

struct QueueFamilyProperties2 {

  static constexpr StructureType structure_type = StructureType::E_QUEUE_FAMILY_PROPERTIES_2;

  using native_type = VkQueueFamilyProperties2;

  QueueFamilyProperties2() = default;

  QueueFamilyProperties2(const native_type &rhs) : QueueFamilyProperties2(std::bit_cast<QueueFamilyProperties2>(rhs)) {}

  QueueFamilyProperties2 &operator=(const native_type &rhs) {
    *this = std::bit_cast<QueueFamilyProperties2>(rhs);
    return *this;
  }

  auto operator<=>(const QueueFamilyProperties2 &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_QUEUE_FAMILY_PROPERTIES_2;
  void *next_ = {};
  QueueFamilyProperties queue_family_properties_ = {};
};

struct SubpassFragmentDensityMapOffsetEndInfoQCOM {

  static constexpr StructureType structure_type = StructureType::E_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM;

  using native_type = VkSubpassFragmentDensityMapOffsetEndInfoQCOM;

  SubpassFragmentDensityMapOffsetEndInfoQCOM(uint32_t fragment_density_offset_count = {},
                                             const Offset2D *p_fragment_density_offsets = {},
                                             const void *next = {})
    : fragment_density_offset_count_(fragment_density_offset_count), p_fragment_density_offsets_(p_fragment_density_offsets), next_(next) {}

  SubpassFragmentDensityMapOffsetEndInfoQCOM(const native_type &rhs)
    : SubpassFragmentDensityMapOffsetEndInfoQCOM(std::bit_cast<SubpassFragmentDensityMapOffsetEndInfoQCOM>(rhs)) {}

  SubpassFragmentDensityMapOffsetEndInfoQCOM &operator=(const native_type &rhs) {
    *this = std::bit_cast<SubpassFragmentDensityMapOffsetEndInfoQCOM>(rhs);
    return *this;
  }

  auto operator<=>(const SubpassFragmentDensityMapOffsetEndInfoQCOM &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM;
  const void *next_;
  uint32_t fragment_density_offset_count_;
  const Offset2D *p_fragment_density_offsets_;
};

struct PhysicalDeviceScalarBlockLayoutFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;

  using native_type = VkPhysicalDeviceScalarBlockLayoutFeatures;

  PhysicalDeviceScalarBlockLayoutFeatures(bool32 scalar_block_layout = {}, void *next = {})
    : scalar_block_layout_(scalar_block_layout), next_(next) {}

  PhysicalDeviceScalarBlockLayoutFeatures(const native_type &rhs)
    : PhysicalDeviceScalarBlockLayoutFeatures(std::bit_cast<PhysicalDeviceScalarBlockLayoutFeatures>(rhs)) {}

  PhysicalDeviceScalarBlockLayoutFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceScalarBlockLayoutFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceScalarBlockLayoutFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
  void *next_;
  bool32 scalar_block_layout_;
};

struct VideoEncodeH264QualityLevelPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR;

  using native_type = VkVideoEncodeH264QualityLevelPropertiesKHR;

  VideoEncodeH264QualityLevelPropertiesKHR() = default;

  VideoEncodeH264QualityLevelPropertiesKHR(const native_type &rhs)
    : VideoEncodeH264QualityLevelPropertiesKHR(std::bit_cast<VideoEncodeH264QualityLevelPropertiesKHR>(rhs)) {}

  VideoEncodeH264QualityLevelPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<VideoEncodeH264QualityLevelPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const VideoEncodeH264QualityLevelPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR;
  void *next_ = {};
  VideoEncodeH264RateControlMask preferred_rate_control_flags_ = {};
  uint32_t preferred_gop_frame_count_ = {};
  uint32_t preferred_idr_period_ = {};
  uint32_t preferred_consecutive_bframe_count_ = {};
  uint32_t preferred_temporal_layer_count_ = {};
  VideoEncodeH264QpKHR preferred_constant_qp_ = {};
  uint32_t preferred_max_l0reference_count_ = {};
  uint32_t preferred_max_l1reference_count_ = {};
  bool32 preferred_std_entropy_coding_mode_flag_ = {};
};

struct PhysicalDeviceMemoryPriorityFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;

  using native_type = VkPhysicalDeviceMemoryPriorityFeaturesEXT;

  PhysicalDeviceMemoryPriorityFeaturesEXT(bool32 memory_priority = {}, void *next = {}) : memory_priority_(memory_priority), next_(next) {}

  PhysicalDeviceMemoryPriorityFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceMemoryPriorityFeaturesEXT(std::bit_cast<PhysicalDeviceMemoryPriorityFeaturesEXT>(rhs)) {}

  PhysicalDeviceMemoryPriorityFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMemoryPriorityFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMemoryPriorityFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
  void *next_;
  bool32 memory_priority_;
};

struct ImageDrmFormatModifierExplicitCreateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;

  using native_type = VkImageDrmFormatModifierExplicitCreateInfoEXT;

  ImageDrmFormatModifierExplicitCreateInfoEXT(uint64_t drm_format_modifier = {},
                                              uint32_t drm_format_modifier_plane_count = {},
                                              const SubresourceLayout *p_plane_layouts = {},
                                              const void *next = {})
    : drm_format_modifier_(drm_format_modifier), drm_format_modifier_plane_count_(drm_format_modifier_plane_count),
      p_plane_layouts_(p_plane_layouts), next_(next) {}

  ImageDrmFormatModifierExplicitCreateInfoEXT(const native_type &rhs)
    : ImageDrmFormatModifierExplicitCreateInfoEXT(std::bit_cast<ImageDrmFormatModifierExplicitCreateInfoEXT>(rhs)) {}

  ImageDrmFormatModifierExplicitCreateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageDrmFormatModifierExplicitCreateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const ImageDrmFormatModifierExplicitCreateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
  const void *next_;
  uint64_t drm_format_modifier_;
  uint32_t drm_format_modifier_plane_count_;
  const SubresourceLayout *p_plane_layouts_;
};

struct PerformanceQuerySubmitInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;

  using native_type = VkPerformanceQuerySubmitInfoKHR;

  PerformanceQuerySubmitInfoKHR(uint32_t counter_pass_index = {}, const void *next = {})
    : counter_pass_index_(counter_pass_index), next_(next) {}

  PerformanceQuerySubmitInfoKHR(const native_type &rhs)
    : PerformanceQuerySubmitInfoKHR(std::bit_cast<PerformanceQuerySubmitInfoKHR>(rhs)) {}

  PerformanceQuerySubmitInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceQuerySubmitInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceQuerySubmitInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
  const void *next_;
  uint32_t counter_pass_index_;
};

struct RenderingFragmentShadingRateAttachmentInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;

  using native_type = VkRenderingFragmentShadingRateAttachmentInfoKHR;

  RenderingFragmentShadingRateAttachmentInfoKHR(VkImageView image_view = {},
                                                ImageLayout image_layout = ImageLayout::E_UNDEFINED,
                                                Extent2D shading_rate_attachment_texel_size = {},
                                                const void *next = {})
    : image_view_(image_view), image_layout_(image_layout), shading_rate_attachment_texel_size_(shading_rate_attachment_texel_size),
      next_(next) {}

  RenderingFragmentShadingRateAttachmentInfoKHR(const native_type &rhs)
    : RenderingFragmentShadingRateAttachmentInfoKHR(std::bit_cast<RenderingFragmentShadingRateAttachmentInfoKHR>(rhs)) {}

  RenderingFragmentShadingRateAttachmentInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderingFragmentShadingRateAttachmentInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const RenderingFragmentShadingRateAttachmentInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
  const void *next_;
  VkImageView image_view_;
  ImageLayout image_layout_;
  Extent2D shading_rate_attachment_texel_size_;
};

struct MemoryPriorityAllocateInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;

  using native_type = VkMemoryPriorityAllocateInfoEXT;

  MemoryPriorityAllocateInfoEXT(float priority = {}, const void *next = {}) : priority_(priority), next_(next) {}

  MemoryPriorityAllocateInfoEXT(const native_type &rhs)
    : MemoryPriorityAllocateInfoEXT(std::bit_cast<MemoryPriorityAllocateInfoEXT>(rhs)) {}

  MemoryPriorityAllocateInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<MemoryPriorityAllocateInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const MemoryPriorityAllocateInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
  const void *next_;
  float priority_;
};

struct PhysicalDeviceBufferDeviceAddressFeaturesEXT {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;

  using native_type = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

  PhysicalDeviceBufferDeviceAddressFeaturesEXT(bool32 buffer_device_address = {},
                                               bool32 buffer_device_address_capture_replay = {},
                                               bool32 buffer_device_address_multi_device = {},
                                               void *next = {})
    : buffer_device_address_(buffer_device_address), buffer_device_address_capture_replay_(buffer_device_address_capture_replay),
      buffer_device_address_multi_device_(buffer_device_address_multi_device), next_(next) {}

  PhysicalDeviceBufferDeviceAddressFeaturesEXT(const native_type &rhs)
    : PhysicalDeviceBufferDeviceAddressFeaturesEXT(std::bit_cast<PhysicalDeviceBufferDeviceAddressFeaturesEXT>(rhs)) {}

  PhysicalDeviceBufferDeviceAddressFeaturesEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceBufferDeviceAddressFeaturesEXT>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceBufferDeviceAddressFeaturesEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
  void *next_;
  bool32 buffer_device_address_;
  bool32 buffer_device_address_capture_replay_;
  bool32 buffer_device_address_multi_device_;
};

struct RenderPassMultiviewCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_RENDER_PASS_MULTIVIEW_CREATE_INFO;

  using native_type = VkRenderPassMultiviewCreateInfo;

  RenderPassMultiviewCreateInfo(uint32_t subpass_count = {},
                                const uint32_t *p_view_masks = {},
                                uint32_t dependency_count = {},
                                const int32_t *p_view_offsets = {},
                                uint32_t correlation_mask_count = {},
                                const uint32_t *p_correlation_masks = {},
                                const void *next = {})
    : subpass_count_(subpass_count), p_view_masks_(p_view_masks), dependency_count_(dependency_count), p_view_offsets_(p_view_offsets),
      correlation_mask_count_(correlation_mask_count), p_correlation_masks_(p_correlation_masks), next_(next) {}

  RenderPassMultiviewCreateInfo(const native_type &rhs)
    : RenderPassMultiviewCreateInfo(std::bit_cast<RenderPassMultiviewCreateInfo>(rhs)) {}

  RenderPassMultiviewCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<RenderPassMultiviewCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const RenderPassMultiviewCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_RENDER_PASS_MULTIVIEW_CREATE_INFO;
  const void *next_;
  uint32_t subpass_count_;
  const uint32_t *p_view_masks_;
  uint32_t dependency_count_;
  const int32_t *p_view_offsets_;
  uint32_t correlation_mask_count_;
  const uint32_t *p_correlation_masks_;
};

struct BufferOpaqueCaptureAddressCreateInfo {

  static constexpr StructureType structure_type = StructureType::E_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;

  using native_type = VkBufferOpaqueCaptureAddressCreateInfo;

  BufferOpaqueCaptureAddressCreateInfo(uint64_t opaque_capture_address = {}, const void *next = {})
    : opaque_capture_address_(opaque_capture_address), next_(next) {}

  BufferOpaqueCaptureAddressCreateInfo(const native_type &rhs)
    : BufferOpaqueCaptureAddressCreateInfo(std::bit_cast<BufferOpaqueCaptureAddressCreateInfo>(rhs)) {}

  BufferOpaqueCaptureAddressCreateInfo &operator=(const native_type &rhs) {
    *this = std::bit_cast<BufferOpaqueCaptureAddressCreateInfo>(rhs);
    return *this;
  }

  auto operator<=>(const BufferOpaqueCaptureAddressCreateInfo &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
  const void *next_;
  uint64_t opaque_capture_address_;
};

struct PhysicalDeviceImagelessFramebufferFeatures {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;

  using native_type = VkPhysicalDeviceImagelessFramebufferFeatures;

  PhysicalDeviceImagelessFramebufferFeatures(bool32 imageless_framebuffer = {}, void *next = {})
    : imageless_framebuffer_(imageless_framebuffer), next_(next) {}

  PhysicalDeviceImagelessFramebufferFeatures(const native_type &rhs)
    : PhysicalDeviceImagelessFramebufferFeatures(std::bit_cast<PhysicalDeviceImagelessFramebufferFeatures>(rhs)) {}

  PhysicalDeviceImagelessFramebufferFeatures &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceImagelessFramebufferFeatures>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceImagelessFramebufferFeatures &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
  void *next_;
  bool32 imageless_framebuffer_;
};

struct ClearDepthStencilValue {

  using native_type = VkClearDepthStencilValue;

  ClearDepthStencilValue(float depth = {}, uint32_t stencil = {}) : depth_(depth), stencil_(stencil) {}

  ClearDepthStencilValue(const native_type &rhs) : ClearDepthStencilValue(std::bit_cast<ClearDepthStencilValue>(rhs)) {}

  ClearDepthStencilValue &operator=(const native_type &rhs) {
    *this = std::bit_cast<ClearDepthStencilValue>(rhs);
    return *this;
  }

  auto operator<=>(const ClearDepthStencilValue &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  float depth_;
  uint32_t stencil_;
};

struct SwapchainPresentBarrierCreateInfoNV {

  static constexpr StructureType structure_type = StructureType::E_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV;

  using native_type = VkSwapchainPresentBarrierCreateInfoNV;

  SwapchainPresentBarrierCreateInfoNV(bool32 present_barrier_enable = {}, void *next = {})
    : present_barrier_enable_(present_barrier_enable), next_(next) {}

  SwapchainPresentBarrierCreateInfoNV(const native_type &rhs)
    : SwapchainPresentBarrierCreateInfoNV(std::bit_cast<SwapchainPresentBarrierCreateInfoNV>(rhs)) {}

  SwapchainPresentBarrierCreateInfoNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<SwapchainPresentBarrierCreateInfoNV>(rhs);
    return *this;
  }

  auto operator<=>(const SwapchainPresentBarrierCreateInfoNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV;
  void *next_;
  bool32 present_barrier_enable_;
};

struct PhysicalDeviceCooperativeMatrixFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;

  using native_type = VkPhysicalDeviceCooperativeMatrixFeaturesNV;

  PhysicalDeviceCooperativeMatrixFeaturesNV(bool32 cooperative_matrix = {},
                                            bool32 cooperative_matrix_robust_buffer_access = {},
                                            void *next = {})
    : cooperative_matrix_(cooperative_matrix), cooperative_matrix_robust_buffer_access_(cooperative_matrix_robust_buffer_access),
      next_(next) {}

  PhysicalDeviceCooperativeMatrixFeaturesNV(const native_type &rhs)
    : PhysicalDeviceCooperativeMatrixFeaturesNV(std::bit_cast<PhysicalDeviceCooperativeMatrixFeaturesNV>(rhs)) {}

  PhysicalDeviceCooperativeMatrixFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceCooperativeMatrixFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceCooperativeMatrixFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
  void *next_;
  bool32 cooperative_matrix_;
  bool32 cooperative_matrix_robust_buffer_access_;
};

struct ImageViewAddressPropertiesNVX {

  static constexpr StructureType structure_type = StructureType::E_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;

  using native_type = VkImageViewAddressPropertiesNVX;

  ImageViewAddressPropertiesNVX() = default;

  ImageViewAddressPropertiesNVX(const native_type &rhs)
    : ImageViewAddressPropertiesNVX(std::bit_cast<ImageViewAddressPropertiesNVX>(rhs)) {}

  ImageViewAddressPropertiesNVX &operator=(const native_type &rhs) {
    *this = std::bit_cast<ImageViewAddressPropertiesNVX>(rhs);
    return *this;
  }

  auto operator<=>(const ImageViewAddressPropertiesNVX &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
  void *next_ = {};
  DeviceAddress device_address_ = {};
  DeviceSize size_ = {};
};

struct AccelerationStructureDeviceAddressInfoKHR {

  static constexpr StructureType structure_type = StructureType::E_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;

  using native_type = VkAccelerationStructureDeviceAddressInfoKHR;

  AccelerationStructureDeviceAddressInfoKHR(VkAccelerationStructureKHR acceleration_structure = {}, const void *next = {})
    : acceleration_structure_(acceleration_structure), next_(next) {}

  AccelerationStructureDeviceAddressInfoKHR(const native_type &rhs)
    : AccelerationStructureDeviceAddressInfoKHR(std::bit_cast<AccelerationStructureDeviceAddressInfoKHR>(rhs)) {}

  AccelerationStructureDeviceAddressInfoKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<AccelerationStructureDeviceAddressInfoKHR>(rhs);
    return *this;
  }

  auto operator<=>(const AccelerationStructureDeviceAddressInfoKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
  const void *next_;
  VkAccelerationStructureKHR acceleration_structure_;
};

struct PhysicalDeviceAccelerationStructurePropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;

  using native_type = VkPhysicalDeviceAccelerationStructurePropertiesKHR;

  PhysicalDeviceAccelerationStructurePropertiesKHR() = default;

  PhysicalDeviceAccelerationStructurePropertiesKHR(const native_type &rhs)
    : PhysicalDeviceAccelerationStructurePropertiesKHR(std::bit_cast<PhysicalDeviceAccelerationStructurePropertiesKHR>(rhs)) {}

  PhysicalDeviceAccelerationStructurePropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceAccelerationStructurePropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceAccelerationStructurePropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
  void *next_ = {};
  uint64_t max_geometry_count_ = {};
  uint64_t max_instance_count_ = {};
  uint64_t max_primitive_count_ = {};
  uint32_t max_per_stage_descriptor_acceleration_structures_ = {};
  uint32_t max_per_stage_descriptor_update_after_bind_acceleration_structures_ = {};
  uint32_t max_descriptor_set_acceleration_structures_ = {};
  uint32_t max_descriptor_set_update_after_bind_acceleration_structures_ = {};
  uint32_t min_acceleration_structure_scratch_offset_alignment_ = {};
};

struct PhysicalDevicePerformanceQueryPropertiesKHR {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;

  using native_type = VkPhysicalDevicePerformanceQueryPropertiesKHR;

  PhysicalDevicePerformanceQueryPropertiesKHR() = default;

  PhysicalDevicePerformanceQueryPropertiesKHR(const native_type &rhs)
    : PhysicalDevicePerformanceQueryPropertiesKHR(std::bit_cast<PhysicalDevicePerformanceQueryPropertiesKHR>(rhs)) {}

  PhysicalDevicePerformanceQueryPropertiesKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDevicePerformanceQueryPropertiesKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDevicePerformanceQueryPropertiesKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
  void *next_ = {};
  bool32 allow_command_buffer_query_copies_ = {};
};

struct DescriptorGetInfoEXT {

  static constexpr StructureType structure_type = StructureType::E_DESCRIPTOR_GET_INFO_EXT;

  using native_type = VkDescriptorGetInfoEXT;

  DescriptorGetInfoEXT(DescriptorType type = DescriptorType::E_SAMPLER, VkDescriptorDataEXT data = {}, const void *next = {})
    : type_(type), data_(data), next_(next) {}

  DescriptorGetInfoEXT(const native_type &rhs) : DescriptorGetInfoEXT(std::bit_cast<DescriptorGetInfoEXT>(rhs)) {}

  DescriptorGetInfoEXT &operator=(const native_type &rhs) {
    *this = std::bit_cast<DescriptorGetInfoEXT>(rhs);
    return *this;
  }

  auto operator<=>(const DescriptorGetInfoEXT &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_DESCRIPTOR_GET_INFO_EXT;
  const void *next_;
  DescriptorType type_;
  VkDescriptorDataEXT data_;
};

struct PerformanceCounterKHR {

  static constexpr StructureType structure_type = StructureType::E_PERFORMANCE_COUNTER_KHR;

  using native_type = VkPerformanceCounterKHR;

  PerformanceCounterKHR() = default;

  PerformanceCounterKHR(const native_type &rhs) : PerformanceCounterKHR(std::bit_cast<PerformanceCounterKHR>(rhs)) {}

  PerformanceCounterKHR &operator=(const native_type &rhs) {
    *this = std::bit_cast<PerformanceCounterKHR>(rhs);
    return *this;
  }

  auto operator<=>(const PerformanceCounterKHR &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PERFORMANCE_COUNTER_KHR;
  void *next_ = {};
  PerformanceCounterUnit unit_ = {};
  PerformanceCounterScope scope_ = {};
  PerformanceCounterStorage storage_ = {};
  std::array<uint8_t, VK_UUID_SIZE> uuid_ = {};
};

struct PhysicalDeviceMeshShaderFeaturesNV {

  static constexpr StructureType structure_type = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;

  using native_type = VkPhysicalDeviceMeshShaderFeaturesNV;

  PhysicalDeviceMeshShaderFeaturesNV(bool32 task_shader = {}, bool32 mesh_shader = {}, void *next = {})
    : task_shader_(task_shader), mesh_shader_(mesh_shader), next_(next) {}

  PhysicalDeviceMeshShaderFeaturesNV(const native_type &rhs)
    : PhysicalDeviceMeshShaderFeaturesNV(std::bit_cast<PhysicalDeviceMeshShaderFeaturesNV>(rhs)) {}

  PhysicalDeviceMeshShaderFeaturesNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<PhysicalDeviceMeshShaderFeaturesNV>(rhs);
    return *this;
  }

  auto operator<=>(const PhysicalDeviceMeshShaderFeaturesNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
  void *next_;
  bool32 task_shader_;
  bool32 mesh_shader_;
};

struct FramebufferMixedSamplesCombinationNV {

  static constexpr StructureType structure_type = StructureType::E_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;

  using native_type = VkFramebufferMixedSamplesCombinationNV;

  FramebufferMixedSamplesCombinationNV() = default;

  FramebufferMixedSamplesCombinationNV(const native_type &rhs)
    : FramebufferMixedSamplesCombinationNV(std::bit_cast<FramebufferMixedSamplesCombinationNV>(rhs)) {}

  FramebufferMixedSamplesCombinationNV &operator=(const native_type &rhs) {
    *this = std::bit_cast<FramebufferMixedSamplesCombinationNV>(rhs);
    return *this;
  }

  auto operator<=>(const FramebufferMixedSamplesCombinationNV &other) const = default;

  auto *get() { return reinterpret_cast<native_type *>(this); }

  StructureType structure_type_ = StructureType::E_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
  void *next_ = {};
  CoverageReductionMode coverage_reduction_mode_ = {};
  SampleCountMaskBit rasterization_samples_ = {};
  SampleCountMask depth_stencil_samples_ = {};
  SampleCountMask color_samples_ = {};
};

} // namespace Walle

#include "graphics_structures.ipp"

#endif // WALLE_GRAPHICS_STRUCTURES_H
